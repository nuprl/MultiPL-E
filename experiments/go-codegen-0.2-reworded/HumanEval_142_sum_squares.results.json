{
  "name": "HumanEval_142_sum_squares",
  "language": "go_test.go",
  "prompt": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n",
  "tests": "func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v%4 == 0 && v%3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n        if v % 4 == 0 && v % 3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpro43wf5d_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpro43wf5d_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpro43wf5d_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpro43wf5d_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpro43wf5d_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpro43wf5d_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpro43wf5d_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpro43wf5d_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v % 4 == 0 && v % 3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i % 4 != 0 && i % 3 != 0 {\n            sum += lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=9)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=-3)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=-126)', got '%!s(int=31)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=3030)', got '%!s(int=12938)'\n    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=-14196)', got '%!s(int=7168)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=-1448)', got '%!s(int=1925)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v % 4 == 0 && v % 3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i%4 == 0 && i%3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i % 4 == 0 && i % 3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i % 4 == 0 && i % 3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            lst[i] *= lst[i]\n        }\n        if i%4 == 0 && i%3 != 0 {\n            lst[i] *= lst[i]\n        }\n        sum += lst[i]\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=-126)', got '%!s(int=24)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=3030)', got '%!s(int=3042)'\n    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=-14196)', got '%!s(int=6044)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=-1448)', got '%!s(int=1252)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v % 4 == 0 && v % 3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            lst[i] *= lst[i]\n        }\n        if i%4 == 0 && i%3 != 0 {\n            lst[i] *= lst[i]\n        }\n        sum += lst[i]\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=-126)', got '%!s(int=24)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=3030)', got '%!s(int=3042)'\n    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=-14196)', got '%!s(int=6044)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpu26b_vhg_test.go:56: expected '%!s(int=-1448)', got '%!s(int=1252)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v%4 == 0 && v%3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i%4 == 0 && i%3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4 == 0 && v%3 != 0 {\n            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n        if v%4 == 0 && v%3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        } else if v % 4 == 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpkmekcenc_test.go:54: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpkmekcenc_test.go:54: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpkmekcenc_test.go:54: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpkmekcenc_test.go:54: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpkmekcenc_test.go:54: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpkmekcenc_test.go:54: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpkmekcenc_test.go:54: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpkmekcenc_test.go:54: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpvizym_bi_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpvizym_bi_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpvizym_bi_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvizym_bi_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpvizym_bi_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpvizym_bi_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpvizym_bi_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpvizym_bi_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4 == 0 && v%3 != 0 {\n            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpd7sc3_t6_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpd7sc3_t6_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpd7sc3_t6_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpd7sc3_t6_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpd7sc3_t6_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpd7sc3_t6_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpd7sc3_t6_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpd7sc3_t6_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i % 4 == 0 && i % 3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjo590294_test.go:55: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v%4 == 0 && v%3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            sum += lst[i] * lst[i]\n        } else if i%4 == 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp_ghwvwbx_test.go:65: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp_ghwvwbx_test.go:65: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp_ghwvwbx_test.go:65: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp_ghwvwbx_test.go:65: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp_ghwvwbx_test.go:65: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp_ghwvwbx_test.go:65: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp_ghwvwbx_test.go:65: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp_ghwvwbx_test.go:65: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i%4 == 0 && i%3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i]\n        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp6k98r816_test.go:54: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp6k98r816_test.go:54: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp6k98r816_test.go:54: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp6k98r816_test.go:54: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp6k98r816_test.go:54: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp6k98r816_test.go:54: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp6k98r816_test.go:54: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp6k98r816_test.go:54: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v % 4 == 0 && v % 3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i]\n        } else if i % 4 == 0 && i % 3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmphheotyiy_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v % 4 == 0 && v % 3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i%4 == 0 && i%3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i%4 == 0 && i%3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n        if v%4 == 0 && v%3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v % 4 == 0 && v % 3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpirky83mj_test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgmdz66s0_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4 == 0 && v%3 != 0 {\n            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            lst[i] *= lst[i]\n        }\n        if i%4 != 0 && i%3 != 0 {\n            lst[i] *= lst[i]\n        }\n        sum += lst[i]\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmppi9epo74_test.go:56: expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmppi9epo74_test.go:56: expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmppi9epo74_test.go:56: expected '%!s(int=-3)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmppi9epo74_test.go:56: expected '%!s(int=-126)', got '%!s(int=26)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmppi9epo74_test.go:56: expected '%!s(int=3030)', got '%!s(int=12936)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmppi9epo74_test.go:56: expected '%!s(int=-14196)', got '%!s(int=7164)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmppi9epo74_test.go:56: expected '%!s(int=-1448)', got '%!s(int=1912)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i]\n        } else if i % 4 == 0 && i % 3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmm0_r1hi_test.go:54: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i % 4 != 0 && i % 3 != 0 {\n            sum += lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=9)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=-3)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=-126)', got '%!s(int=31)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=3030)', got '%!s(int=12938)'\n    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=-14196)', got '%!s(int=7168)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpsydyybk6_test.go:55: expected '%!s(int=-1448)', got '%!s(int=1925)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v%4 == 0 && v%3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v%4 == 0 && v%3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdzvs3gmi_test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n        if v % 4 == 0 && v % 3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n        if v%4 == 0 && v%3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    for _, v := range lst {\n        if v % 4 == 0 && v % 3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpe38sy9h__test.go:57: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n        if v%4 == 0 && v%3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i%4 == 0 && i%3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpju2ancvq_test.go:55: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpdf9wcwln_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n        if v%4 == 0 && v%3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzxcus2sf_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7pcltukg_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n        if v%4 == 0 && v%3 != 0 {\n            sum += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpvk1opnn9_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgvpydtui_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i%4 == 0 && i%3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 3 == 0 {\n            sum += v * v\n        }\n        if v % 4 == 0 && v % 3 != 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=-14196)', got '%!s(int=-65343)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpr497cq2f_test.go:55: expected '%!s(int=-1448)', got '%!s(int=8670)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpbrdtsy6w_test.go:63: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v * v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpqf7vz12h_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=14)', got '%!s(int=81)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-126)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=3030)', got '%!s(int=9801)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-14196)', got '%!s(int=2817)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpx4e9fd46_test.go:52: expected '%!s(int=-1448)', got '%!s(int=414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            sum += lst[i] * lst[i]\n        }\n        if i%4 == 0 && i%3 != 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=-126)', got '%!s(int=-123)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7fnp9u5t_test.go:66: expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}