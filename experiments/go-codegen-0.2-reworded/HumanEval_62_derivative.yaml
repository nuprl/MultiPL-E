name: HumanEval_62_derivative
language: go_test.go
prompt: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2\
  \ + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3,\
  \ 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2,\
  \ 6}\nfunc derivative(xs []int) []int {\n"
tests: "func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4,\
  \ 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n\
  \     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
  \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
  \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
