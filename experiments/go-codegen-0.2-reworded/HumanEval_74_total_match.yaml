name: HumanEval_74_total_match
language: go_test.go
prompt: "package total_match_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function that accepts two lists of strings and returns the list that\
  \ has \n// total number of chars in the all strings of the list less than the other\
  \ list.\n// if the two lists have the same number of chars, return the first list.\n\
  // Examples\n// >>> total_match([]string{}, []string{})\n// []string{}\n// >>> total_match([]string{\"\
  hi\", \"admin\"}, []string{\"hI\", \"Hi\"})\n// []string{\"hI\", \"Hi\"}\n// >>>\
  \ total_match([]string{\"hi\", \"admin\"}, []string{\"hi\", \"hi\", \"admin\", \"\
  project\"})\n// []string{\"hi\", \"admin\"}\n// >>> total_match([]string{\"hi\"\
  , \"admin\"}, []string{\"hI\", \"hi\", \"hi\"})\n// []string{\"hI\", \"hi\", \"\
  hi\"}\n// >>> total_match([]string{\"4\"}, []string{\"1\", \"2\", \"3\", \"4\",\
  \ \"5\"})\n// []string{\"4\"}\nfunc total_match(lst1 []string, lst2 []string) []string\
  \ {\n"
tests: "func TestTotal_Match(t *testing.T) {\n  candidate := total_match\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]string{}, []string{}), expected: []string{}\
  \ },\n     { actual: candidate([]string{\"hi\", \"admin\"}, []string{\"hi\", \"\
  hi\"}), expected: []string{\"hi\", \"hi\"} },\n     { actual: candidate([]string{\"\
  hi\", \"admin\"}, []string{\"hi\", \"hi\", \"admin\", \"project\"}), expected: []string{\"\
  hi\", \"admin\"} },\n     { actual: candidate([]string{\"4\"}, []string{\"1\", \"\
  2\", \"3\", \"4\", \"5\"}), expected: []string{\"4\"} },\n     { actual: candidate([]string{\"\
  hi\", \"admin\"}, []string{\"hI\", \"Hi\"}), expected: []string{\"hI\", \"Hi\"}\
  \ },\n     { actual: candidate([]string{\"hi\", \"admin\"}, []string{\"hI\", \"\
  hi\", \"hi\"}), expected: []string{\"hI\", \"hi\", \"hi\"} },\n     { actual: candidate([]string{\"\
  hi\", \"admin\"}, []string{\"hI\", \"hi\", \"hii\"}), expected: []string{\"hi\"\
  , \"admin\"} },\n     { actual: candidate([]string{}, []string{\"this\"}), expected:\
  \ []string{} },\n     { actual: candidate([]string{\"this\"}, []string{}), expected:\
  \ []string{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
