name: HumanEval_70_strange_sort_list
language: go_test.go
prompt: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3,\
  \ 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5,\
  \ 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst\
  \ []int) []int {\n"
tests: "func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
  \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
  \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
  \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
  \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
  \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4,\
  \ 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5,\
  \ 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for\
    \ i := 1; i < len(lst); i += 2 {\n        lst[i] = lst[i] + lst[i + 1]\n    }\n\
    \    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n    }\n    return append([]int{min,\
    \ max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    lst\
    \ = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1],\
    \ lst[i]\n        }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n  \
    \      return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i\
    \ < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n   \
    \     }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n \
    \       if lst[i] == min {\n            result[i] = max\n        } else if lst[i]\
    \ == max {\n            result[i] = min\n        } else {\n            result[i]\
    \ = lst[i]\n        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0\
    \ {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n\n    lst =\
    \ append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) -\
    \ 2; i += 2 {\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    }\n    return\
    \ lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max\
    \ := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ result[i] = max\n        } else if lst[i] == max {\n            result[i] =\
    \ min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n\
    \    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] >\
    \ max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n\
    \    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n       \
    \ for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n    \
    \            lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n\
    \    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n\
    \    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i, v :=\
    \ range lst {\n        if v == min {\n            result[i] = max\n        } else\
    \ if v == max {\n            result[i] = min\n        } else {\n            result[i]\
    \ = v\n        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v\
    \ := range lst[1:] {\n        if v < min {\n            min = v\n        }\n \
    \       if v > max {\n            max = v\n        }\n    }\n    lst = append(lst,\
    \ min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 2; i += 2 {\n\
    \        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    }\n    return lst\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    return strange_sort_list_helper(lst, min, max)\n}\n", " \
    \   if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i]\
    \ = max\n        }\n    }\n\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == max {\n            result[i] = min\n        }\n    }\n\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] =\
    \ max\n        } else if lst[i] == max {\n            result[i] = min\n      \
    \  } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else\
    \ if lst[i] == max {\n            result[i] = min\n        } else {\n        \
    \    result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n   \
    \ for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[i+1] {\n          \
    \  lst[i], lst[i+1] = lst[i+1], lst[i]\n        }\n    }\n    return lst\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    return append(lst[:0], min, max, lst[1:]...)\n}\n", "  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst);\
    \ j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j],\
    \ lst[i]\n            }\n        }\n    }\n    return lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    return append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n\n    result := make([]int, len(lst))\n    for i := len(lst) - 1; i >=\
    \ 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n         \
    \   min = max\n            max = lst[i]\n        } else if lst[i] == max {\n \
    \           max = lst[i]\n        }\n    }\n\n    return result\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n       \
    \ return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst[1:] {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    result := []int{min, max}\n\
    \    for _, v := range lst {\n        if v < min {\n            result = append(result,\
    \ v)\n        }\n        if v > max {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if\
    \ lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min,\
    \ max}, strange_sort_list(lst[1:])...)\n}\n", "    if len(lst) == 0 {\n      \
    \  return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            result[i] = max\n        } else if lst[i] == max {\n \
    \           result[i] = min\n        } else {\n            result[i] = lst[i]\n\
    \        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if\
    \ lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min,\
    \ max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n\
    \    for i := len(lst) - 2; i >= 0; i-- {\n        lst = append(lst, lst[i])\n\
    \    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n  \
    \  }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst,\
    \ max)\n    for i := 0; i < len(lst) - 1; i += 2 {\n        lst[i], lst[i + 1]\
    \ = lst[i + 1], lst[i]\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i\
    \ < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n   \
    \     }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] >\
    \ lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n \
    \       }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if\
    \ lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n\
    \        if lst[i] == min {\n            result[i] = max\n        }\n    }\n \
    \   for i := 0; i < len(lst); i++ {\n        if result[i] == max {\n         \
    \   result[i] = min\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst[1:] {\n        if v < min {\n            min = v\n  \
    \      }\n        if v > max {\n            max = v\n        }\n    }\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            result[i] = max\n        } else if lst[i] == max {\n \
    \           result[i] = min\n        } else {\n            result[i] = lst[i]\n\
    \        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    lst\
    \ = append(lst, min)\n    lst = append(lst, max)\n\n    for i := 0; i < len(lst)\
    \ - 2; i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n\n    return\
    \ lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n\n    result := make([]int, len(lst))\n    for i, v := range\
    \ lst {\n        if v == min {\n            result[i] = max\n        } else if\
    \ v == max {\n            result[i] = min\n        } else {\n            result[i]\
    \ = v\n        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n \
    \       }\n        if lst[i] > max {\n            max = lst[i]\n        }\n  \
    \  }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == min {\n            result[i] = max\n        } else if\
    \ lst[i] == max {\n            result[i] = min\n        } else {\n           \
    \ result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n\n  \
    \  result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            result[i] = max\n        } else if lst[i]\
    \ == max {\n            result[i] = min\n        } else {\n            result[i]\
    \ = lst[i]\n        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0\
    \ {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v :=\
    \ range lst[1:] {\n        if v < min {\n            min = v\n        }\n    \
    \    if v > max {\n            max = v\n        }\n    }\n    return append([]int{min,\
    \ max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i\
    \ := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] ==\
    \ min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i <\
    \ len(result); i++ {\n        if result[i] == max {\n            result[i] = min\n\
    \        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n      \
    \  return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return\
    \ append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n\n    result\
    \ := []int{min, max}\n    for _, v := range lst[1:] {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else\
    \ if lst[i] == max {\n            result[i] = min\n        } else {\n        \
    \    result[i] = lst[i]\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == min {\n            result[i] = max\n        } else if\
    \ lst[i] == max {\n            result[i] = min\n        } else {\n           \
    \ result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i]\
    \ = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n\
    \    }\n\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n  \
    \          result[i] = min\n        }\n    }\n\n    return result\n}\n", "   \
    \ if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n       \
    \ return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i]\
    \ == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i\
    \ < len(result); i++ {\n        if result[i] != lst[i] {\n            fmt.Printf(\"\
    %d != %d\\n\", result[i], lst[i])\n        }\n    }\n\n    return result\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    \n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    \n    return strange_sort_list_helper(lst, min,\
    \ max)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i]\
    \ = max\n        }\n        if lst[i] == max {\n            result[i] = min\n\
    \        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if\
    \ lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n\
    \            result[i] = max\n        } else if lst[i] == max {\n            result[i]\
    \ = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\
    \    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] >\
    \ max {\n            max = lst[i]\n        }\n    }\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n\
    \            result[i] = max\n        } else if lst[i] == max {\n            result[i]\
    \ = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\
    \    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] >\
    \ max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n\
    \    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n       \
    \ for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n    \
    \            lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n\
    \    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n    }\n    return append([]int{min,\
    \ max}, strange_sort_list(lst[1:])...)\n}\n", "    if len(lst) == 0 {\n      \
    \  return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n \
    \       }\n        if lst[i] > max {\n            max = lst[i]\n        }\n  \
    \  }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == min {\n            result[i] = max\n        } else if\
    \ lst[i] == max {\n            result[i] = min\n        } else {\n           \
    \ result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i]\
    \ = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n\
    \    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n\
    \        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i]\
    \ > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min,\
    \ max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n   \
    \ for i := 0; i < len(lst) - 2; i += 2 {\n        lst[i], lst[i+1] = lst[i+1],\
    \ lst[i]\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if\
    \ lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n\
    \            result[i] = max\n        } else if lst[i] == max {\n            result[i]\
    \ = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\
    \    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n\
    \    for i := 1; i < len(lst); i += 2 {\n        lst[i], lst[i+1] = lst[i+1],\
    \ lst[i]\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if\
    \ lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst,\
    \ min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n\
    \        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n\
    \                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n \
    \   }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n   \
    \ }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    result := make([]int, len(lst))\n \
    \   for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if result[i]\
    \ == min {\n            result[i] = max\n        }\n        if result[i] == max\
    \ {\n            result[i] = min\n        }\n    }\n    return result\n}\n", " \
    \   if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n       \
    \ return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return\
    \ append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n       \
    \ return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst[1:] {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    return append([]int{min,\
    \ max}, lst...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0], min,\
    \ max, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i]\
    \ > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n\
    \            result[i] = max\n        } else if lst[i] == max {\n            result[i]\
    \ = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\
    \    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i]\
    \ > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n\
    \    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n       \
    \ for j := 0; j < len(lst) - i - 1; j++ {\n            if lst[j] > lst[j+1] {\n\
    \                lst[j], lst[j+1] = lst[j+1], lst[j]\n            }\n        }\n\
    \    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n  \
    \  }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n  \
    \      if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i]\
    \ > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min,\
    \ max}, strange_sort_list(lst[1:])...)\n}\n", "    if len(lst) == 0 {\n      \
    \  return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst =\
    \ append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] > lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1],\
    \ lst[i]\n        }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n  \
    \      return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i <\
    \ len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n     \
    \   }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] >\
    \ lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n \
    \       }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if\
    \ lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n\
    \        if lst[i] == min {\n            result[i] = max\n        }\n        if\
    \ lst[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i]\
    \ = max\n        } else if lst[i] == max {\n            result[i] = min\n    \
    \    } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return\
    \ result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n    min\
    \ := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n\n    lst = append(lst, min)\n    lst = append(lst, max)\n\
    \n    for i := 1; i < len(lst); i += 2 {\n        lst[i] = lst[i] + lst[i+1]\n\
    \    }\n\n    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n    \
    \    if v < min {\n            min = v\n        }\n        if v > max {\n    \
    \        max = v\n        }\n    }\n    return append([]int{min}, append([]int{max},\
    \ lst[1:]...)...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n\
    \    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n \
    \           lst[i], lst[i + 1] = lst[i + 1], lst[i]\n        }\n    }\n    return\
    \ lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for\
    \ i := 0; i < len(lst) - 1; i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n\
    \    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n  \
    \  }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n    \
    \    if v < min {\n            min = v\n        }\n        if v > max {\n    \
    \        max = v\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst);\
    \ j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j],\
    \ lst[i]\n            }\n        }\n    }\n    return lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0;\
    \ i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n         \
    \   if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n  \
    \          }\n        }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i\
    \ < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n   \
    \     }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    return append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i :=\
    \ 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0;\
    \ i < len(lst) - 2; i++ {\n        for j := i + 1; j < len(lst) - 1; j++ {\n \
    \           if lst[j] > lst[j + 1] {\n                lst[j], lst[j + 1] = lst[j\
    \ + 1], lst[j]\n            }\n        }\n    }\n    return lst\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    result := make([]int, len(lst))\n    for i := len(lst) -\
    \ 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n \
    \           result[i] = max\n            max = min\n            min = lst[i]\n\
    \        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            result[i] = max\n        } else if lst[i] == max {\n \
    \           result[i] = min\n        } else {\n            result[i] = lst[i]\n\
    \        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst\
    \ = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i] =\
    \ lst[i] + lst[i+1]\n    }\n    for i := len(lst) - 2; i >= 0; i -= 2 {\n    \
    \    lst[i] = lst[i] + lst[i+1]\n    }\n    return lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst[1:] {\n        if v < min {\n            min = v\n  \
    \      }\n        if v > max {\n            max = v\n        }\n    }\n    lst\
    \ = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        lst[i] = lst[i] + lst[i + 1]\n    }\n    return lst\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else\
    \ if lst[i] == max {\n            result[i] = min\n        } else {\n        \
    \    result[i] = lst[i]\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == min {\n            result[i] = max\n        } else if\
    \ lst[i] == max {\n            result[i] = min\n        } else {\n           \
    \ result[i] = lst[i]\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _,\
    \ v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst,\
    \ min)\n    lst = append(lst, max)\n    for i := len(lst) - 2; i >= 0; i-- {\n\
    \        lst = append(lst, lst[i])\n    }\n    return lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n\n    result := make([]int, len(lst))\n    for i := len(lst)\
    \ - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n\
    \            min--\n        }\n        if lst[i] == max {\n            max--\n\
    \        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst =\
    \ append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i], lst[i+1]\
    \ = lst[i+1], lst[i]\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n \
    \       return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v\
    \ := range lst {\n        if v < min {\n            min = v\n        }\n     \
    \   if v > max {\n            max = v\n        }\n    }\n    lst = append(lst,\
    \ min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n    \
    \    if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n\
    \        }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if result[i]\
    \ == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i\
    \ < len(lst); i++ {\n        if result[i] == max {\n            result[i] = min\n\
    \        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n      \
    \  return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst\
    \ = append(lst, max)\n    for i := len(lst) - 2; i >= 0; i-- {\n        lst =\
    \ append(lst, lst[i])\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i\
    \ < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n   \
    \     }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] >\
    \ lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n \
    \       }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst\
    \ = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] <\
    \ lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n   \
    \ }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i,\
    \ v := range lst {\n        if v == min {\n            result[i] = max\n     \
    \   } else if v == max {\n            result[i] = min\n        } else {\n    \
    \        result[i] = v\n        }\n    }\n\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _,\
    \ v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min,\
    \ max}, lst...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v <\
    \ min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n\
    \            result[i] = max\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if result[i] == max {\n            result[i] = min\n        }\n\
    \    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    return append([]int{min, max}, lst...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst,\
    \ max)\n    for i := 0; i < len(lst) - 1; i++ {\n        for j := i + 1; j < len(lst);\
    \ j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j],\
    \ lst[i]\n            }\n        }\n    }\n    return lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0;\
    \ i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n         \
    \   if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n  \
    \          }\n        }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i\
    \ < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n   \
    \     }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        } else if lst[i]\
    \ == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n\
    \            i = len(lst) - 1\n        }\n    }\n    return lst\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n   \
    \ for i := 0; i < len(lst) - 1; i++ {\n        for j := 0; j < len(lst) - i -\
    \ 1; j++ {\n            if lst[j] > lst[j + 1] {\n                lst[j], lst[j\
    \ + 1] = lst[j + 1], lst[j]\n            }\n        }\n    }\n    return lst\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i :=\
    \ len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] ==\
    \ min {\n            result[i] = max\n        }\n        if lst[i] == max {\n\
    \            result[i] = min\n        }\n    }\n    return result\n}\n", "   \
    \ if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n       \
    \ return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i <\
    \ len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n     \
    \   }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n  \
    \      if lst[i] == min {\n            result[i] = max\n        } else if lst[i]\
    \ == max {\n            result[i] = min\n        } else {\n            result[i]\
    \ = lst[i]\n        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i\
    \ < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n   \
    \     }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] >\
    \ lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n \
    \       }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i]\
    \ = max\n        } else if lst[i] == max {\n            result[i] = min\n    \
    \    } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return\
    \ result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n    min,\
    \ max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n  \
    \          max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ result[i] = max\n        } else if lst[i] == max {\n            result[i] =\
    \ min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n\
    \    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i]\
    \ > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n\
    \    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for\
    \ j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n        \
    \        lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n  \
    \  return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min\
    \ := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n\
    \    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n \
    \   }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n   \
    \ }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n       \
    \ if v < min {\n            min = v\n        }\n        if v > max {\n       \
    \     max = v\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i]\
    \ = max\n        } else if lst[i] == max {\n            result[i] = min\n    \
    \    } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return\
    \ result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max\
    \ := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n \
    \           min = v\n        }\n        if v > max {\n            max = v\n  \
    \      }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        result[i] = lst[i]\n        if result[i] == min {\n         \
    \   result[i] = max\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n\n    result\
    \ := []int{min, max}\n    for _, v := range lst {\n        if v < min {\n    \
    \        result = append(result, v)\n        }\n        if v > max {\n       \
    \     result = append(result, v)\n        }\n    }\n\n    return result\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n \
    \       }\n        if lst[i] > max {\n            max = lst[i]\n        }\n  \
    \  }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++\
    \ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i]\
    \ = max\n        }\n    }\n\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == max {\n            result[i] = min\n        }\n    }\n\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] =\
    \ max\n        } else if lst[i] == max {\n            result[i] = min\n      \
    \  } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i :=\
    \ len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] ==\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] == max {\n   \
    \         max = lst[i]\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i]\
    \ = lst[i]\n        if result[i] == min {\n            result[i] = max\n     \
    \   }\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if\
    \ lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min,\
    \ max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return append([]int{min}, max, min, max, lst[1:]...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i\
    \ := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] ==\
    \ min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i <\
    \ len(result); i++ {\n        lst[i] = result[i]\n    }\n\n    return lst\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else\
    \ if lst[i] == max {\n            result[i] = min\n        } else {\n        \
    \    result[i] = lst[i]\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _,\
    \ v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst,\
    \ min)\n    lst = append(lst, max)\n    for i := len(lst) - 2; i >= 0; i-- {\n\
    \        lst = append(lst, lst[i])\n    }\n    return lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == min {\n            result[i] = max\n        } else if\
    \ lst[i] == max {\n            result[i] = min\n        } else {\n           \
    \ result[i] = lst[i]\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    return append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    return append([]int{min}, append([]int{max}, lst[0:len(lst)-1])...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] =\
    \ max\n        } else if lst[i] == max {\n            result[i] = min\n      \
    \  } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i],\
    \ lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        result[i] = lst[i]\n    }\n    for i := 0; i < len(lst); i++\
    \ {\n        if result[i] == min {\n            result[i], result[len(lst) - 1]\
    \ = result[len(lst) - 1], result[i]\n            result = result[0:len(lst) -\
    \ 1]\n            break\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n\
    \        if result[i] == max {\n            result[i], result[0] = result[0],\
    \ result[i]\n            result = result[1:]\n            break\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if result[i] == min {\n  \
    \          result[i], result[len(lst) - 1] = result[len(lst) - 1], result[i]\n\
    \            result = result[0:len(lst) - 1]\n            break\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if result[i] == max {\n  \
    \          result[i], result[0] = result[0], result[i]\n            result = result[1:]\n\
    \            break\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    return append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst[1:] {\n        if v < min {\n            min = v\n  \
    \      }\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n       \
    \ return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n\
    \    for i, v := range lst {\n        if v == min {\n            result[i] = max\n\
    \        } else if v == max {\n            result[i] = min\n        } else {\n\
    \            result[i] = v\n        }\n    }\n\n    return result\n}\n", "   \
    \ if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n \
    \       if lst[i] == min {\n            result[i] = max\n        } else if lst[i]\
    \ == max {\n            result[i] = min\n        } else {\n            result[i]\
    \ = lst[i]\n        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0\
    \ {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n\n    lst =\
    \ append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) -\
    \ 1; i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n\n    return\
    \ lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n\
    \    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            min = lst[i]\n        }\n        if lst[i] > max {\n        \
    \    max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst,\
    \ max)\n    for i := 2; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n\
    \            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return\
    \ lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max\
    \ := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    return append(lst[:0], min, max,\
    \ lst[1:]...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min\
    \ := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ result[i] = max\n        } else if lst[i] == max {\n            result[i] =\
    \ min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n  \
    \  return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n \
    \   min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n  \
    \      if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i]\
    \ > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n\
    \            result[i] = max\n        } else if lst[i] == max {\n            result[i]\
    \ = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\
    \    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    return append([]int{min, max}, lst...)\n}\n", " \
    \   if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    lst\
    \ = append(lst, min)\n    lst = append(lst, max)\n    for i := len(lst) - 2; i\
    \ >= 0; i-- {\n        lst = append(lst, lst[i])\n    }\n    return lst\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    result\
    \ := make([]int, len(lst))\n    for i, v := range lst {\n        if v == min {\n\
    \            result[i] = max\n        } else if v == max {\n            result[i]\
    \ = min\n        } else {\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n  \
    \          max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ result[i] = max\n        } else if lst[i] == max {\n            result[i] =\
    \ min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n  \
    \  return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n \
    \   min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n    }\n    return append([]int{min,\
    \ max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n    \
    \    if v < min {\n            min = v\n        }\n        if v > max {\n    \
    \        max = v\n        }\n    }\n\n    result := []int{min, max}\n    for _,\
    \ v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n        result = append(result,\
    \ v)\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            result[i] = max\n        } else if lst[i] == max {\n \
    \           result[i] = min\n        } else {\n            result[i] = lst[i]\n\
    \        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n      \
    \  return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst\
    \ = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i],\
    \ lst[i+1] = lst[i+1], lst[i]\n    }\n    return lst\n}\n", "    if len(lst) ==\
    \ 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == min {\n            result[i] = max\n        } else if\
    \ lst[i] == max {\n            result[i] = min\n        } else {\n           \
    \ result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _,\
    \ v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst,\
    \ min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n \
    \       lst[i] = lst[i] + lst[i+1]\n    }\n    for i := len(lst) - 2; i >= 0;\
    \ i -= 2 {\n        lst[i] = lst[i] + lst[i+1]\n    }\n    return lst\n}\n", " \
    \   if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n       \
    \ return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            result[i] = max\n        } else if lst[i] == max {\n \
    \           result[i] = min\n        } else {\n            result[i] = lst[i]\n\
    \        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n      \
    \  return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    return append([]int{min}, append([]int{max},\
    \ lst[1:]...)...)\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n\
    \    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n     \
    \   if v < min {\n            min = v\n        }\n        if v > max {\n     \
    \       max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n   \
    \ for i, v := range lst {\n        if v == min {\n            result[i] = max\n\
    \        } else if v == max {\n            result[i] = min\n        } else {\n\
    \            result[i] = v\n        }\n    }\n\n    return result\n}\n", "   \
    \ if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i]\
    \ = max\n        }\n        if lst[i] == max {\n            result[i] = min\n\
    \        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst\
    \ = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] <\
    \ lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n   \
    \ }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n      \
    \  if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] >\
    \ max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int,\
    \ len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n\
    \        if lst[i] == min {\n            for j := i; j >= 0; j-- {\n         \
    \       if lst[j] == max {\n                    break\n                }\n   \
    \             result[j] = lst[j]\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max\
    \ := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n \
    \           min = v\n        }\n        if v > max {\n            max = v\n  \
    \      }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ append([]int{min, max}, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n       \
    \ return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i <\
    \ len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n     \
    \   }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    return append([]int{min}, max, min, max, lst[1:len(lst)]...)\n}\n", "   \
    \ if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i]\
    \ = max\n        }\n        if lst[i] == max {\n            result[i] = min\n\
    \        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i]\
    \ = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n\
    \    }\n\n    for i := 0; i < len(lst); i++ {\n        if result[i] == max {\n\
    \            result[i] = min\n        }\n    }\n\n    return result\n}\n", " \
    \   if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n\n  \
    \  result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n    \
    \    result[i] = lst[i]\n        if result[i] == min {\n            result[i]\
    \ = max\n        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v\
    \ := range lst {\n        if v < min {\n            min = v\n        }\n     \
    \   if v > max {\n            max = v\n        }\n    }\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n\
    \        if lst[i] == min {\n            result[i] = max\n        }\n        if\
    \ lst[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i\
    \ := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i]\
    \ == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n\
    \            result[i] = min\n        }\n    }\n\n    return result\n}\n", " \
    \   if len(lst) == 0 {\n        return lst\n    }\n    \n    min := lst[0]\n \
    \   max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            min = lst[i]\n        }\n        if lst[i] > max {\n        \
    \    max = lst[i]\n        }\n    }\n    \n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i]\
    \ == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n\
    \            result[i] = min\n        }\n    }\n    \n    return result\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else\
    \ if lst[i] == max {\n            result[i] = min\n        } else {\n        \
    \    result[i] = lst[i]\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst {\n        if v < min {\n            min = v\n      \
    \  }\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ append([]int{min}, max, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n       \
    \ return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    lst\
    \ = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] >\
    \ lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n \
    \       }\n    }\n\n    return lst\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst =\
    \ append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            lst[i] = lst[i] + 1\n        }\n\
    \        if lst[i] > max {\n            lst[i] = lst[i] - 1\n        }\n    }\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            lst[i]\
    \ = lst[i] + 1\n        }\n        if lst[i] > max {\n            lst[i] = lst[i]\
    \ - 1\n        }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n     \
    \   return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return\
    \ append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n\n    result := []int{min, max}\n    for i := 2; i < len(lst);\
    \ i++ {\n        result = append(result, lst[i])\n    }\n\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    return append(lst[:0], min, max) + strange_sort_list(lst[1:])\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n\
    \    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            min = lst[i]\n        }\n        if lst[i] > max {\n        \
    \    max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i],\
    \ lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min\
    \ {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n\
    \    }\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == max {\n\
    \            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n         \
    \   i = len(lst) - 1\n        }\n    }\n    return lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst {\n        if v < min {\n            min = v\n      \
    \  }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst,\
    \ min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n    \
    \    if lst[i] > lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n\
    \        }\n    }\n    return lst\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i]\
    \ == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] == max {\n            result[i] = min\n\
    \        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n      \
    \  return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst\
    \ = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i],\
    \ lst[i+1] = lst[i+1], lst[i]\n    }\n    return lst\n}\n", "    if len(lst) ==\
    \ 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == min {\n            result[i] = max\n        } else if\
    \ lst[i] == max {\n            result[i] = min\n        } else {\n           \
    \ result[i] = lst[i]\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst {\n        if v < min {\n            min = v\n      \
    \  }\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ append([]int{min}, max, lst[1:]...)\n}\n", "    if len(lst) == 0 {\n       \
    \ return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i <\
    \ len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n     \
    \   }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n", "  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0],\
    \ lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n   \
    \         min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i :=\
    \ len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] ==\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] == max {\n   \
    \         max = lst[i]\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    return append(lst[:0], min, max, lst[1:]...)\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n\n    lst =\
    \ append(lst, min)\n    lst = append(lst, max)\n    for i := len(lst) - 2; i >=\
    \ 0; i-- {\n        if lst[i] > lst[i + 1] {\n            lst[i], lst[i + 1] =\
    \ lst[i + 1], lst[i]\n        }\n    }\n\n    return lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    return strange_sort_list_helper(lst, min, max)\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst[1:] {\n        if v < min {\n            min = v\n  \
    \      }\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ append([]int{min, max}, lst...)\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst\
    \ = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] <\
    \ lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n   \
    \ }\n    return lst\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
