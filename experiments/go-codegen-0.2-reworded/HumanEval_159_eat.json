{
  "name": "HumanEval_159_eat",
  "language": "go_test.go",
  "prompt": "package eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a list of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// []int{11, 4}\n// >>> eat(4, 8, 9)\n// []int{12, 1}\n// >>> eat(1, 10, 10)\n// []int{11, 0}\n// >>> eat(2, 11, 5)\n// []int{7, 0}\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunc eat(number int, need int, remaining int) []int {\n",
  "tests": "func TestEat(t *testing.T) {\n  candidate := eat\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 6, 10), expected: []int{11, 4} },\n     { actual: candidate(4, 8, 9), expected: []int{12, 1} },\n     { actual: candidate(1, 10, 10), expected: []int{11, 0} },\n     { actual: candidate(2, 11, 5), expected: []int{7, 0} },\n     { actual: candidate(4, 5, 7), expected: []int{9, 2} },\n     { actual: candidate(4, 5, 1), expected: []int{5, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "completions": [
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, 0}\n    }\n    return []int{number, need - number}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number == 0 {\n        return []int{0, 0}\n    }\n    if number < 0 || number > 1000 {\n        return []int{0, 0}\n    }\n    if need < 0 || need > 1000 {\n        return []int{0, 0}\n    }\n    if remaining < 0 || remaining > 1000 {\n        return []int{0, 0}\n    }\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining < need {\n        return []int{number, need - remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining >= need {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{need, 0}\n    }\n    if number > need {\n        return []int{need, number - need}\n    }\n    return []int{need, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{need, 0}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{need, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number == need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number == 0 {\n        return []int{need, remaining}\n    }\n    if number > 0 {\n        return []int{number, remaining - number}\n    }\n    return []int{need, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number == 0 {\n        return []int{0, 0}\n    }\n    if need == 0 {\n        return []int{number, 0}\n    }\n    if remaining == 0 {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    if number == need {\n        return []int{need, 0}\n    }\n    if number == remaining {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{remaining, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number == 0 {\n        return []int{0, 0}\n    }\n    if remaining == 0 {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number == remaining {\n        return []int{number, 0}\n    }\n    if need > remaining {\n        return []int{number, 0}\n    }\n    if need == remaining {\n        return []int{number, 0}\n    }\n    if need > number {\n        return []int{number, 0}\n    }\n    if need == number {\n        return []int{number, 0}\n    }\n    if need < number {\n        return []int{number, 0}\n    }\n    if need == 0 {\n        return []int{number, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number - remaining, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, remaining}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number >= remaining {\n        return []int{number, remaining}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining < need {\n        return []int{number, need}\n    }\n    return []int{number, need, remaining - need}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, 0}\n    }\n    return []int{number, need - number}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining < need {\n        return []int{number, need}\n    }\n    return []int{number, need, remaining - need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, remaining}\n    }\n    if number == 0 {\n        return []int{0, 0}\n    }\n    return []int{number, need}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if remaining < need {\n        return []int{number, need - remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    var result []int\n    if number >= need {\n        result = append(result, number - need)\n        result = append(result, remaining)\n    } else {\n        result = append(result, number)\n        result = append(result, remaining - number)\n    }\n    return result\n}\n",
    "    // Write your code here\n    var result []int\n    if number >= need {\n        result = append(result, number - need)\n        result = append(result, remaining)\n    } else {\n        result = append(result, number)\n        result = append(result, remaining - number)\n    }\n    return result\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number == need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code in Java SE 8\n    var result []int\n    if number < need {\n        result = append(result, number)\n    } else {\n        result = append(result, need)\n    }\n    if number < remaining {\n        result = append(result, remaining - number)\n    }\n    return result\n}\n",
    "    // write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number == 0 {\n        return []int{0, 0}\n    }\n    if number < 0 {\n        return []int{0, 0}\n    }\n    if need == 0 {\n        return []int{number, 0}\n    }\n    if need < 0 {\n        return []int{0, 0}\n    }\n    if remaining == 0 {\n        return []int{number, 0}\n    }\n    if remaining < 0 {\n        return []int{0, 0}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number >= remaining {\n        return []int{number, remaining}\n    }\n    if number == 0 {\n        return []int{0, 0}\n    }\n    return []int{number, need - number}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number >= remaining {\n        return []int{number, remaining}\n    }\n    if number + need > remaining {\n        return []int{number, remaining}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number == 0 {\n        return []int{0, 0}\n    }\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    if number == need {\n        return []int{need, need}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    return []int{number, remaining}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, remaining}\n    }\n    return []int{number, need}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining < need {\n        return []int{number, need}\n    }\n    return []int{number, need, remaining - need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    if number > 1000 || need > 1000 || remaining > 1000 {\n        return []int{0, 0}\n    }\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number >= need {\n        return []int{number - need, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining < need {\n        return []int{number, need}\n    }\n    return []int{number, need, remaining - need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    return []int{number, need - number}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, remaining}\n    }\n    if number == 0 {\n        return []int{0, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number - need, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, remaining - need}\n}\n",
    "    // write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number == 0 {\n        return []int{need, 0}\n    }\n    if number > 0 {\n        if number >= remaining {\n            return []int{number, 0}\n        }\n        if number > remaining {\n            return []int{number, remaining}\n        }\n        return []int{number, remaining - number}\n    }\n    if number < 0 {\n        if number < -remaining {\n            return []int{number, 0}\n        }\n        return []int{number, -remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number - remaining, 0}\n}\n",
    "    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{need, 0}\n    }\n    if number > need {\n        return []int{need, number - need}\n    }\n    return []int{0, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number >= remaining {\n        return []int{number, remaining}\n    }\n    if number == 0 {\n        return []int{0, 0}\n    }\n    return []int{number, need - number}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number >= remaining {\n        return []int{number, remaining}\n    }\n    if number == 0 {\n        return []int{0, 0}\n    }\n    return []int{number, need - number}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    var result []int\n    if number < need {\n        result = append(result, number)\n        result = append(result, need - number)\n    } else {\n        result = append(result, number)\n        result = append(result, 0)\n    }\n    return result\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, remaining}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number - remaining, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, remaining - number}\n    }\n    return []int{number + need, need - (number + need)}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    if number == need {\n        return []int{need, remaining}\n    }\n    return []int{number, remaining - number}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number - remaining, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if remaining < need {\n        return []int{number, remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, remaining}\n}\n",
    "    if number > 1000 || need > 1000 || remaining > 1000 {\n        return []int{0, 0}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number == 0 {\n        return []int{0, remaining}\n    }\n    if number == 1 {\n        return []int{1, remaining - 1}\n    }\n    if number == 2 {\n        return []int{2, remaining - 2}\n    }\n    if number == 3 {\n        return []int{3, remaining - 3}\n    }\n    if number == 4 {\n        return []int{4, remaining - 4}\n    }\n    if number == 5 {\n        return []int{5, remaining - 5}\n    }\n    if number == 6 {\n        return []int{6, remaining - 6}\n    }\n    if number == 7 {\n        return []int{7, remaining - 7}\n    }\n    if number == 8 {\n        return []int{8, remaining - 8}\n    }\n    if number == 9 {\n        return []int{9, remaining - 9}\n    }\n    if number == 10 {\n        return []int{10, remaining - 10}\n    }\n    if number == 11 {\n        return []int{11, remaining - 11}\n    }\n    if number == 12 {\n        return []int{12, remaining - 12}\n    }\n    if number == 13 {\n        return []int{13, remaining - 13}\n    }\n    if number == 14 {\n        return []int{14, remaining - 14}\n    }\n    if number == 15 {\n        return []int{15, remaining - 15}\n    }\n    if number == 16 {\n        return []int{16, remaining - 16}\n    }\n    if number == 17 {\n        return []int{17, remaining - 17}\n    }\n    if number == 18 {\n        return []int{18, remaining - 18}\n    }\n    if number == 19 {\n        return []int{19, remaining - 19}\n    }\n    if number == 20 {",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    if number > 1000 || need > 1000 || remaining > 1000 {\n        return []int{0, 0}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number == 0 {\n        return []int{0, remaining}\n    }\n    if need == 0 {\n        return []int{number, 0}\n    }\n    if remaining == 0 {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number >",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, remaining}\n}\n",
    "    // write your code here\n    var result []int\n    if number < need {\n        result = append(result, number)\n        result = append(result, need - number)\n    } else {\n        result = append(result, number)\n        result = append(result, 0)\n    }\n    return result\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number >= remaining {\n        return []int{number, remaining}\n    }\n    if number < 0 {\n        return []int{0, 0}\n    }\n    if need < 0 {\n        return []int{0, 0}\n    }\n    if remaining < 0 {\n        return []int{0, 0}\n    }\n    return []int{number + need, remaining - need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    if number == need {\n        return []int{need, remaining}\n    }\n    return []int{number, remaining}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, remaining - need}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number == need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    var result []int\n    if number < need {\n        result = append(result, number)\n        result = append(result, need - number)\n    } else {\n        result = append(result, number)\n        result = append(result, 0)\n    }\n    return result\n}\n",
    "    if number > 1000 || need > 1000 || remaining > 1000 {\n        return []int{0, 0}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number == 0 {\n        return []int{0, remaining}\n    }\n    if need == 0 {\n        return []int{number, 0}\n    }\n    if remaining == 0 {\n        return []int{number, 0}\n    }\n    if number == 1 {\n        return []int{number, remaining}\n    }\n    if need == 1 {\n        return []int{number, remaining}\n    }\n    if number == 2 {\n        return []int{number, remaining}\n    }\n    if need == 2 {\n        return []int{number, remaining}\n    }\n    if number == 3 {\n        return []int{number, remaining}\n    }\n    if need == 3 {\n        return []int{number, remaining}\n    }\n    if number == 4 {\n        return []int{number, remaining}\n    }\n    if need == 4 {\n        return []int{number, remaining}\n    }\n    if number == 5 {\n        return []int{number, remaining}\n    }\n    if need == 5 {\n        return []int{number, remaining}\n    }\n    if number == 6 {\n        return []int{number, remaining}\n    }\n    if need == 6 {\n        return []int{number, remaining}\n    }\n    if number == 7 {\n        return []int{number, remaining}\n    }\n    if need == 7 {\n        return []int{number, remaining}\n    }\n    if number == 8 {\n        return []int{number, remaining}\n    }\n    if need == 8 {\n        return []int{number, remaining}\n    }\n    if number == 9 {\n        return []int{number, remaining}\n    }\n    if need == 9 {\n        return []int{number, remaining}\n    }\n    if number == 10 {\n        return []int{number, remaining}\n    }\n    if need ==",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining < need {\n        return []int{number, need - remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // write your code in Java SE 8\n    return nil\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, 0}\n    }\n    return []int{number, need - number}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining < need {\n        return []int{number, need - remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, remaining}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, remaining}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if remaining < need {\n        return []int{number, remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, remaining}\n    }\n    if number > remaining {\n        return []int{number - remaining, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, remaining - number}\n    }\n    return []int{number + need, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    if number == need {\n        return []int{need, need}\n    }\n    if number == remaining {\n        return []int{number, 0}\n    }\n    if number > remaining {\n        return []int{number, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if remaining < need {\n        return []int{number, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, 0}\n    }\n    return []int{number, need - number}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    // write your code here\n    if number == 0 {\n        return []int{0, remaining}\n    }\n    if need == 0 {\n        return []int{number, 0}\n    }\n    if remaining == 0 {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining < need {\n        return []int{number, need}\n    }\n    return []int{number, need, remaining - need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number == 0 {\n        return []int{0, remaining}\n    }\n    if number > 0 {\n        return []int{number, need - number}\n    }\n    return []int{0, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number - remaining, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if remaining < need {\n        return []int{number, need - remaining}\n    }\n    return []int{number, need}\n}\n",
    "    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    var result []int\n    if number >= need {\n        result = []int{number, 0}\n    } else {\n        result = []int{number, need - number}\n    }\n    return result\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number - remaining, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining < need {\n        return []int{number, need - remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, 0}\n    }\n    return []int{number + need, remaining - number}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, 0}\n    }\n    if number == remaining - 1 {\n        return []int{number, 1}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number > need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, need}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if remaining < need {\n        return []int{number, need - remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, remaining - need}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, remaining}\n}\n",
    "    // Write your code here\n    if number == 0 {\n        return []int{0, 0}\n    }\n    if need == 0 {\n        return []int{number, 0}\n    }\n    if remaining == 0 {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    if number == need {\n        return []int{need, 0}\n    }\n    if number > remaining {\n        return []int{number, 0}\n    }\n    if number < remaining {\n        return []int{number, remaining - number}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    if number == need {\n        return []int{need, need}\n    }\n    if remaining < need {\n        return []int{number, remaining}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n    return []int{number, need}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    if number == need {\n        return []int{need, need}\n    }\n    if number == remaining {\n        return []int{need, remaining}\n    }\n    return []int{need, need}\n}\n",
    "    // Write your code here\n    if number == 0 {\n        return []int{0, remaining}\n    }\n    if need > remaining {\n        return []int{number, 0}\n    }\n    if need == remaining {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, remaining - need}\n    }\n    return []int{number, remaining - need}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number > need {\n        return []int{number - need, remaining}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number + need > remaining {\n        return []int{number + need, remaining - number}\n    }\n    return []int{number + need, need - (number + need)}\n}\n",
    "    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    if number == need {\n        return []int{number, need}\n    }\n    if number == remaining {\n        return []int{number, 0}\n    }\n    return []int{number, need - number}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number >= remaining {\n        return []int{number, remaining}\n    }\n    return []int{number, need - number}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{need, 0}\n    }\n    if number == need {\n        return []int{need, need}\n    }\n    if number == 0 {\n        return []int{0, remaining}\n    }\n    return []int{number, remaining - number}\n}\n",
    "    // Write your code here\n    if number < need {\n        return []int{number, 0}\n    }\n    if number == need {\n        return []int{number, remaining}\n    }\n    if number > need {\n        return []int{number - need, 0}\n    }\n    return []int{number, 0}\n}\n",
    "    // Write your code here\n    if number >= need {\n        return []int{number, 0}\n    }\n    if number < need {\n        return []int{number, need - number}\n    }\n    if number == need {\n        return []int{number, 0}\n    }\n    if number > need {\n        return []int{number, need}\n    }\n}\n"
  ],
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ]
}