{
  "name": "HumanEval_149_sorted_list_sum",
  "language": "go_test.go",
  "prompt": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n",
  "tests": "func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp0f69336p_test.go:63: expected '[AI asdf school]', got '[school asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp0f69336p_test.go:63: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpy90orx_j_test.go:66: expected '[aa]', got '[a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpy90orx_j_test.go:66: expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpy90orx_j_test.go:66: expected '[]', got '[d b c a b c a b b a c b a a a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpy90orx_j_test.go:66: expected '[abcd dcba]', got '[d a a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpy90orx_j_test.go:66: expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpy90orx_j_test.go:66: expected '[]', got '[a b b c c a a a a a a b b a a b b a a b b a a b b a a a a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpy90orx_j_test.go:66: expected '[cc dd aaaa bbbb]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                lst.Remove(w)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8xgctyl_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) < len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[]', got '[d c b a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[abcd dcba]', got '[dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[]', got '[c c b b a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[cc dd aaaa bbbb]', got '[bbbb aaaa dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if len(s) == len(t) && s == t {\n                result = append(result, t)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpubasnnv6_test.go:59: expected '[aa]', got '[aa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpubasnnv6_test.go:59: expected '[AI asdf school]', got '[school AI asdf school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpubasnnv6_test.go:59: expected '[abcd dcba]', got '[dcba abcd dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpubasnnv6_test.go:59: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpubasnnv6_test.go:59: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                continue\n            }\n            if len(s) == len(t) {\n                if s < t {\n                    result = append(result, s)\n                } else {\n                    result = append(result, t)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 != 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp39_w_dfu_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp39_w_dfu_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp39_w_dfu_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp39_w_dfu_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp39_w_dfu_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else if len(v) > len(w) {\n                result = append(result, v)\n            } else {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[aa]', got '[aa aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI asdf school]', got '[school AI asdf school school school school asdf AI school asdf asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[abcd dcba]', got '[dcba abcd dcba abcd dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa aaaa aaaa bbbb bbbb aaaa bbbb cc aaaa bbbb cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[aa]', got '[a aaa aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[AI asdf school]', got '[b school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[abcd dcba]', got '[d a dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, r := range lst {\n            if len(s) == len(r) && s < r {\n                result = append(result, r)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp4eb76n85_test.go:59: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp4eb76n85_test.go:59: expected '[abcd dcba]', got '[dcba abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp4eb76n85_test.go:59: expected '[AI ai au]', got '[AI ai au ai au au]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp4eb76n85_test.go:59: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc bbbb dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                lst.Remove(w)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8xgctyl_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) < len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[]', got '[d c b a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[abcd dcba]', got '[dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[]', got '[c c b b a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp7jc74arn_test.go:70: expected '[cc dd aaaa bbbb]', got '[bbbb aaaa dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpk3wmb6vo_test.go:73: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpk3wmb6vo_test.go:73: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpk3wmb6vo_test.go:73: expected '[]', got '[d c b a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk3wmb6vo_test.go:73: expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpk3wmb6vo_test.go:73: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpk3wmb6vo_test.go:73: expected '[]', got '[c c b b a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpk3wmb6vo_test.go:73: expected '[cc dd aaaa bbbb]', got '[dd cc bbbb aaaa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 1 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                lst.Remove(t)\n                break\n            }\n        }\n    }\n    for _, s := range lst {\n        for _, t := range result {\n            if s == t {\n                result = append(result, s)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkntm8j9i_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 1 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxz41smxf_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxz41smxf_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxz41smxf_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxz41smxf_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxz41smxf_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxz41smxf_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 != 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                continue\n            }\n            if len(s) == len(t) {\n                if s < t {\n                    result = append(result, s)\n                } else {\n                    result = append(result, t)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 != 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, v2 := range lst {\n            if v == v2 {\n                lst.Remove(v2)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoivl3bds_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                lst.Remove(w)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8xgctyl_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, v2 := range lst {\n            if v == v2 {\n                lst.Remove(v2)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoivl3bds_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if result[i] + result[j] > result[j] + result[i] {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnmsiepg9_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpnmsiepg9_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    \n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    \n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    \n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp95csgvvp_test.go:76: expected '[aa]', got '[a aaa aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp95csgvvp_test.go:76: expected '[AI asdf school]', got '[b school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp95csgvvp_test.go:76: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp95csgvvp_test.go:76: expected '[abcd dcba]', got '[d a dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp95csgvvp_test.go:76: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp95csgvvp_test.go:76: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp95csgvvp_test.go:76: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[aa]', got '[a aaa aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[AI asdf school]', got '[b school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[abcd dcba]', got '[d a dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else if len(v) > len(w) {\n                result = append(result, v)\n            } else {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[aa]', got '[aa aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI asdf school]', got '[school AI asdf school school school school asdf AI school asdf asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[abcd dcba]', got '[dcba abcd dcba abcd dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa aaaa aaaa bbbb bbbb aaaa bbbb cc aaaa bbbb cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else if len(v) > len(w) {\n                result = append(result, v)\n            } else {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[aa]', got '[aa aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI asdf school]', got '[school AI asdf school school school school asdf AI school asdf asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[abcd dcba]', got '[dcba abcd dcba abcd dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa aaaa aaaa bbbb bbbb aaaa bbbb cc aaaa bbbb cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                continue\n            }\n            if len(s) == len(t) {\n                if s < t {\n                    result = append(result, s)\n                } else {\n                    result = append(result, t)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpttdgyzig_test.go:59: expected '[aa]', got '[aa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpttdgyzig_test.go:59: expected '[AI asdf school]', got '[school AI asdf school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpttdgyzig_test.go:59: expected '[abcd dcba]', got '[dcba abcd dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpttdgyzig_test.go:59: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpttdgyzig_test.go:59: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 1 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 == 1 {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpwswhjms__test.go:62: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwswhjms__test.go:62: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpwswhjms__test.go:62: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwswhjms__test.go:62: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpwswhjms__test.go:62: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwswhjms__test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 1 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0_fhtthv_test.go:35:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[AI asdf school]', got '[school asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[cc dd aaaa bbbb]', got '[bbbb aaaa dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                lst.Remove(w)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8xgctyl_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 != 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxd5bwkge_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[AI asdf school]', got '[school asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[cc dd aaaa bbbb]', got '[bbbb aaaa dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 != 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else if len(v) < len(w) {\n                result = append(result, v)\n            } else {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp1mw2vvmi_test.go:70: expected '[aa]', got '[aa a aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp1mw2vvmi_test.go:70: expected '[AI asdf school]', got '[school AI asdf AI asdf b AI AI b asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp1mw2vvmi_test.go:70: expected '[abcd dcba]', got '[dcba abcd d abcd a d abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp1mw2vvmi_test.go:70: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp1mw2vvmi_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa dd cc aaaa dd cc dd dd cc cc cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp2pxb29qw_test.go:63: expected '[AI asdf school]', got '[school asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp2pxb29qw_test.go:63: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[aa]', got '[a aaa aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[AI asdf school]', got '[b school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[abcd dcba]', got '[d a dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpyv5ybf61_test.go:67: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else if len(v) > len(w) {\n                result = append(result, v)\n            } else {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[aa]', got '[aa aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI asdf school]', got '[school AI asdf school school school school asdf AI school asdf asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[abcd dcba]', got '[dcba abcd dcba abcd dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa aaaa aaaa bbbb bbbb aaaa bbbb cc aaaa bbbb cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmlm6_y0p_test.go:90:6: expected '(', found TestSorted_List_Sum\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    \n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    \n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpvz54vvqf_test.go:70: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpvz54vvqf_test.go:70: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpvz54vvqf_test.go:70: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpvz54vvqf_test.go:70: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpvz54vvqf_test.go:70: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpvz54vvqf_test.go:70: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpvz54vvqf_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpi4nbmrf8_test.go:74:6: expected '(', found TestSorted_List_Sum\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                continue\n            }\n            if len(s) == len(t) {\n                if s < t {\n                    result = append(result, s)\n                } else {\n                    result = append(result, t)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, v2 := range lst {\n            if v == v2 {\n                lst.Remove(v2)\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpopad6hzh_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[aa]', got '[aa a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[AI asdf school]', got '[school AI asdf b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) && v < w {\n                lst[0], lst[1] = w, v\n                break\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[aa]', got '[aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[abcd dcba]', got '[dcba abcd abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[AI ai au]', got '[au ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[cc dd aaaa bbbb]', got '[dd cc dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                lst.Remove(w)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        for _, w := range result {\n            if v == w {\n                result = append(result, v)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvkvxlez6_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpt132db8j_test.go:63: expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpt132db8j_test.go:63: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpt132db8j_test.go:63: expected '[cc dd aaaa bbbb]', got '[dd cc bbbb aaaa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst); j++ {\n            if len(lst[i]) == len(lst[j]) {\n                if lst[i] > lst[j] {\n                    result = append(result, lst[i])\n                    break\n                } else {\n                    result = append(result, lst[j])\n                    break\n                }\n            }\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpl2dpova8_test.go:78: expected '[aa]', got '[aa a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpl2dpova8_test.go:78: expected '[AI asdf school]', got '[school AI asdf b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpl2dpova8_test.go:78: expected '[]', got '[d b c a d d d d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpl2dpova8_test.go:78: expected '[abcd dcba]', got '[dcba abcd d a d dcba dcba d]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpl2dpova8_test.go:78: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpl2dpova8_test.go:78: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpl2dpova8_test.go:78: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 != 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) < len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpfwt2977c_test.go:70: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpfwt2977c_test.go:70: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpfwt2977c_test.go:70: expected '[]', got '[d c b a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpfwt2977c_test.go:70: expected '[abcd dcba]', got '[dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpfwt2977c_test.go:70: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpfwt2977c_test.go:70: expected '[]', got '[c c b b a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpfwt2977c_test.go:70: expected '[cc dd aaaa bbbb]', got '[bbbb aaaa dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 != 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else {\n                if len(v) < len(w) {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpqv4adnl8_test.go:72: expected '[aa]', got '[a aaa a a aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpqv4adnl8_test.go:72: expected '[AI asdf school]', got '[b b b b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpqv4adnl8_test.go:72: expected '[]', got '[d b c a b c a b b a c b a a a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpqv4adnl8_test.go:72: expected '[abcd dcba]', got '[d a d d a a a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpqv4adnl8_test.go:72: expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpqv4adnl8_test.go:72: expected '[]', got '[a b b c c a a a a a a b b a a b b a a b b a a b b a a a a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpqv4adnl8_test.go:72: expected '[cc dd aaaa bbbb]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpt132db8j_test.go:63: expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpt132db8j_test.go:63: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpt132db8j_test.go:63: expected '[cc dd aaaa bbbb]', got '[dd cc bbbb aaaa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    \n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    \n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374764,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpjayohls5_test.go:70: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpjayohls5_test.go:70: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpjayohls5_test.go:70: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpjayohls5_test.go:70: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpjayohls5_test.go:70: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpjayohls5_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                lst.Remove(w)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8xgctyl_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, r := range lst {\n            if s == r {\n                lst.Remove(r)\n                break\n            }\n        }\n    }\n    for _, s := range lst {\n        result = append(result, s)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ogzzx4s_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpsdljczkg_test.go:64: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpsdljczkg_test.go:64: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpsdljczkg_test.go:64: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpsdljczkg_test.go:64: expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpsdljczkg_test.go:64: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpsdljczkg_test.go:64: expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                continue\n            }\n            if len(s) == len(t) {\n                if s < t {\n                    result = append(result, s)\n                } else {\n                    result = append(result, t)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] == v[i+1] {\n                v[i] = v[i] + v[i+1]\n                v = v[:i] + v[i+1:]\n                i--\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4hg28u2a_test.go:33:22: cannot assign to v[i] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                lst.Remove(w)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8xgctyl_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for i := 0; i < len(s); i++ {\n            if s[i] > s[i+1] {\n                s[i], s[i+1] = s[i+1], s[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphds844kn_test.go:33:30: cannot assign to s[i] (strings are immutable)\n/tmp/tmphds844kn_test.go:33:30: cannot assign to s[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 1 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp8_5tss_n_test.go:63: expected '[aa]', got '[a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8_5tss_n_test.go:63: expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp8_5tss_n_test.go:63: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8_5tss_n_test.go:63: expected '[abcd dcba]', got '[a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp8_5tss_n_test.go:63: expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp8_5tss_n_test.go:63: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8_5tss_n_test.go:63: expected '[cc dd aaaa bbbb]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp2pxb29qw_test.go:63: expected '[AI asdf school]', got '[school asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp2pxb29qw_test.go:63: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 != 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp3u1c4mw5_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzco6ve4b_test.go:63: expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzco6ve4b_test.go:63: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzco6ve4b_test.go:63: expected '[cc dd aaaa bbbb]', got '[dd cc bbbb aaaa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, v2 := range lst {\n            if v == v2 {\n                lst.Remove(v2)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoivl3bds_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 1 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) < len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp4oac4vtt_test.go:70: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp4oac4vtt_test.go:70: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp4oac4vtt_test.go:70: expected '[]', got '[d c b a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp4oac4vtt_test.go:70: expected '[abcd dcba]', got '[dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp4oac4vtt_test.go:70: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp4oac4vtt_test.go:70: expected '[]', got '[c c b b a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp4oac4vtt_test.go:70: expected '[cc dd aaaa bbbb]', got '[bbbb aaaa dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for i := 0; i < len(s); i++ {\n            if s[i] > s[i+1] {\n                s[i], s[i+1] = s[i+1], s[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphds844kn_test.go:33:30: cannot assign to s[i] (strings are immutable)\n/tmp/tmphds844kn_test.go:33:30: cannot assign to s[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else if len(v) < len(w) {\n                result = append(result, v)\n            } else {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp1mw2vvmi_test.go:70: expected '[aa]', got '[aa a aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp1mw2vvmi_test.go:70: expected '[AI asdf school]', got '[school AI asdf AI asdf b AI AI b asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp1mw2vvmi_test.go:70: expected '[abcd dcba]', got '[dcba abcd d abcd a d abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp1mw2vvmi_test.go:70: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp1mw2vvmi_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa dd cc aaaa dd cc dd dd cc cc cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else {\n                if len(v) < len(w) {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpjn4albpv_test.go:72: expected '[aa]', got '[aa a aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpjn4albpv_test.go:72: expected '[AI asdf school]', got '[school AI asdf AI asdf b AI AI b asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpjn4albpv_test.go:72: expected '[abcd dcba]', got '[dcba abcd d abcd a d abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpjn4albpv_test.go:72: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpjn4albpv_test.go:72: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa dd cc aaaa dd cc dd dd cc cc cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 1 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 1 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpay2vdhma_test.go:76: expected '[aa]', got '[a aaa aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpay2vdhma_test.go:76: expected '[AI asdf school]', got '[b school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpay2vdhma_test.go:76: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpay2vdhma_test.go:76: expected '[abcd dcba]', got '[d a dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpay2vdhma_test.go:76: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpay2vdhma_test.go:76: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpay2vdhma_test.go:76: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[aa]', got '[aa a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[AI asdf school]', got '[school AI asdf b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmlm6_y0p_test.go:90:6: expected '(', found TestSorted_List_Sum\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph3j6zd2x_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmph3j6zd2x_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                lst.Remove(t)\n                break\n            }\n        }\n    }\n    for _, s := range lst {\n        result = append(result, s)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5jupsrcu_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp39_w_dfu_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp39_w_dfu_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp39_w_dfu_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp39_w_dfu_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp39_w_dfu_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, v2 := range lst {\n            if v == v2 {\n                lst.Remove(v2)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoivl3bds_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                continue\n            }\n            if len(s) == len(t) {\n                if s < t {\n                    result = append(result, s)\n                } else {\n                    result = append(result, t)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0;\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpa6ltmj72_test.go:85:6: expected '(', found TestSorted_List_Sum\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[AI asdf school]', got '[school asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[cc dd aaaa bbbb]', got '[bbbb aaaa dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[]', got '[d c b a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[abcd dcba]', got '[dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[]', got '[c c b b a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[cc dd aaaa bbbb]', got '[bbbb aaaa dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[]', got '[d c b a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[abcd dcba]', got '[dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[]', got '[c c b b a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmptvfdnl02_test.go:68: expected '[cc dd aaaa bbbb]', got '[bbbb aaaa dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 1 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 == 1 {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpwswhjms__test.go:62: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwswhjms__test.go:62: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpwswhjms__test.go:62: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwswhjms__test.go:62: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpwswhjms__test.go:62: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwswhjms__test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpttdgyzig_test.go:59: expected '[aa]', got '[aa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpttdgyzig_test.go:59: expected '[AI asdf school]', got '[school AI asdf school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpttdgyzig_test.go:59: expected '[abcd dcba]', got '[dcba abcd dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpttdgyzig_test.go:59: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpttdgyzig_test.go:59: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[aa]', got '[aa a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[AI asdf school]', got '[school AI asdf b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbwsjv7tc_test.go:76: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, v2 := range lst {\n            if v == v2 {\n                lst.Remove(v2)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoivl3bds_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                lst.Remove(t)\n                break\n            }\n        }\n    }\n    for _, s := range lst {\n        for _, t := range result {\n            if s == t {\n                result.Remove(t)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp04b37ded_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n/tmp/tmp04b37ded_test.go:41:23: result.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, v2 := range lst {\n            if v == v2 {\n                lst.Remove(v2)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoivl3bds_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 1 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 1 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 1 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 1 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 1 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0;\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxzhrbmbr_test.go:85:6: expected '(', found TestSorted_List_Sum\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, r := range lst {\n            if s == r {\n                lst.Remove(r)\n                break\n            }\n        }\n    }\n    for _, s := range lst {\n        result = append(result, s)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ogzzx4s_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp0f69336p_test.go:63: expected '[AI asdf school]', got '[school asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp0f69336p_test.go:63: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else {\n                if len(v) < len(w) {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpjn4albpv_test.go:72: expected '[aa]', got '[aa a aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpjn4albpv_test.go:72: expected '[AI asdf school]', got '[school AI asdf AI asdf b AI AI b asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpjn4albpv_test.go:72: expected '[abcd dcba]', got '[dcba abcd d abcd a d abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpjn4albpv_test.go:72: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpjn4albpv_test.go:72: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa dd cc aaaa dd cc dd dd cc cc cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpx4yy2fng_test.go:65: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpx4yy2fng_test.go:65: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpx4yy2fng_test.go:65: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpx4yy2fng_test.go:65: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpx4yy2fng_test.go:65: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpx4yy2fng_test.go:65: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else if len(v) > len(w) {\n                result = append(result, v)\n            } else {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[aa]', got '[aa aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI asdf school]', got '[school AI asdf school school school school asdf AI school asdf asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[abcd dcba]', got '[dcba abcd dcba abcd dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa aaaa aaaa bbbb bbbb aaaa bbbb cc aaaa bbbb cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpnruqesw7_test.go:70: expected '[aa]', got '[a aaa aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpnruqesw7_test.go:70: expected '[AI asdf school]', got '[b school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpnruqesw7_test.go:70: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpnruqesw7_test.go:70: expected '[abcd dcba]', got '[d a dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpnruqesw7_test.go:70: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpnruqesw7_test.go:70: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpnruqesw7_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp778edqvm_test.go:63: expected '[aa]', got '[aaa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp778edqvm_test.go:63: expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp778edqvm_test.go:63: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp778edqvm_test.go:63: expected '[abcd dcba]', got '[a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp778edqvm_test.go:63: expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp778edqvm_test.go:63: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp778edqvm_test.go:63: expected '[cc dd aaaa bbbb]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v) - 1; i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7gwldriu_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmp7gwldriu_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                lst.Remove(w)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8xgctyl_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, v2 := range lst {\n            if v == v2 {\n                lst.Remove(v2)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoivl3bds_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpybf58wk4_test.go:64: expected '[aa]', got '[aa a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpybf58wk4_test.go:64: expected '[AI asdf school]', got '[school AI asdf b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpybf58wk4_test.go:64: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpybf58wk4_test.go:64: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpybf58wk4_test.go:64: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpybf58wk4_test.go:64: expected '[]', got '[a b b c c a a a b b b b c c c c a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpybf58wk4_test.go:64: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else if len(v) > len(w) {\n                result = append(result, v)\n            } else {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[aa]', got '[aa aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI asdf school]', got '[school AI asdf school school school school asdf AI school asdf asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[abcd dcba]', got '[dcba abcd dcba abcd dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa aaaa aaaa bbbb bbbb aaaa bbbb cc aaaa bbbb cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[AI asdf school]', got '[school asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpvczsjgvv_test.go:63: expected '[cc dd aaaa bbbb]', got '[bbbb aaaa dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] > v[i+1] {\n                v[i], v[i+1] = v[i+1], v[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i] (strings are immutable)\n/tmp/tmpkhgave7b_test.go:33:30: cannot assign to v[i + 1] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[aa]', got '[a aaa aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[AI asdf school]', got '[b school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[abcd dcba]', got '[d a dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[]', got '[a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxydyuo3r_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            } else if len(v) > len(w) {\n                result = append(result, v)\n            } else {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[aa]', got '[aa aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI asdf school]', got '[school AI asdf school school school school asdf AI school asdf asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[abcd dcba]', got '[dcba abcd dcba abcd dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv4odns_7_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa aaaa aaaa bbbb bbbb aaaa bbbb cc aaaa bbbb cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0;\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpa6ltmj72_test.go:85:6: expected '(', found TestSorted_List_Sum\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                lst.Remove(w)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8xgctyl_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpcn0w6m8d_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[]', got '[d c b a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[]', got '[c c b b a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[cc dd aaaa bbbb]', got '[dd cc bbbb aaaa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] < result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[]', got '[d c b a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[AI ai au]', got '[au ai AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[]', got '[c c b b a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp6lsw502q_test.go:68: expected '[cc dd aaaa bbbb]', got '[dd cc bbbb aaaa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpu3lnc6l4_test.go:70: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range lst {\n        if len(s) % 2 != 0 {\n            result = append(result, s)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmplnxadfdi_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for i := 0; i < len(v); i++ {\n            if v[i] >= 'a' && v[i] <= 'z' {\n                v[i] = v[i] - 32\n            }\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if result[i] + result[j] == result[j] + result[i] {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa771nosy_test.go:33:22: cannot assign to v[i] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result []string\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp97jqywe2_test.go:65: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                continue\n            }\n            if len(s) == len(t) {\n                if s < t {\n                    result = append(result, s)\n                } else {\n                    result = append(result, t)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    for _, s := range result {\n        for _, t := range lst {\n            if s == t {\n                continue\n            }\n            if len(s) == len(t) {\n                if s < t {\n                    result = append(result, s)\n                } else {\n                    result = append(result, t)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpuw5yn5w1_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if len(v) == len(w) && v == w {\n                lst.Remove(w)\n                break\n            }\n        }\n    }\n    for _, v := range lst {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8xgctyl_test.go:33:20: lst.Remove undefined (type []string has no field or method Remove)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else {\n                if len(result[i]) > len(result[j]) {\n                    result[i], result[j] = result[j], result[i]\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp5gpgxh14_test.go:70: expected '[]', got '[a a b b c c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) {\n                if v < w {\n                    result = append(result, v)\n                } else {\n                    result = append(result, w)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[abcd dcba]', got '[dcba abcd abcd abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[AI ai au]', got '[AI ai au AI AI AI ai AI ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpb_gq4ks9_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa aaaa cc cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[AI asdf school]', got '[school asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[abcd dcba]', got '[abcd dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp6aosb9s7_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range result {\n        for _, w := range lst {\n            if v == w {\n                continue\n            }\n            if len(v) == len(w) && v < w {\n                lst[0], lst[1] = w, v\n                break\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[aa]', got '[aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[abcd dcba]', got '[dcba abcd abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[AI ai au]', got '[au ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpwx3n7cri_test.go:63: expected '[cc dd aaaa bbbb]', got '[dd cc dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[aa]', got '[aa a aaa aa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI asdf school]', got '[school AI asdf b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[abcd dcba]', got '[dcba abcd d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[AI ai au]', got '[AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpzhqas4pn_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) == len(result[j]) {\n                if result[i] > result[j] {\n                    result[i], result[j] = result[j], result[i]\n                }\n            } else if len(result[i]) < len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp2pxb29qw_test.go:63: expected '[AI asdf school]', got '[school asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp2pxb29qw_test.go:63: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var result []string\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i]) > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmplbamts64_test.go:64: expected '[aa]', got '[a aa aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmplbamts64_test.go:64: expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmplbamts64_test.go:64: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmplbamts64_test.go:64: expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmplbamts64_test.go:64: expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmplbamts64_test.go:64: expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}