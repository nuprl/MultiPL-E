{
  "name": "HumanEval_89_encrypt",
  "language": "go_test.go",
  "prompt": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n",
  "tests": "func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // write your code here\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmp41xer8bb_test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return string([]byte(s)[2:])\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: slice bounds out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmp58opo7u4_test.go:22\ncommand-line-arguments_test.TestEncrypt(0xc000001380)\n\t/tmp/tmp58opo7u4_test.go:39 +0x8bd\ntesting.tRunner(0xc000001380, 0x54f288)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code here\n    return \"\"\n}\n\n// Create a function decrypt that takes a string as an argument and\n// returns a string decrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift up by two multiplied to two places.\n// For example:\n// >>> decrypt(\"lm\")\n// \"hi\"\n// >>> decrypt(\"ewhjklnop\")\n// \"asdfghjkl\"\n// >>> decrypt(\"kj\")\n// \"gf\"\n// >>> decrypt(\"ix\")\n// \"et\"\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpiorhq59w_test.go:59: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpiorhq59w_test.go:59: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpiorhq59w_test.go:59: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpiorhq59w_test.go:59: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpiorhq59w_test.go:59: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpiorhq59w_test.go:59: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpiorhq59w_test.go:59: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpiorhq59w_test.go:59: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return string([]byte(s)[2:])\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: slice bounds out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmp58opo7u4_test.go:22\ncommand-line-arguments_test.TestEncrypt(0xc000001380)\n\t/tmp/tmp58opo7u4_test.go:39 +0x8bd\ntesting.tRunner(0xc000001380, 0x54f288)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // write your code here\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmp1fk59pb__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return string(s[2:]) + string(s[0:2])\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: slice bounds out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmpmugh7k4y_test.go:22\ncommand-line-arguments_test.TestEncrypt(0xc000001380)\n\t/tmp/tmpmugh7k4y_test.go:39 +0x1a5\ntesting.tRunner(0xc000001380, 0x54df50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return string([]byte(s)[2:])\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: slice bounds out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmp58opo7u4_test.go:22\ncommand-line-arguments_test.TestEncrypt(0xc000001380)\n\t/tmp/tmp58opo7u4_test.go:39 +0x8bd\ntesting.tRunner(0xc000001380, 0x54f288)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return string([]byte(s)[2:])\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: slice bounds out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmp58opo7u4_test.go:22\ncommand-line-arguments_test.TestEncrypt(0xc000001380)\n\t/tmp/tmp58opo7u4_test.go:39 +0x8bd\ntesting.tRunner(0xc000001380, 0x54f288)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpva5bsful_test.go:45: expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpva5bsful_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpva5bsful_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpva5bsful_test.go:45: expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpva5bsful_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpva5bsful_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpajggj14__test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpajggj14__test.go:46: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpajggj14__test.go:46: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpajggj14__test.go:46: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpajggj14__test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpajggj14__test.go:46: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpajggj14__test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpajggj14__test.go:46: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ewhjklnop', got ''\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'lippsqcjvmirh', got ''\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpq5g593wt_test.go:45: expected 'e', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}