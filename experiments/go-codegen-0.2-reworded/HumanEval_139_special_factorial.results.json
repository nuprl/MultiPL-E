{
  "name": "HumanEval_139_special_factorial",
  "language": "go_test.go",
  "prompt": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n",
  "tests": "func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\n// The function should return the special factorial of the input\n// integer.\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpixrm4eke_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpixrm4eke_test.go:42: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpixrm4eke_test.go:42: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpvmcri9hz_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpvmcri9hz_test.go:44: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpvmcri9hz_test.go:44: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n < 1 {\n        return 1\n    }\n    \n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    \n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmptud16fjo_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmptud16fjo_test.go:45: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmptud16fjo_test.go:45: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n < 0 {\n        return 0\n    }\n    \n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    \n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpgw5b2utm_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgw5b2utm_test.go:45: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpgw5b2utm_test.go:45: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n-1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp6fb18720_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6fb18720_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp6fb18720_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else {\n        return n * special_factorial(n-1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp6lyrrv7k_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6lyrrv7k_test.go:44: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp6lyrrv7k_test.go:44: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    \n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    \n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpl045ccnf_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpl045ccnf_test.go:45: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpl045ccnf_test.go:45: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    \n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    \n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpl045ccnf_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpl045ccnf_test.go:45: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpl045ccnf_test.go:45: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpvnh39_g3_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpvnh39_g3_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpvnh39_g3_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp96t5x9iq_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp96t5x9iq_test.go:42: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp96t5x9iq_test.go:42: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n// Test function\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp1srk35qw_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1srk35qw_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp1srk35qw_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpt9b9puf0_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpt9b9puf0_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpt9b9puf0_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    \n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    \n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    \n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    \n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return n\n    } else {\n        return n * special_factorial(n-1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp__f7m7ob_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp__f7m7ob_test.go:42: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp__f7m7ob_test.go:42: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 6\n    } else if n == 4 {\n        return 24\n    } else if n == 5 {\n        return 120\n    } else if n == 6 {\n        return 720\n    } else if n == 7 {\n        return 5040\n    } else if n == 8 {\n        return 40320\n    } else if n == 9 {\n        return 362880\n    } else if n == 10 {\n        return 3628800\n    } else if n == 11 {\n        return 39916800\n    } else if n == 12 {\n        return 479001600\n    } else if n == 13 {\n        return 6227020800\n    } else if n == 14 {\n        return 87178291200\n    } else if n == 15 {\n        return 1307674368000\n    } else if n == 16 {\n        return 20922789888000\n    } else if n == 17 {\n        return 355687428096000\n    } else if n == 18 {\n        return 6402373705728000\n    } else if n == 19 {\n        return 121645100408832000\n    } else if n == 20 {\n        return 2432902008176640000\n    } else if n == 21 {\n        return 51090942171709440000\n    } else if n == 22 {\n        return 1124000727777607680000\n    } else if n == 23 {\n        return 25852016738884976640000\n    } else if n == 24 {\n        return 620448401733239439360000\n    } else if n == 25 {\n        return 15511210043330985984000000\n    } else if n == 26 {\n        return 403291461126605635584000000\n    } else if n == 27 {\n        return 10888869450418352160768000000\n    } else if n == 28 {\n        return 304888344611713860501504000000\n    } else if n == 29 {\n        return 884176199373970195\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7ja53f23_test.go:77:6: expected '(', found TestSpecial_Factorial\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\n// Tests for special_factorial\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmppnh_tupm_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmppnh_tupm_test.go:41: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmppnh_tupm_test.go:41: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    \n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    \n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    var result int\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmphv8l638t_test.go:40: expected '%!s(int=288)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmphv8l638t_test.go:40: expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmphv8l638t_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n        tmphv8l638t_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\n// The function should return the special factorial of the input.\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpp3ig7o5h_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp3ig7o5h_test.go:41: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpp3ig7o5h_test.go:41: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n < 0 {\n        return 0\n    } else if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n-1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp8icegu9a_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp8icegu9a_test.go:42: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp8icegu9a_test.go:42: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    \n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    \n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    var result int\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmphv8l638t_test.go:40: expected '%!s(int=288)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmphv8l638t_test.go:40: expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmphv8l638t_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n        tmphv8l638t_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    \n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    \n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\n// The function should return the special factorial of the input.\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpp3ig7o5h_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp3ig7o5h_test.go:41: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpp3ig7o5h_test.go:41: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\n// The function should return the special factorial of a negative integer.\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp9t81q_qk_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp9t81q_qk_test.go:41: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp9t81q_qk_test.go:41: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\n// The function should return the special factorial of the input.\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpp3ig7o5h_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp3ig7o5h_test.go:41: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpp3ig7o5h_test.go:41: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp480jdnkj_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n-1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp6fb18720_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6fb18720_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp6fb18720_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\n// The function should return the special factorial of a negative integer.\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp9t81q_qk_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp9t81q_qk_test.go:41: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp9t81q_qk_test.go:41: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpt2k860if_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpt2k860if_test.go:42: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpt2k860if_test.go:42: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpvmcri9hz_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpvmcri9hz_test.go:44: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpvmcri9hz_test.go:44: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpccrk680z_test.go:39: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    \n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    \n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp402bp2to_test.go:45: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    var result int\n    for i := 1; i <= n; i++ {\n        result = result * i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpt_ke_ubc_test.go:40: expected '%!s(int=288)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpt_ke_ubc_test.go:40: expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpt_ke_ubc_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n        tmpt_ke_ubc_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else {\n        return n * special_factorial(n-1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmp6lyrrv7k_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6lyrrv7k_test.go:44: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmp6lyrrv7k_test.go:44: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpo2id__lx_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpo2id__lx_test.go:42: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpo2id__lx_test.go:42: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpkp_9f1di_test.go:40: expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}