name: HumanEval_47_median
language: go_test.go
prompt: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n\
  // >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64\
  \ {\n"
tests: "func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
  \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
  \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n    \
  \ { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor\
  \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n\
    \        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)\
    \ / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\
    \n// Return the median of the two numbers.", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) ==\
    \ 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n   \
    \     return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l)\
    \ / 2]\n}\n", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n   \
    \ if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2]\
    \ + l[n/2 - 1]) / 2\n    }\n    return float64(l[n/2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid]\
    \ + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n     \
    \   return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n\
    \    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1])\
    \ / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n\
    \        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    \n    if len(l) == 1 {\n        return l[0]\n\
    \    }\n    \n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n\
    \    \n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    \n    return l[len(l) / 2]\n}\n\n// Test median function.",
  "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "  \
    \  n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2\
    \ - 1]) / 2\n    }\n    return float64(l[n/2])\n}\n", "    if len(l) == 0 {\n\
    \        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n\
    \    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n\
    \    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l)\
    \ == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]\
    \ + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l)\
    \ == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]\
    \ + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0]\
    \ + l[", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n\
    \        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)\
    \ / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n",
  "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "  \
    \  n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n\
    \ / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    median := float64(l[len(l) / 2])\n    if len(l) % 2 == 0 {\n        median\
    \ = (median + float64(l[len(l) / 2 - 1])) / 2\n    }\n    return median\n}\n",
  "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n\
    \ / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n\n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n\
    \n    return float64(l[len(l)/2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n     \
    \   return 0\n    }\n    \n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n\
    \    \n    return float64(l[len(l)/2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l)\
    \ / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) /\
    \ 2\n    }\n    return float64(l[mid])\n}\n", "    n := len(l)\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    n := len(l)\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2\
    \ {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n", "    if len(l)\
    \ == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n\
    \    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if\
    \ len(l) % 2 == 0 {\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n\
    \    return l[len(l)/2]\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n\
    \    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2\
    \ {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n\
    \        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n\
    \    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2\
    \ {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n  \
    \      return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n \
    \       return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) ==\
    \ 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n \
    \   if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]\
    \ + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n     \
    \   return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n\
    \    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n    \
    \    return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]\
    \ + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[",
  "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "  \
    \  if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "  \
    \  l = remove_duplicates(l)\n    if len(l) == 0 {\n        return 0\n    }\n \
    \   if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n     \
    \   return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return\
    \ (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n\
    }\n", "    if len(l) == 0 {\n        return 0\n    }\n\n    if len(l) == 1 {\n\
    \        return l[0]\n    }\n\n    if len(l) == 2 {\n        return (l[0] + l[1])\
    \ / 2\n    }\n\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l)\
    \ / 2 - 1]) / 2\n    }\n\n    return l[len(l) / 2]\n}\n", "    n := len(l)\n \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n\
    \    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2\
    \ == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n\
    \ / 2]\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) ==\
    \ 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0]\
    \ + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n      \
    \  return (l[mid] + l[mid - 1]) / 2\n    }\n    return l[mid]\n}\n", "    if len(l)\
    \ == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    n := len(l)\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2\
    \ {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n", "    if len(l)\
    \ == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n\
    \    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    mid\
    \ := len(l) / 2\n    if len(l) % 2 == 0 {\n        return (l[mid] + l[mid - 1])\
    \ / 2\n    }\n    return l[mid]\n}\n", "    n := len(l)\n    if n == 0 {\n   \
    \     return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n ==\
    \ 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    \n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n    \n   \
    \ return float64(l[len(l)/2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n\
    \        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) ==\
    \ 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n \
    \   if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]\
    \ + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n     \
    \   return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n\
    \    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n    \
    \    return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]\
    \ + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[",
  "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "  \
    \  if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return\
    \ float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n", " \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\n// Test\
    \ median function.", "    n := len(l)\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n \
    \       return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return\
    \ float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n\
    }\n", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n\
    \ / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    l = remove_duplicates(l)\n\
    \    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n       \
    \ return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n\
    \    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\n// Return the median of the\
    \ two numbers.\n// >>> median(1, 2)\n// 1.5", "    n := len(l)\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) /\
    \ 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n\
    \    }\n    return float64(l[mid])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n     \
    \   return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n\
    \    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1])\
    \ / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n\
    \        return 0\n    }\n\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) /\
    \ 2 - 1]) / 2\n    }\n\n    return float64(l[len(l) / 2])\n}\n", "    if len(l)\
    \ == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n  \
    \  }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return l[len(l) / 2]\n}\n", "    if len(l) == 0 {\n        return 0\n   \
    \ }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    n := len(l)\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    n := len(l)\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n\
    \    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2\
    \ == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n  \
    \  if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n\
    \        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n  \
    \      return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[len(l) / 2])\n}\n\n// Return median of elements in the list l.\n//\
    \ >>> median([])\n// 0\n// >>> median([1])\n// 1\n// >>> median([1, 2, 3])\n//\
    \ 2\n// >>> median([1, 2, 3, 4, 5])\n// 3", "    n := len(l)\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if\
    \ n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n   \
    \     return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n",
  "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n\
    \    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n  \
    \  }\n    return l[n / 2]\n}\n", "    if len(l) == 0 {\n        return 0\n   \
    \ }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l)\
    \ == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if\
    \ len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n\
    \    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7])\
    \ / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]\
    \ + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0]\
    \ + l[", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n\
    \        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1]\
    \ + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) ==\
    \ 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6])\
    \ / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n     \
    \   return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8])\
    \ / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l)\
    \ == 11 {\n        return float64(l[0] + l[", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n     \
    \   return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n\
    \    if len(l) == 2 {\n        return (float64(l[0]) + float64(l[1])) / 2\n  \
    \  }\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l) / 2]) + float64(l[len(l)\
    \ / 2 - 1])) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l)\
    \ == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    \n    if len(l) == 1 {\n        return float64(l[0])\n    }\n\
    \    \n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    \n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l)\
    \ / 2 - 1]) / 2\n    }\n    \n    return float64(l[len(l) / 2])\n}\n", "    if\
    \ len(l) == 0 {\n        return 0\n    }\n    \n    l = l[:len(l)/2]\n    l =\
    \ append(l, l[len(l)/2])\n    \n    return float64(l[len(l)/2])\n}\n", "    if\
    \ len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "  \
    \  if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2])\
    \ / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n     \
    \   return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n\
    \    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]\
    \ + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if\
    \ len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]\
    \ + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return\
    \ float64(l[0] + l[", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l)\
    \ == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)\
    \ / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n",
  "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n\
    \ / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    n := len(l)\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n   \
    \ if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 ==\
    \ 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n  \
    \  if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n\
    \        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if\
    \ len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid-1]) / 2\n    }\n  \
    \  return float64(l[mid])\n}\n", "    if len(l) == 0 {\n        return 0\n   \
    \ }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n     \
    \   return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n\
    \    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n\
    \    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4])\
    \ / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7])\
    \ / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]\
    \ + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0]\
    \ + l[", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] +\
    \ l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 -\
    \ 1]) / 2\n    }\n    return l[n / 2]\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l)\
    \ == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if\
    \ len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n\
    \    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7])\
    \ / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]\
    \ + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0]\
    \ + l[", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] +\
    \ l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n/2] + l[n/2-1]) /\
    \ 2\n    }\n    return l[n/2]\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n\n// Test median function.", "    if len(l)\
    \ == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n\
    \    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n\
    \    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l)\
    \ == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]\
    \ + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l)\
    \ == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]\
    \ + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0]\
    \ + l[", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n\
    \        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)\
    \ / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\
    \n// Return median of elements in the list l.\n// >>> median([])\n// 0\n// >>>\
    \ median([1, 2, 3])\n// 2\n// >>> median([1, 2, 3, 4, 5])\n// 3", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    n := len(l)\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n   \
    \ if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 ==\
    \ 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n  \
    \  if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n\
    \        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n  \
    \      return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n\
    \    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2\
    \ {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n\
    \        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[len(l) / 2])\n}\n", "    n := len(l)\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n ==\
    \ 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n \
    \       return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n\
    \ / 2])\n}\n", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n  \
    \  if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n       \
    \ return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return\
    \ float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n\
    }\n", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n == 3 {\n        return float64(l[0] + l[1] + l[2])\
    \ / 3\n    }\n    if n == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3])\
    \ / 4\n    }\n    if n == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4]) / 5\n    }\n    if n == 6 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5]) / 6\n    }\n    if n == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if n == 8 {\n   \
    \     return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) /\
    \ 8\n    }\n    if n == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if n == 10 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9])\
    \ / 10\n    }\n    if n == 11 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] + l[6] +", "    if len(l) == 0 {\n        return 0\n    }\n  \
    \  if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n      \
    \  return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)\
    \ / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n", "    if\
    \ len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "  \
    \  n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n\
    \ / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) /\
    \ 2 - 1]) / 2\n    }\n\n    return float64(l[len(l) / 2])\n}\n", "    if len(l)\
    \ == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n\
    \    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2\
    \ == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n\
    \ / 2]\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    \n    if len(l)\
    \ == 1 {\n        return float64(l[0])\n    }\n    \n    if len(l) == 2 {\n  \
    \      return float64(l[0] + l[1]) / 2\n    }\n    \n    if len(l) % 2 == 0 {\n\
    \        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    \n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n     \
    \   return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n\
    \    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1])\
    \ / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n\
    \        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid]\
    \ + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n\
    \    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2\
    \ == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n\
    \ / 2]\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) ==\
    \ 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)\
    \ / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n",
  "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n == 3 {\n        return float64(l[0] + l[1] + l[2])\
    \ / 3\n    }\n    if n == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3])\
    \ / 4\n    }\n    if n == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4]) / 5\n    }\n    if n == 6 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5]) / 6\n    }\n    if n == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if n == 8 {\n   \
    \     return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) /\
    \ 8\n    }\n    if n == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if n == 10 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9])\
    \ / 10\n    }\n    if n == 11 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] + l[6] +", "    if len(l) == 0 {\n        return 0\n    }\n  \
    \  if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n      \
    \  return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)\
    \ / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n", "    if\
    \ len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "  \
    \  if len(l) == 0 {\n        return 0\n    }\n    \n    l = l[:len(l)/2]\n   \
    \ l = append(l, l[len(l)/2])\n    \n    return float64(l[len(l)/2])\n}\n", " \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "  \
    \  if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n", "    l = append(l, 0)\n \
    \   l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l,\
    \ 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l\
    \ = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l,\
    \ 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l\
    \ = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l,\
    \ 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l\
    \ = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l,\
    \ 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l\
    \ = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l,\
    \ 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l\
    \ = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l,\
    \ 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l\
    \ = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l,\
    \ 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l\
    \ = append(l, 0)\n    l", "    n := len(l)\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n\
    \        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n       \
    \ return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n /\
    \ 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) ==\
    \ 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n\
    }\n", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2\
    \ - 1]) / 2\n    }\n    return float64(l[n/2])\n}\n", "    if len(l) == 0 {\n\
    \        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n\
    \    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n\
    \    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l)\
    \ == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]\
    \ + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l)\
    \ == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]\
    \ + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0]\
    \ + l[", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n\
    \        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)\
    \ / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n",
  "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n\
    \ / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid]\
    \ + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    n := len(l)\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n   \
    \ if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 ==\
    \ 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[n / 2])\n}\n", "    n := len(l)\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n\
    \        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n       \
    \ return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n /\
    \ 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) ==\
    \ 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0]\
    \ + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2]\
    \ + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n", "    if len(l)\
    \ == 0 {\n        return 0\n    }\n    \n    if len(l) == 1 {\n        return\
    \ l[0]\n    }\n    \n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n\
    \    }\n    \n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l)\
    \ / 2 - 1]) / 2\n    }\n    \n    return l[len(l) / 2]\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n/2] + l[n/2 - 1]) / 2\n    }\n    return\
    \ float64(l[n/2])\n}\n", "    n := len(l)\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n\
    \        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n       \
    \ return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n /\
    \ 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) ==\
    \ 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0]\
    \ + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2]\
    \ + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n", "    if len(l)\
    \ == 0 {\n        return 0\n    }\n    \n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    \n    if len(l) == 2 {\n        return (float64(l[0])\
    \ + float64(l[1])) / 2\n    }\n    \n    if len(l) % 2 == 0 {\n        return\
    \ (float64(l[len(l) / 2]) + float64(l[len(l) / 2 - 1])) / 2\n    }\n    \n   \
    \ return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n\
    \        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return\
    \ (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n",
  "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n\
    \ / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return (float64(l[0]) + float64(l[1])) /\
    \ 2\n    }\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2)\n    }\n    return float64(l[len(l)/2])\n}\n", "    if len(l) == 0 {\n\
    \        return 0\n    }\n    \n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n\
    \    \n    return float64(l[len(l)/2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l)\
    \ == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if\
    \ len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n\
    \    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7])\
    \ / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]\
    \ + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0]\
    \ + l[", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n\
    \        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1]\
    \ + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) ==\
    \ 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6])\
    \ / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n     \
    \   return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8])\
    \ / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l)\
    \ == 11 {\n        return float64(l[0] + l[", "    n := len(l)\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    n := len(l)\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) /\
    \ 2\n    if l[mid] > l[mid - 1] {\n        return float64(l[mid])\n    }\n   \
    \ return float64(l[mid - 1] + l[mid]) / 2\n}\n", "    n := len(l)\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    l = l[:len(l)/2]\n    if\
    \ len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return (float64(l[0]) +\
    \ float64(l[1])) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2-1])\
    \ + float64(l[len(l)/2])) / 2\n    }\n    return float64(l[len(l)/2])\n}\n", " \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n == 3 {\n        return float64(l[0] + l[1] + l[2])\
    \ / 3\n    }\n    if n == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3])\
    \ / 4\n    }\n    if n == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4]) / 5\n    }\n    if n == 6 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5]) / 6\n    }\n    if n == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if n == 8 {\n   \
    \     return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) /\
    \ 8\n    }\n    if n == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if n == 10 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9])\
    \ / 10\n    }\n    if n == 11 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] + l[6] +", "    n := len(l)\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n\
    \        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n       \
    \ return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n /\
    \ 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) ==\
    \ 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) ==\
    \ 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6])\
    \ / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n     \
    \   return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8])\
    \ / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l)\
    \ == 11 {\n        return float64(l[0] + l[", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l)\
    \ == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if\
    \ len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n\
    \    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7])\
    \ / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]\
    \ + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0]\
    \ + l[", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n\
    \        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)\
    \ / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n",
  "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n\
    \    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n  \
    \  }\n    return l[n / 2]\n}\n", "    if len(l) == 0 {\n        return 0\n   \
    \ }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n\
    \        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) ==\
    \ 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n \
    \   if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]\
    \ + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n     \
    \   return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n\
    \    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n    \
    \    return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]\
    \ + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[",
  "    if len(l) == 0 {\n        return 0\n    }\n\n    l = l[:len(l)/2]\n    l =\
    \ append(l, l[len(l)/2])\n\n    return float64(l[len(l)/2])\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return (float64(l[0]) + float64(l[1])) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return (float64(l[len(l)/2-1]) + float64(l[len(l)/2])) /\
    \ 2\n    }\n    return float64(l[len(l)/2])\n}\n", "    if len(l) == 0 {\n   \
    \     return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n  \
    \  }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n \
    \   mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid]\
    \ + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n     \
    \   return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n\
    \    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1])\
    \ / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n\
    \        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n", "    if len(l) == 0 {\n \
    \       return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n", "    if len(l) == 0 {\n \
    \       return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    n := len(l)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n", "    n := len(l)\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    n := len(l)\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n   \
    \ if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 ==\
    \ 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n  \
    \  if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n\
    \        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n      \
    \  return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n     \
    \   return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n\
    \        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l)\
    \ == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n\
    \    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l)\
    \ == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]\
    \ + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n\
    \    if len(l) == 11 {\n        return float64(l[0] + l[", "    if len(l) == 0\
    \ {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n\
    \    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\
    \    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n\
    \    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n\
    \    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l)\
    \ == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]\
    \ + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l)\
    \ == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]\
    \ + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0]\
    \ + l[", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n\
    \ / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n", "    if\
    \ len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] +\
    \ l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "  \
    \  if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2])\
    \ / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n     \
    \   return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n\
    \    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]\
    \ + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if\
    \ len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]\
    \ + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return\
    \ float64(l[0] + l[", "    if len(l) == 0 {\n        return 0\n    }\n    \n \
    \   if len(l) == 1 {\n        return l[0]\n    }\n    \n    if len(l) == 2 {\n\
    \        return (l[0] + l[1]) / 2\n    }\n    \n    if len(l) % 2 == 0 {\n   \
    \     return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    \n    return\
    \ l[len(l) / 2]\n}\n\n// Test median function.", "    if len(l) == 0 {\n     \
    \   return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n\
    \    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1])\
    \ / 2\n    }\n    return float64(l[len(l) / 2])\n}\n", "    n := len(l)\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n\
    \    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n    return\
    \ float64(l[len(l)/2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n\
    \    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2\
    \ {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n\
    \        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n\
    \    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2\
    \ {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n\
    \        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return\
    \ float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n\
    \    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2\
    \ {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n\
    \        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1])\
    \ / 2\n    }\n    if n % 2 == 0 {\n        return (l[n/2] + l[n/2 - 1]) / 2\n\
    \    }\n    return l[n/2]\n}\n", "    n := len(l)\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n ==\
    \ 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n \
    \       return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n\
    \ / 2])\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) ==\
    \ 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n\
    }\n", "    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1])\
    \ / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2\n    }\n    return l[n / 2]\n}\n", "    if len(l) == 0 {\n        return 0\n\
    \    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l)\
    \ == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\
    \    return float64(l[len(l) / 2])\n}\n", "    if len(l) == 0 {\n        return\
    \ 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if\
    \ len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n\
    \    return float64(l[len(l)/2])\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
