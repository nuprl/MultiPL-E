{
  "name": "HumanEval_100_make_a_pile",
  "language": "go_test.go",
  "prompt": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n",
  "tests": "func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374691,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{n}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpm2ve9xs0_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpm2ve9xs0_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpm2ve9xs0_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpm2ve9xs0_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpm2ve9xs0_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0370 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:18 +0xd8 fp=0xc0201e0380 sp=0xc0201e0378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03b0 sp=0xc0201e0380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03e0 sp=0xc0201e03b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0410 sp=0xc0201e03e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0440 sp=0xc0201e0410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0470 sp=0xc0201e0440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04a0 sp=0xc0201e0470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04d0 sp=0xc0201e04a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0500 sp=0xc0201e04d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0530 sp=0xc0201e0500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0560 sp=0xc0201e0530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp_whn_2pm_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp_whn_2pm_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_whn_2pm_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp_whn_2pm_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp_whn_2pm_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n}\n    }\n    return []int{n, 2 * n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpgt4804id_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpgt4804id_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpgt4804id_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=11)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpgt4804id_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpgt4804id_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:26 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:26 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:26 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:26 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:26 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:26 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:26 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:26 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:26 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpczs0ee6s_test.go:26 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{n}\n    }\n    if n%2 == 0 {\n        return []int{n, n}\n    }\n    return []int{n, n+1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpzlube5tz_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpzlube5tz_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzlube5tz_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpzlube5tz_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpzlube5tz_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{n}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0370 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:18 +0xd8 fp=0xc0201e0380 sp=0xc0201e0378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03b0 sp=0xc0201e0380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03e0 sp=0xc0201e03b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0410 sp=0xc0201e03e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0440 sp=0xc0201e0410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0470 sp=0xc0201e0440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04a0 sp=0xc0201e0470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04d0 sp=0xc0201e04a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0500 sp=0xc0201e04d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0530 sp=0xc0201e0500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0560 sp=0xc0201e0530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 0 {\n        return []int{}\n    }\n    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{2, 2}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 2}\n    }\n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp_t0dup3s_test.go:55: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp_t0dup3s_test.go:55: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_t0dup3s_test.go:55: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp_t0dup3s_test.go:55: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp_t0dup3s_test.go:55: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 2}\n    }\n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmprxr8_xdo_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmprxr8_xdo_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmprxr8_xdo_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmprxr8_xdo_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmprxr8_xdo_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpxb6bys69_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpxb6bys69_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpxb6bys69_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpxb6bys69_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpxb6bys69_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 1 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return []int{n, n + 2, n + 4, n + 6, n + 8}\n    } else {\n        return []int{n, n + 1, n + 3, n + 5, n + 7}\n    }\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpfdxucbaw_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpfdxucbaw_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpfdxucbaw_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpfdxucbaw_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpfdxucbaw_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0370 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:18 +0xd8 fp=0xc0201e0380 sp=0xc0201e0378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03b0 sp=0xc0201e0380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03e0 sp=0xc0201e03b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0410 sp=0xc0201e03e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0440 sp=0xc0201e0410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0470 sp=0xc0201e0440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04a0 sp=0xc0201e0470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04d0 sp=0xc0201e04a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0500 sp=0xc0201e04d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0530 sp=0xc0201e0500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0560 sp=0xc0201e0530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n, 2 * n}\n    }\n    return []int{n, 2 * n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp4y4bwz86_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp4y4bwz86_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp4y4bwz86_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=11)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp4y4bwz86_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp4y4bwz86_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp7dpksd1j_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp7dpksd1j_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7dpksd1j_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7dpksd1j_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7dpksd1j_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n, 2 * n}\n    }\n    return []int{n, 2 * n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp1x4b1cep_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp1x4b1cep_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp1x4b1cep_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=11)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp1x4b1cep_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp1x4b1cep_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{n}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{n}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return []int{n, n, n}\n    }\n    return []int{n, n+1, n+2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpanjw53_b_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpanjw53_b_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpanjw53_b_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpanjw53_b_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpanjw53_b_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpdhe6e90l_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpdhe6e90l_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpdhe6e90l_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpdhe6e90l_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpdhe6e90l_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 2}\n    }\n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpclo_43d0_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpclo_43d0_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpclo_43d0_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpclo_43d0_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpclo_43d0_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    } else {\n        return make_a_pile(n/2 + 1)\n    }\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0370 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:18 +0xd8 fp=0xc0201e0380 sp=0xc0201e0378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03b0 sp=0xc0201e0380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03e0 sp=0xc0201e03b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0410 sp=0xc0201e03e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0440 sp=0xc0201e0410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0470 sp=0xc0201e0440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04a0 sp=0xc0201e0470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04d0 sp=0xc0201e04a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0500 sp=0xc0201e04d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0530 sp=0xc0201e0500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0560 sp=0xc0201e0530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, n}\n    }\n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpyzy6imn8_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpyzy6imn8_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpyzy6imn8_test.go:49: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpyzy6imn8_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpyzy6imn8_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1, n + 2}\n    }\n    return []int{n, n + 2, n + 3}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpy481b5w9_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpy481b5w9_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpy481b5w9_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpy481b5w9_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpy481b5w9_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{n}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp1e91c3e3_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp1e91c3e3_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp1e91c3e3_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp1e91c3e3_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp1e91c3e3_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1, n + 2}\n    }\n    return []int{n, n + 2, n + 3}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp3p1772or_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp3p1772or_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp3p1772or_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp3p1772or_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp3p1772or_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return []int{n}\n    }\n    \n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpeve8fcm6_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpeve8fcm6_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpeve8fcm6_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpeve8fcm6_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpeve8fcm6_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 2, n + 4, n + 6, n + 8, n + 10, n + 12, n + 14, n + 16, n + 18}\n    } else {\n        return []int{n, n + 1, n + 3, n + 5, n + 7, n + 9, n + 11, n + 13, n + 15, n + 17}\n    }\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpyvw7_orr_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpyvw7_orr_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpyvw7_orr_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpyvw7_orr_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpyvw7_orr_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpdhe6e90l_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpdhe6e90l_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpdhe6e90l_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpdhe6e90l_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpdhe6e90l_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 2, n + 4, n + 6, n + 8}\n    }\n    return []int{n, n + 1, n + 3, n + 5, n + 7}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp61ei1l7t_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp61ei1l7t_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp61ei1l7t_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp61ei1l7t_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp61ei1l7t_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return []int{n, n, n}\n    }\n    return []int{n, n+1, n+2}\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpanrr7axf_test.go:56: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpanrr7axf_test.go:56: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpanrr7axf_test.go:56: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpanrr7axf_test.go:56: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpanrr7axf_test.go:56: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, n, n}\n    }\n    return []int{n, n+1, n+2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp7ty3_dhk_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp7ty3_dhk_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7ty3_dhk_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7ty3_dhk_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7ty3_dhk_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n%2 == 0 {\n        return make_a_pile_test.make_a_pile_test(n/2)\n    } else {\n        return make_a_pile_test.make_a_pile_test(n/2+1)\n    }\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplw_un6ub_test.go:21:16: undefined: make_a_pile_test\n/tmp/tmplw_un6ub_test.go:23:16: undefined: make_a_pile_test\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, n+1, n+2}\n    }\n    return []int{n, n+2, n+3}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp_bk3w4ro_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp_bk3w4ro_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_bk3w4ro_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp_bk3w4ro_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp_bk3w4ro_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, n+1}\n    }\n    return []int{n, n+2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374693,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:25 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:25 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:25 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:25 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:25 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:25 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:25 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:25 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:25 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9ko2wh8f_test.go:25 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{2, 2}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpfa27a4n3_test.go:54: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpfa27a4n3_test.go:54: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpfa27a4n3_test.go:54: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpfa27a4n3_test.go:54: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpfa27a4n3_test.go:54: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374691,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp_whn_2pm_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp_whn_2pm_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_whn_2pm_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp_whn_2pm_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp_whn_2pm_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return []int{n, n+1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    } else {\n        return make_a_pile(n/2 + 1)\n    }\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    } else {\n        return make_a_pile(n/2 + 1)\n    }\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374694,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:26 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:26 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:26 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:26 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:26 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:26 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:26 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:26 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:26 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9czzvg2x_test.go:26 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n}\n    }\n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, n+1}\n    }\n    return []int{n, n+2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374691,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374691,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpnfb4c552_test.go:26 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374694,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return []int{n, n+1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0370 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:18 +0xd8 fp=0xc0201e0380 sp=0xc0201e0378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03b0 sp=0xc0201e0380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03e0 sp=0xc0201e03b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0410 sp=0xc0201e03e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0440 sp=0xc0201e0410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0470 sp=0xc0201e0440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04a0 sp=0xc0201e0470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04d0 sp=0xc0201e04a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0500 sp=0xc0201e04d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0530 sp=0xc0201e0500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0560 sp=0xc0201e0530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, n+1}\n    }\n    return []int{n, n+2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpz7s1ypwx_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return []int{n, n + 1, n + 2}\n    }\n    \n    return []int{n, n + 2, n + 3}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpylxi0bzg_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpylxi0bzg_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpylxi0bzg_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpylxi0bzg_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpylxi0bzg_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374694,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpatjwpx2i_test.go:28 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374694,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpfj2qc0g5_test.go:26 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp6gexdbbj_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp6gexdbbj_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp6gexdbbj_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp6gexdbbj_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp6gexdbbj_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374694,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0200e0370 stack=[0xc0200e0000, 0xc0400e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:18 +0xd7 fp=0xc0200e0380 sp=0xc0200e0378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:27 +0x8c fp=0xc0200e03b0 sp=0xc0200e0380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:27 +0x8c fp=0xc0200e03e0 sp=0xc0200e03b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:27 +0x8c fp=0xc0200e0410 sp=0xc0200e03e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:27 +0x8c fp=0xc0200e0440 sp=0xc0200e0410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:27 +0x8c fp=0xc0200e0470 sp=0xc0200e0440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:27 +0x8c fp=0xc0200e04a0 sp=0xc0200e0470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:27 +0x8c fp=0xc0200e04d0 sp=0xc0200e04a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:27 +0x8c fp=0xc0200e0500 sp=0xc0200e04d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:27 +0x8c fp=0xc0200e0530 sp=0xc0200e0500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmprey6bth2_test.go:27 +0x8c fp=0xc0200e0560 sp=0xc0200e0530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n}\n    }\n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpc7xa_vdf_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0370 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:18 +0xd8 fp=0xc0201e0380 sp=0xc0201e0378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03b0 sp=0xc0201e0380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03e0 sp=0xc0201e03b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0410 sp=0xc0201e03e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0440 sp=0xc0201e0410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0470 sp=0xc0201e0440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04a0 sp=0xc0201e0470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04d0 sp=0xc0201e04a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0500 sp=0xc0201e04d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0530 sp=0xc0201e0500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0560 sp=0xc0201e0530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{2, 2}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpfa27a4n3_test.go:54: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpfa27a4n3_test.go:54: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpfa27a4n3_test.go:54: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpfa27a4n3_test.go:54: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpfa27a4n3_test.go:54: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{n}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpnernewnx_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n}\n    }\n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return []int{n, n + 2, n + 4, n + 6, n + 8}\n    } else {\n        return []int{n, n + 1, n + 3, n + 5, n + 7}\n    }\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp98rc9fq9_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp98rc9fq9_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp98rc9fq9_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp98rc9fq9_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp98rc9fq9_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n}\n    }\n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptcvznkhn_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return []int{n, n+1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpc7_hakbo_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpc7_hakbo_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpc7_hakbo_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpc7_hakbo_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpc7_hakbo_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1, n + 2}\n    }\n    return []int{n, n + 2, n + 3}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp3p1772or_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp3p1772or_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp3p1772or_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp3p1772or_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp3p1772or_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return []int{n, n, n}\n    }\n    return []int{n, n+1, n+2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpanjw53_b_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpanjw53_b_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpanjw53_b_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpanjw53_b_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpanjw53_b_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return []int{n, n+1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpmbd8t6jr_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n%2 == 0 {\n        return make_a_pile_test.make_a_pile_test(n/2)\n    } else {\n        return make_a_pile_test.make_a_pile_test(n/2 + 1)\n    }\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptcq44kwz_test.go:21:16: undefined: make_a_pile_test\n/tmp/tmptcq44kwz_test.go:23:16: undefined: make_a_pile_test\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0370 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:18 +0xd8 fp=0xc0201e0380 sp=0xc0201e0378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03b0 sp=0xc0201e0380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03e0 sp=0xc0201e03b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0410 sp=0xc0201e03e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0440 sp=0xc0201e0410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0470 sp=0xc0201e0440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04a0 sp=0xc0201e0470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04d0 sp=0xc0201e04a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0500 sp=0xc0201e04d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0530 sp=0xc0201e0500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0560 sp=0xc0201e0530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmp9baq6lat_test.go:27 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return []int{n, n+1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpm0hoxot__test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpm0hoxot__test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpm0hoxot__test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpm0hoxot__test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpm0hoxot__test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, n, n}\n    }\n    return []int{n, n+1, n+2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpwsbmkd4x_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpwsbmkd4x_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpwsbmkd4x_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpwsbmkd4x_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpwsbmkd4x_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    } else {\n        return make_a_pile(n/2 + 1)\n    }\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpsq1jkqul_test.go:26 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return []int{n, n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp6gexdbbj_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp6gexdbbj_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp6gexdbbj_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp6gexdbbj_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp6gexdbbj_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n == 0 {\n        return []int{}\n    }\n    \n    if n%2 == 0 {\n        return make_a_pile(n/2)\n    }\n    \n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374694,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:18 +0xd7 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d7\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:28 +0x8c fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:28 +0x8c fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:28 +0x8c fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:28 +0x8c fp=0xc020160440 sp=0xc020160410 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:28 +0x8c fp=0xc020160470 sp=0xc020160440 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:28 +0x8c fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:28 +0x8c fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:28 +0x8c fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:28 +0x8c fp=0xc020160530 sp=0xc020160500 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpikgf9oqx_test.go:28 +0x8c fp=0xc020160560 sp=0xc020160530 pc=0x50a68c\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 2, n + 4, n + 6, n + 8}\n    }\n    return []int{n, n + 1, n + 3, n + 5, n + 7}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmprpu5v23j_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmprpu5v23j_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmprpu5v23j_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmprpu5v23j_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmprpu5v23j_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 2, n + 4, n + 6, n + 8}\n    }\n    return []int{n, n + 1, n + 3, n + 5, n + 7}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmprpu5v23j_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmprpu5v23j_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmprpu5v23j_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmprpu5v23j_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmprpu5v23j_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n%2 == 0 {\n        return []int{n, 2*n}\n    }\n    return []int{n, 2*n + 1}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpqmnwbf32_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpqmnwbf32_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqmnwbf32_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=11)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqmnwbf32_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpqmnwbf32_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0370 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:18 +0xd8 fp=0xc0201e0380 sp=0xc0201e0378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03b0 sp=0xc0201e0380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e03e0 sp=0xc0201e03b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0410 sp=0xc0201e03e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0440 sp=0xc0201e0410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0470 sp=0xc0201e0440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04a0 sp=0xc0201e0470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e04d0 sp=0xc0201e04a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0500 sp=0xc0201e04d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0530 sp=0xc0201e0500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpn95r6i3i_test.go:25 +0x8d fp=0xc0201e0560 sp=0xc0201e0530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0,",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmptrhucufi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpqwvjeucp_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    \n    var result []int\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result = append(result, i+2)\n        } else {\n            result = append(result, i+1)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374692,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp2pt20gws_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=2) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp2pt20gws_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp2pt20gws_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp2pt20gws_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp2pt20gws_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    // Write your code here\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374688,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7a3agzo1_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return []int{n, n + 1}\n    }\n    return []int{n, n + 2}\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374689,
      "stdout": "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpageagdtn_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n % 2 == 0 {\n        return make_a_pile(n/2)\n    }\n    return make_a_pile(n/2 + 1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374690,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54741e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:18 +0xd8 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d8\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603b0 sp=0xc020160380 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201603e0 sp=0xc0201603b0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160410 sp=0xc0201603e0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160440 sp=0xc020160410 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160470 sp=0xc020160440 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604a0 sp=0xc020160470 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc0201604d0 sp=0xc0201604a0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160500 sp=0xc0201604d0 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160530 sp=0xc020160500 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, 0x0)\n\t/tmp/tmpro7ru91i_test.go:25 +0x8d fp=0xc020160560 sp=0xc020160530 pc=0x50a68d\ncommand-line-arguments_test.make_a_pile(0x1, 0x0, 0x0, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}