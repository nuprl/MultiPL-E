{
  "name": "HumanEval_102_choose_num",
  "language": "go_test.go",
  "prompt": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n",
  "tests": "func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    \n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return (x + y) / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp8dxslak3_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp8dxslak3_test.go:56: expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp8dxslak3_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp8dxslak3_test.go:56: expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp8dxslak3_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp8dxslak3_test.go:56: expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp8dxslak3_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x%2 == 0 {\n        return x\n    }\n    \n    if y%2 == 0 {\n        return y\n    }\n    \n    return (x + y)/2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpi_i41uix_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpi_i41uix_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpi_i41uix_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    // We need to find the biggest even integer number in the range [x, y]\n    // inclusive.\n    //\n    // We can use the formula:\n    //\n    //   choose_num(x, y) = choose_num(x-1, y) + choose_num(x, y-1)\n    //\n    // where choose_num(a, b) is the biggest even integer number in the range\n    // [a, b] inclusive.\n    //\n    // For example:\n    //\n    //   choose_num(12, 15) = choose_num(11, 15) + choose_num(12, 14)\n    //\n    //   choose_num(13, 12) = choose_num(12, 12) + choose_num(13, 11)\n    //\n    //   choose_num(13, 13) = choose_num(12, 13) + choose_num(13, 12)\n    //\n    //   choose_num(13, 14) = choose_num(12, 14) + choose_num(13, 13)\n    //\n    //   choose_num(13, 15) = choose_num(12, 15) + choose_num(13, 14)\n    //\n    //   choose_num(14, 15) = choose_num(13, 15) + choose_num(14, 14)\n    //\n    //   choose_num(14, 14) = choose_num(13, 14) + choose_num(14, 13)\n    //\n    //   choose_num(14, 13) = choose_num(13, 13) + choose_num(14, 12)\n    //\n    //   choose_num(14, 12) = choose_num(12, 12) + choose_num(14, 11)\n    //\n    //   choose_num(14, 11) = choose_num(12, 11) + choose_num(14, 10)\n    //\n    //   choose_num(14, 10) = choose_num(12, 10\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzo_5ntiu_test.go:57:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The range [x, y] is inclusive.\n    // So, the biggest even integer number in the range is\n    // 2 * x + 2 * y - 2 * (x - y)\n    return 2 * x + 2 * y - 2 * (x - y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpoy8xe7ml_test.go:47: expected '%!s(int=14)', got '%!s(int=60)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpoy8xe7ml_test.go:47: expected '%!s(int=12354)', got '%!s(int=49416)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpoy8xe7ml_test.go:47: expected '%!s(int=28)', got '%!s(int=116)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpoy8xe7ml_test.go:47: expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpoy8xe7ml_test.go:47: expected '%!s(int=546)', got '%!s(int=2184)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    if x%2 == 0 {\n        return x\n    }\n    \n    if y%2 == 0 {\n        return y\n    }\n    \n    return (x+y)/2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpr37fzu87_test.go:55: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpr37fzu87_test.go:55: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpr37fzu87_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    \n    return choose_num(x, y/2)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp3_sj7gsm_test.go:56: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp3_sj7gsm_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp3_sj7gsm_test.go:56: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp3_sj7gsm_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7xc3hta1_test.go:140:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x > y + 1 {\n        return -1\n    }\n    if x > y - 1 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return -1\n    }\n    if y > x / 2 {\n        return -1\n    }\n    if x > y / 2 {\n        return\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpf5231gpc_test.go:109:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y/2)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // We'll start with the largest possible even number that is in the\n    // range [x, y] inclusive.\n    max_num := x\n    \n    // We'll keep track of the number of even numbers we've found so far.\n    num_found := 0\n    \n    // We'll keep track of the number of even numbers we've found so far\n    // that are greater than the largest possible even number.\n    num_greater_than_max_num := 0\n    \n    // We'll keep track of the number of even numbers we've found so far\n    // that are less than the largest possible even number.\n    num_less_than_max_num := 0\n    \n    // We'll keep track of the number of even numbers we've found so far\n    // that are greater than the largest possible even number.\n    num_greater_than_max_num_2 := 0\n    \n    // We'll keep track of the number of even numbers we've found so far\n    // that are less than the largest possible even number.\n    num_less_than_max_num_2 := 0\n    \n    // We'll keep track of the number of even numbers we've found so far\n    // that are greater than the largest possible even number.\n    num_greater_than_max_num_3 := 0\n    \n    // We'll keep track of the number of even numbers we've found so far\n    // that are less than the largest possible even number.\n    num_less_than_max_num_3 := 0\n    \n    // We'll keep track of the number of even numbers we've found so far\n    // that are greater than the largest possible even number.\n    num_greater_than_max_num_4 := 0\n    \n    // We'll keep track of the number of even numbers we've found so far\n    // that are less than the largest possible even number.\n    num_less_than_max_num_4 := 0\n    \n    // We'll keep track of the number of even numbers we've found so far\n    // that are greater than the largest possible even number.\n    num_greater_than_max_num_5 := 0\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp6h6guo35_test.go:64:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The range of possible numbers is [x, y] inclusive.\n    // The biggest even number in this range is x + y / 2.\n    return x + y / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp3bpp0shg_test.go:46: expected '%!s(int=14)', got '%!s(int=19)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp3bpp0shg_test.go:46: expected '%!s(int=12354)', got '%!s(int=6210)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp3bpp0shg_test.go:46: expected '%!s(int=28)', got '%!s(int=20)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp3bpp0shg_test.go:46: expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp3bpp0shg_test.go:46: expected '%!s(int=546)', got '%!s(int=819)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x == y + 2 {\n        return x\n    }\n    if x == y + 3 {\n        return x\n    }\n    if x == y + 4 {\n        return x\n    }\n    if x == y + 5 {\n        return x\n    }\n    if x == y + 6 {\n        return x\n    }\n    if x == y + 7 {\n        return x\n    }\n    if x == y + 8 {\n        return x\n    }\n    if x == y + 9 {\n        return x\n    }\n    if x == y + 10 {\n        return x\n    }\n    if x == y + 11 {\n        return x\n    }\n    if x == y + 12 {\n        return x\n    }\n    if x == y + 13 {\n        return x\n    }\n    if x == y + 14 {\n        return x\n    }\n    if x == y + 15 {\n        return x\n    }\n    if x == y + 16 {\n        return x\n    }\n    if x == y + 17 {\n        return x\n    }\n    if x == y + 18 {\n        return x\n    }\n    if x == y + 19 {\n        return x\n    }\n    if x == y + 20 {\n        return x\n    }\n    if x == y + 21 {\n        return x\n    }\n    if x == y + 22 {\n        return x\n    }\n    if x == y + 23 {\n        return x\n    }\n    if x == y + 24 {\n        return x\n    }\n    if x == y + 25 {\n        return x\n    }\n    if x == y + 26 {\n        return x\n    }\n    if x == y + 27 {\n        return x\n    }\n    if x == y + 28 {\n        return x\n    }\n    if x == y + 29 {\n        return x\n    }\n    if x\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpscl_idgs_test.go:114:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The number of even integers in the range [x, y] inclusive is\n    // equal to the number of integers in the range [x, y] inclusive\n    // that are divisible by 2.\n    //\n    // So, we'll start by computing the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll do this by counting the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll start by computing the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll do this by counting the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll start by computing the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll do this by counting the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll start by computing the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll do this by counting the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll start by computing the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll do this by counting the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll start by computing the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll do this by counting the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\n    //\n    // We'll start by computing the number of integers in the range\n    // [x, y] inclusive that are divisible by 2.\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpprjig62v_test.go:63:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // This is the base case.\n    if x == y {\n        return x\n    }\n    \n    // This is the recursive case.\n    if x%2 == 0 {\n        return choose_num(x/2, y)\n    } else {\n        return choose_num(x/2 + 1, y)\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160378 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722c, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:16 +0xc5 fp=0xc020160388 sp=0xc020160380 pc=0x50a6c5\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc0201603b0 sp=0xc020160388 pc=0x50a685\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc0201603d8 sp=0xc0201603b0 pc=0x50a685\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc020160400 sp=0xc0201603d8 pc=0x50a685\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc020160428 sp=0xc020160400 pc=0x50a685\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc020160450 sp=0xc020160428 pc=0x50a685\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc020160478 sp=0xc020160450 pc=0x50a685\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc0201604a0 sp=0xc020160478 pc=0x50a685\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc0201604c8 sp=0xc0201604a0 pc=0x50a685\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc0201604f0 sp=0xc0201604c8 pc=0x50a685\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc020160518 sp=0xc0201604f0 pc=0x50a685\ncommand-line-arguments_test.choose_num(0x1, 0xf, 0x0)\n\t/tmp/tmpsdmobk08_test.go:30 +0x85 fp=0xc020160540 sp=0xc020160518 ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    max := x\n    for i := x + 1; i <= y; i++ {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpmxhxk_q1_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // We'll store the results in this array.\n    results := make([]int, 0)\n    \n    // We'll store the even numbers in this array.\n    even_numbers := make([]int, 0)\n    \n    // We'll store the odd numbers in this array.\n    odd_numbers := make([]int, 0)\n    \n    // We'll store the number of even numbers in this array.\n    even_num_count := make([]int, 0)\n    \n    // We'll store the number of odd numbers in this array.\n    odd_num_count := make([]int, 0)\n    \n    // We'll store the number of even numbers that are less than x in this array.\n    even_num_count_less_than_x := make([]int, 0)\n    \n    // We'll store the number of odd numbers that are less than x in this array.\n    odd_num_count_less_than_x := make([]int, 0)\n    \n    // We'll store the number of even numbers that are greater than y in this array.\n    even_num_count_greater_than_y := make([]int, 0)\n    \n    // We'll store the number of odd numbers that are greater than y in this array.\n    odd_num_count_greater_than_y := make([]int, 0)\n    \n    // We'll store the number of even numbers that are in the range [x, y] in this array.\n    even_num_count_in_range := make([]int, 0)\n    \n    // We'll store the number of odd numbers that are in the range [x, y] in this array.\n    odd_num_count_in_range := make([]int, 0)\n    \n    // We'll store the number of even numbers that are in the range [x, y] and are greater than y in this array.\n    even_num_count_greater_than_y_in_range := make([]int, 0)\n    \n    // We'll store the number of odd numbers that are in the range [x, y] and are greater than\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8si34ydn_test.go:58:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // We'll start with the number x and work our way up to y.\n    // We'll keep track of the largest even integer number we've found\n    // so far.\n    max_even := x\n    \n    // We'll keep track of the largest odd integer number we've found\n    // so far.\n    max_odd := x\n    \n    // We'll keep track of the largest integer number we've found so far.\n    max := x\n    \n    // We'll keep track of the largest integer number we've found so far.\n    min := x\n    \n    // We'll keep track of the largest integer number we've found so far.\n    for i := x + 1; i <= y; i++ {\n        // If we've found a number that's even, we'll update the\n        // maximum even number we've found so far.\n        if i % 2 == 0 {\n            max_even = i\n        }\n        \n        // If we've found a number that's odd, we'll update the\n        // maximum odd number we've found so far.\n        if i % 2 != 0 {\n            max_odd = i\n        }\n        \n        // If we've found a number that's greater than the maximum\n        // number we've found so far, we'll update the maximum number\n        // we've found so far.\n        if i > max {\n            max = i\n        }\n        \n        // If we've found a number that's less than the minimum\n        // number we've found so far, we'll update the minimum number\n        // we've found so far.\n        if i < min {\n            min = i\n        }\n    }\n    \n    // If we've found a number that's even, we'll return it.\n    if max_even > max_odd {\n        return max_even\n    }\n    \n    // If we've found a number that's odd, we'll return it.\n    return max_odd\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxyltyq2r_test.go:94: expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxyltyq2r_test.go:94: expected '%!s(int=28)', got '%!s(int=29)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxyltyq2r_test.go:94: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y - 1 {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpu2b5yv8h_test.go:64: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpu2b5yv8h_test.go:64: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpu2b5yv8h_test.go:64: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return (x + y) / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return x + y - x / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpnr07_44i_test.go:52: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpnr07_44i_test.go:52: expected '%!s(int=12354)', got '%!s(int=12371)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpnr07_44i_test.go:52: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpnr07_44i_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2, y) * 2\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp7shp0_9i_test.go:52: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp7shp0_9i_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp7shp0_9i_test.go:52: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp7shp0_9i_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x == y + 2 {\n        return x\n    }\n    if x == y + 3 {\n        return x\n    }\n    if x == y + 4 {\n        return x\n    }\n    if x == y + 5 {\n        return x\n    }\n    if x == y + 6 {\n        return x\n    }\n    if x == y + 7 {\n        return x\n    }\n    if x == y + 8 {\n        return x\n    }\n    if x == y + 9 {\n        return x\n    }\n    if x == y + 10 {\n        return x\n    }\n    if x == y + 11 {\n        return x\n    }\n    if x == y + 12 {\n        return x\n    }\n    if x == y + 13 {\n        return x\n    }\n    if x == y + 14 {\n        return x\n    }\n    if x == y + 15 {\n        return x\n    }\n    if x == y + 16 {\n        return x\n    }\n    if x == y + 17 {\n        return x\n    }\n    if x == y + 18 {\n        return x\n    }\n    if x == y + 19 {\n        return x\n    }\n    if x == y + 20 {\n        return x\n    }\n    if x == y + 21 {\n        return x\n    }\n    if x == y + 22 {\n        return x\n    }\n    if x == y + 23 {\n        return x\n    }\n    if x == y + 24 {\n        return x\n    }\n    if x == y + 25 {\n        return x\n    }\n    if x == y + 26 {\n        return x\n    }\n    if x == y + 27 {\n        return x\n    }\n    if x == y + 28 {\n        return x\n    }\n    if x == y + 29 {\n        return x\n    }\n    if x\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpscl_idgs_test.go:114:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x%2 == 0 {\n        return x\n    }\n    if y%2 == 0 {\n        return y\n    }\n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x%2 == 0 {\n        return x\n    }\n    \n    if y%2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpg8hj2xrp_test.go:52: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpg8hj2xrp_test.go:52: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpg8hj2xrp_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y/2)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x > y + 1 {\n        return -1\n    }\n    if x > y + 2 {\n        return -1\n    }\n    if x > y + 3 {\n        return -1\n    }\n    if x > y + 4 {\n        return -1\n    }\n    if x > y + 5 {\n        return -1\n    }\n    if x > y + 6 {\n        return -1\n    }\n    if x > y + 7 {\n        return -1\n    }\n    if x > y + 8 {\n        return -1\n    }\n    if x > y + 9 {\n        return -1\n    }\n    if x > y + 10 {\n        return -1\n    }\n    if x > y + 11 {\n        return -1\n    }\n    if x > y + 12 {\n        return -1\n    }\n    if x > y + 13 {\n        return -1\n    }\n    if x > y + 14 {\n        return -1\n    }\n    if x > y + 15 {\n        return -1\n    }\n    if x > y + 16 {\n        return -1\n    }\n    if x > y + 17 {\n        return -1\n    }\n    if x > y + 18 {\n        return -1\n    }\n    if x > y + 19 {\n        return -1\n    }\n    if x > y + 20 {\n        return -1\n    }\n    if x > y + 21 {\n        return -1\n    }\n    if x > y + 22 {\n        return -1\n    }\n    if x > y + 23 {\n        return -1\n    }\n    if x > y + 24 {\n        return -1\n    }\n    if x > y + 25 {\n        return -1\n    }\n    if x > y + 26 {\n        \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp44qfhbpm_test.go:109:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // If x == y, then the function should return x\n    if x == y {\n        return x\n    }\n    \n    // If x == y + 1, then the function should return y\n    if x == y + 1 {\n        return y\n    }\n    \n    // If x == y - 1, then the function should return y - 1\n    if x == y - 1 {\n        return y - 1\n    }\n    \n    // If x > y - 1, then the function should return y - 1\n    if x > y - 1 {\n        return y - 1\n    }\n    \n    // If x > y, then the function should return y\n    if x > y {\n        return y\n    }\n    \n    // If x < y, then the function should return y\n    if x < y {\n        return y\n    }\n    \n    // If x < y + 1, then the function should return y + 1\n    if x < y + 1 {\n        return y + 1\n    }\n    \n    // If x < y - 1, then the function should return y - 1\n    if x < y - 1 {\n        return y - 1\n    }\n    \n    // If x == y - 2, then the function should return y - 2\n    if x == y - 2 {\n        return y - 2\n    }\n    \n    // If x == y - 3, then the function should return y - 3\n    if x == y - 3 {\n        return y - 3\n    }\n    \n    // If x == y - 4, then the function should return y - 4\n    if x == y - 4 {\n        return y - 4\n    }\n    \n    // If x == y - 5, then the function should return y - 5\n    if x == y - 5 {\n        return y - 5\n    }\n    \n    // If x == y - 6, then the function should return y - 6\n    if x == y - 6 {\n        return y - 6\n    }\n    \n    // If x == y - 7, then the function should return y - 7\n    if x == y - 7 {\n        return\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpz9l7q4c3_test.go:89:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // We'll start with the largest possible even number.\n    max := x\n    \n    // We'll keep track of the largest even number we've found so far.\n    found := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_even := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_even := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_odd := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_odd_even := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_odd_odd := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_odd_odd_even := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_odd_odd_odd := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_odd_odd_odd_even := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_odd_odd_odd_odd := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_odd_odd_odd_odd_even := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_odd_odd_odd_odd_odd := -1\n    \n    // We'll keep track of the largest even number we've found so far.\n    found_odd_odd_odd_odd_odd_odd_even := -1\n    \n    // We'll keep track of the largest even number we've\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4zhq30j7_test.go:67:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y - 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpm3dr5jcc_test.go:60: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpm3dr5jcc_test.go:60: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpm3dr5jcc_test.go:60: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 2 {\n        return x\n    }\n    if x == y - 2 {\n        return x\n    }\n    if x == y + 3 {\n        return x\n    }\n    if x == y - 3 {\n        return x\n    }\n    if x == y + 4 {\n        return x\n    }\n    if x == y - 4 {\n        return x\n    }\n    if x == y + 5 {\n        return x\n    }\n    if x == y - 5 {\n        return x\n    }\n    if x == y + 6 {\n        return x\n    }\n    if x == y - 6 {\n        return x\n    }\n    if x == y + 7 {\n        return x\n    }\n    if x == y - 7 {\n        return x\n    }\n    if x == y + 8 {\n        return x\n    }\n    if x == y - 8 {\n        return x\n    }\n    if x == y + 9 {\n        return x\n    }\n    if x == y - 9 {\n        return x\n    }\n    if x == y + 10 {\n        return x\n    }\n    if x == y - 10 {\n        return x\n    }\n    if x == y + 11 {\n        return x\n    }\n    if x == y - 11 {\n        return x\n    }\n    if x == y + 12 {\n        return x\n    }\n    if x == y - 12 {\n        return x\n    }\n    if x == y + 13 {\n        return x\n    }\n    if x == y - 13 {\n        return x\n    }\n    if x == y + 14 {\n        return x\n    }\n    if x == y - 14 {\n        return x\n    }\n    if x == y + 15 {\n        return x\n    }\n    if x == y - 15 {\n        return x\n    }\n    return -\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsd245x_w_test.go:114:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    max := x\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    \n    return max\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The number of even numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both even.\n    // So, we need to find the number of pairs of even numbers in the\n    // range [x, y] and then add the number of even numbers in the\n    // range [x, y] to that number.\n    \n    // We can use the formula for the number of pairs of numbers in the\n    // range [x, y] to get the number of even numbers in the range [x, y]\n    // as follows:\n    // n = (y - x + 1) / 2\n    //\n    // We can then use the formula for the number of even numbers in the\n    // range [x, y] to get the number of even numbers in the range [x, y]\n    // as follows:\n    // n = n * (n + 1) / 2\n    //\n    // We can then use the formula for the number of even numbers in the\n    // range [x, y] to get the number of even numbers in the range [x, y]\n    // as follows:\n    // n = n * (n + 1) / 2\n    //\n    // We can then use the formula for the number of even numbers in the\n    // range [x, y] to get the number of even numbers in the range [x, y]\n    // as follows:\n    // n = n * (n + 1) / 2\n    //\n    // We can then use the formula for the number of even numbers in the\n    // range [x, y] to get the number of even numbers in the range [x, y]\n    // as follows:\n    // n = n * (n + 1) / 2\n    //\n    // We can then use the formula for the number of even numbers in the\n    // range [x, y] to get the number of even numbers in the range [x, y]\n    // as follows:\n    // n = n * (n + 1) / 2\n    //\n    // We can then use the formula for the number of even numbers in the\n    // range\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmped6y5yiz_test.go:59:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // This is the base case.\n    if x == y {\n        return x\n    }\n    \n    // This is the recursive case.\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    } else {\n        return choose_num(x/2, y) + x/2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160378 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722c, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:16 +0xce fp=0xc020160388 sp=0xc020160380 pc=0x50a6ce\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc0201603b8 sp=0xc020160388 pc=0x50a657\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc0201603e8 sp=0xc0201603b8 pc=0x50a657\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc020160418 sp=0xc0201603e8 pc=0x50a657\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc020160448 sp=0xc020160418 pc=0x50a657\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc020160478 sp=0xc020160448 pc=0x50a657\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc0201604a8 sp=0xc020160478 pc=0x50a657\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc0201604d8 sp=0xc0201604a8 pc=0x50a657\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc020160508 sp=0xc0201604d8 pc=0x50a657\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc020160538 sp=0xc020160508 pc=0x50a657\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc020160568 sp=0xc020160538 pc=0x50a657\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpv61l9qjm_test.go:28 +0x57 fp=0xc020160598 sp=0xc020160568",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    \n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return (x + y) / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // If x == y, then the function should return x.\n    if x == y {\n        return x\n    }\n    \n    // If x == y + 1, then the function should return x.\n    if x == y + 1 {\n        return x\n    }\n    \n    // If x == y - 1, then the function should return x.\n    if x == y - 1 {\n        return x\n    }\n    \n    // If x > y + 1, then the function should return y + 1.\n    if x > y + 1 {\n        return y + 1\n    }\n    \n    // If x > y - 1, then the function should return y - 1.\n    if x > y - 1 {\n        return y - 1\n    }\n    \n    // If x > y, then the function should return y.\n    if x > y {\n        return y\n    }\n    \n    // If x < y, then the function should return -1.\n    if x < y {\n        return -1\n    }\n    \n    // If x == y, then the function should return x.\n    if x == y {\n        return x\n    }\n    \n    // If x == y + 1, then the function should return x.\n    if x == y + 1 {\n        return x\n    }\n    \n    // If x == y - 1, then the function should return x.\n    if x == y - 1 {\n        return x\n    }\n    \n    // If x < y + 1, then the function should return y + 1.\n    if x < y + 1 {\n        return y + 1\n    }\n    \n    // If x < y - 1, then the function should return y - 1.\n    if x < y - 1 {\n        return y - 1\n    }\n    \n    // If x < y, then the function should return y.\n    if x < y {\n        return y\n    }\n    \n    // If x == y, then the function should return x.\n    if x == y {\n        return x\n    }\n    \n    // If x == y + 1, then the\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp99kc16ar_test.go:92:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    max := x\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    \n    return max\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp2vu_kwc0_test.go:51: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x/2, y) + choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722c, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:16 +0x114 fp=0xc020160398 sp=0xc020160390 pc=0x50a714\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc0201603d0 sp=0xc020160398 pc=0x50a66a\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc020160408 sp=0xc0201603d0 pc=0x50a66a\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc020160440 sp=0xc020160408 pc=0x50a66a\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc020160478 sp=0xc020160440 pc=0x50a66a\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc0201604b0 sp=0xc020160478 pc=0x50a66a\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc0201604e8 sp=0xc0201604b0 pc=0x50a66a\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc020160520 sp=0xc0201604e8 pc=0x50a66a\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc020160558 sp=0xc020160520 pc=0x50a66a\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc020160590 sp=0xc020160558 pc=0x50a66a\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc0201605c8 sp=0xc020160590 pc=0x50a66a\ncommand-line-arguments_test.choose_num(0x0, 0xf, 0x0)\n\t/tmp/tmpxhpy5660_test.go:27 +0x6a fp=0xc020160600 sp=0xc0201605c8",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    max := x\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    \n    return max\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpz1jk8xgj_test.go:51: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x%2 == 0 {\n        return x\n    }\n    \n    if y%2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpofjkb5qb_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x == y + 2 {\n        return x\n    }\n    if x == y + 3 {\n        return x\n    }\n    if x == y + 4 {\n        return x\n    }\n    if x == y + 5 {\n        return x\n    }\n    if x == y + 6 {\n        return x\n    }\n    if x == y + 7 {\n        return x\n    }\n    if x == y + 8 {\n        return x\n    }\n    if x == y + 9 {\n        return x\n    }\n    if x == y + 10 {\n        return x\n    }\n    if x == y + 11 {\n        return x\n    }\n    if x == y + 12 {\n        return x\n    }\n    if x == y + 13 {\n        return x\n    }\n    if x == y + 14 {\n        return x\n    }\n    if x == y + 15 {\n        return x\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv8zev2ct_test.go:94: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv8zev2ct_test.go:94: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv8zev2ct_test.go:94: expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv8zev2ct_test.go:94: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x > y + 1 {\n        return -1\n    }\n    if x > y + 2 {\n        return -1\n    }\n    if x > y + 3 {\n        return -1\n    }\n    if x > y + 4 {\n        return -1\n    }\n    if x > y + 5 {\n        return -1\n    }\n    if x > y + 6 {\n        return -1\n    }\n    if x > y + 7 {\n        return -1\n    }\n    if x > y + 8 {\n        return -1\n    }\n    if x > y + 9 {\n        return -1\n    }\n    if x > y + 10 {\n        return -1\n    }\n    if x > y + 11 {\n        return -1\n    }\n    if x > y + 12 {\n        return -1\n    }\n    if x > y + 13 {\n        return -1\n    }\n    if x > y + 14 {\n        return -1\n    }\n    if x > y + 15 {\n        return -1\n    }\n    if x > y + 16 {\n        return -1\n    }\n    if x > y + 17 {\n        return -1\n    }\n    if x > y + 18 {\n        return -1\n    }\n    if x > y + 19 {\n        return -1\n    }\n    if x > y + 20 {\n        return -1\n    }\n    if x > y + 21 {\n        return -1\n    }\n    if x > y + 22 {\n        return -1\n    }\n    if x > y + 23 {\n        return -1\n    }\n    if x > y + 24 {\n        return -1\n    }\n    if x > y + 25 {\n        return -1\n    }\n    if x > y + 26 {\n        \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwga4eb4i_test.go:109:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    max := x\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpvt8_5gnz_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    max := x\n    for i := x + 1; i <= y; i++ {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    \n    return max\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpojsn_qlt_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    // We'll use a map to store the numbers that are in the range [x, y]\n    // inclusive.\n    num_map := make(map[int]bool)\n    \n    // We'll use a slice to store the even numbers that are in the range\n    // [x, y] inclusive.\n    even_num_list := make([]int, 0)\n    \n    // We'll use a slice to store the odd numbers that are in the range\n    // [x, y] inclusive.\n    odd_num_list := make([]int, 0)\n    \n    // We'll use a slice to store the even numbers that are in the range\n    // [x, y] inclusive.\n    odd_num_list := make([]int, 0)\n    \n    // We'll use a slice to store the even numbers that are in the range\n    // [x, y] inclusive.\n    even_num_list := make([]int, 0)\n    \n    // We'll use a slice to store the odd numbers that are in the range\n    // [x, y] inclusive.\n    odd_num_list := make([]int, 0)\n    \n    // We'll use a slice to store the even numbers that are in the range\n    // [x, y] inclusive.\n    even_num_list := make([]int, 0)\n    \n    // We'll use a slice to store the odd numbers that are in the range\n    // [x, y] inclusive.\n    odd_num_list := make([]int, 0)\n    \n    // We'll use a slice to store the even numbers that are in the range\n    // [x, y] inclusive.\n    even_num_list := make([]int, 0)\n    \n    // We'll use a slice to store the odd numbers that are in the range\n    // [x, y] inclusive.\n    odd_num_list := make([]int, 0)\n    \n    // We'll use a slice to store the even numbers that are in the range\n    // [x, y] inclusive.\n    even_num_list := make([]int, 0)\n    \n    //\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplsj_e7on_test.go:66:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The number of even numbers in the range [x, y] is the sum of\n    // numbers in the range [x, y] divided by 2.\n    sum := 0\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    \n    return sum / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpm2vqvsi5_test.go:53: expected '%!s(int=14)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpm2vqvsi5_test.go:53: expected '%!s(int=12354)', got '%!s(int=19080617)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpm2vqvsi5_test.go:53: expected '%!s(int=28)', got '%!s(int=102)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpm2vqvsi5_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpm2vqvsi5_test.go:53: expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    // The number of even numbers in the range [x, y] is equal to the\n    // number of numbers in the range [0, y - x] minus the number of\n    // numbers in the range [x, y]\n    num_of_even_numbers := (y - x) / 2\n    num_of_odd_numbers := (y - x) - num_of_even_numbers\n    \n    // The number of odd numbers in the range [0, y - x] is equal to the\n    // number of numbers in the range [0, y - x] minus the number of\n    // numbers in the range [x, y]\n    num_of_odd_numbers -= (y - x) / 2\n    \n    // The number of numbers in the range [x, y] is equal to the number\n    // of numbers in the range [0, y - x] minus the number of numbers in\n    // the range [x, y]\n    num_of_numbers := (y - x) - num_of_odd_numbers\n    \n    // The number of even numbers in the range [0, y - x] is equal to the\n    // number of numbers in the range [0, y - x] minus the number of\n    // numbers in the range [x, y]\n    num_of_even_numbers -= (y - x) / 2\n    \n    // The number of odd numbers in the range [0, y - x] is equal to the\n    // number of numbers in the range [0, y - x] minus the number of\n    // numbers in the range [x, y]\n    num_of_odd_numbers -= (y - x) / 2\n    \n    // The number of numbers in the range [0, y - x] is equal to the\n    // number of numbers in the range [0, y - x] minus the number of\n    // numbers in the range [x, y]\n    num_of_numbers -= (y - x) / 2\n    \n    // The number of even numbers in the range [0, y - x] is equal to the\n    // number of numbers in the\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpq5fm8615_test.go:54:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return (x + y) / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x%2 == 0 {\n        return x\n    }\n    \n    if y%2 == 0 {\n        return y\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        return -1\n    }\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpz0kvrxaf_test.go:140:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // We need to find the biggest even number in the range [x, y]\n    // inclusive.\n    //\n    // We can do this by using the formula:\n    //\n    //   n = 2 * (x + y) - 1\n    //\n    // where n is the biggest even number in the range [x, y] inclusive.\n    //\n    // We can also do this by using the formula:\n    //\n    //   n = 2 * (x + y) - 2\n    //\n    // where n is the biggest even number in the range [x, y] inclusive.\n    //\n    // We can also do this by using the formula:\n    //\n    //   n = 2 * (x + y)\n    //\n    // where n is the biggest even number in the range [x, y] inclusive.\n    //\n    // We can also do this by using the formula:\n    //\n    //   n = 2 * (x + y) + 1\n    //\n    // where n is the biggest even number in the range [x, y] inclusive.\n    //\n    // We can also do this by using the formula:\n    //\n    //   n = 2 * (x + y) + 2\n    //\n    // where n is the biggest even number in the range [x, y] inclusive.\n    //\n    // We can also do this by using the formula:\n    //\n    //   n = 2 * (x + y) + 3\n    //\n    // where n is the biggest even number in the range [x, y] inclusive.\n    //\n    // We can also do this by using the formula:\n    //\n    //   n = 2 * (x + y) + 4\n    //\n    // where n is the biggest even number in the range [x, y] inclusive.\n    //\n    // We can also do this by using the formula:\n    //\n    //   n = 2 * (x + y) + 5\n    //\n    // where n is the biggest even number in the range [x, y] inclusive.\n    //\n    // We can also do this by using the formula:\n    //\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7gwisc44_test.go:74:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x > y {\n        return -1\n    }\n    if x > y + 1 {\n        return -1\n    }\n    if x > y + 2 {\n        return -1\n    }\n    if x > y + 3 {\n        return -1\n    }\n    if x > y + 4 {\n        return -1\n    }\n    if x > y + 5 {\n        return -1\n    }\n    if x > y + 6 {\n        return -1\n    }\n    if x > y + 7 {\n        return -1\n    }\n    if x > y + 8 {\n        return -1\n    }\n    if x > y + 9 {\n        return -1\n    }\n    if x > y + 10 {\n        return -1\n    }\n    if x > y + 11 {\n        return -1\n    }\n    if x > y + 12 {\n        return -1\n    }\n    if x > y + 13 {\n        return -1\n    }\n    if x > y + 14 {\n        return -1\n    }\n    if x > y + 15 {\n        return -1\n    }\n    if x > y + 16 {\n        return -1\n    }\n    if x > y + 17 {\n        return -1\n    }\n    if x > y + 18 {\n        return -1\n    }\n    if x > y + 19 {\n        return -1\n    }\n    if x > y + 20 {\n        return -1\n    }\n    if x > y + 21 {\n        return -1\n    }\n    if x > y + 22 {\n        return -1\n    }\n    if x > y + 23 {\n        return -1\n    }\n    if x > y + 24 {\n        return -1\n    }\n    if x > y + 25 {\n        return -\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmi0didy5_test.go:109:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return (x + y) / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The number of even numbers in the range [x, y] inclusive is\n    // the number of integers in the range [x, y] inclusive that are\n    // divisible by 2.\n    //\n    // The number of integers in the range [x, y] inclusive that are\n    // divisible by 2 is the number of integers in the range [x, y]\n    // inclusive that are greater than x and less than y that are\n    // divisible by 2.\n    //\n    // The number of integers in the range [x, y] inclusive that are\n    // greater than x and less than y that are divisible by 2 is\n    // (y - x + 1) / 2.\n    //\n    // The number of integers in the range [x, y] inclusive that are\n    // greater than x and less than y that are divisible by 2 is\n    // (y - x + 1) / 2 - x + 1.\n    //\n    // The number of integers in the range [x, y] inclusive that are\n    // greater than x and less than y that are divisible by 2 is\n    // (y - x + 1) / 2 - x + 1 - x.\n    //\n    // The number of integers in the range [x, y] inclusive that are\n    // greater than x and less than y that are divisible by 2 is\n    // (y - x + 1) / 2 - x + 1 - x - 1.\n    //\n    // The number of integers in the range [x, y] inclusive that are\n    // greater than x and less than y that are divisible by 2 is\n    // (y - x + 1) / 2 - x + 1 - x - 1 - 1.\n    //\n    // The number of integers in the range [x, y] inclusive that are\n    // greater than x and less than y that are divisible by 2 is\n    // (y - x + 1) / 2 - x + 1 - x - 1 - 1 - 1.\n    //\n    // The number of integers in the range [x, y] inclusive that are\n    // greater than x and less than y that are divisible by 2 is\n    // (\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp34sze7d4_test.go:57:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // We'll use a binary search to find the biggest even integer number\n    // that is in the range [x, y] inclusive.\n    \n    // First, we'll find the midpoint of the range [x, y]\n    mid := (x + y) / 2\n    \n    // Then, we'll check if the midpoint is even or odd\n    if mid % 2 == 0 {\n        // If the midpoint is even, then we'll check if the midpoint\n        // is in the range [x, y]\n        if mid >= x && mid <= y {\n            return mid\n        } else {\n            // If the midpoint is not in the range [x, y], then we'll\n            // return the midpoint - 1\n            return mid - 1\n        }\n    } else {\n        // If the midpoint is odd, then we'll check if the midpoint\n        // is in the range [x, y]\n        if mid >= x && mid <= y {\n            return mid\n        } else {\n            // If the midpoint is not in the range [x, y], then we'll\n            // return the midpoint + 1\n            return mid + 1\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp3_u1_d24_test.go:71: expected '%!s(int=14)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp3_u1_d24_test.go:71: expected '%!s(int=12354)', got '%!s(int=6193)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp3_u1_d24_test.go:71: expected '%!s(int=28)', got '%!s(int=17)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp3_u1_d24_test.go:71: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == 1 {\n        return 2\n    }\n    \n    if x == 2 {\n        return 2\n    }\n    \n    if x == 3 {\n        return 4\n    }\n    \n    if x == 4 {\n        return 4\n    }\n    \n    if x == 5 {\n        return 6\n    }\n    \n    if x == 6 {\n        return 6\n    }\n    \n    if x == 7 {\n        return 8\n    }\n    \n    if x == 8 {\n        return 8\n    }\n    \n    if x == 9 {\n        return 10\n    }\n    \n    if x == 10 {\n        return 10\n    }\n    \n    if x == 11 {\n        return 12\n    }\n    \n    if x == 12 {\n        return 12\n    }\n    \n    if x == 13 {\n        return 14\n    }\n    \n    if x == 14 {\n        return 14\n    }\n    \n    if x == 15 {\n        return 16\n    }\n    \n    if x == 16 {\n        return 16\n    }\n    \n    if x == 17 {\n        return 18\n    }\n    \n    if x == 18 {\n        return 18\n    }\n    \n    if x == 19 {\n        return 20\n    }\n    \n    if x == 20 {\n        return 20\n    }\n    \n    if x == 21 {\n        return 22\n    }\n    \n    if x == 22 {\n        return 22\n    }\n    \n    if x == 23 {\n        return 24\n    }\n    \n    if x == 24 {\n        return 24\n    }\n    \n    if x == 25 {\n        return 26\n    }\n    \n    if x == 26 {\n        return 26\n    }\n    \n    if x == 27 {\n        return 28\n    }\n    \n    if x == 28 {\n        return 28\n    }\n    \n    if x == 29 {\n        return 30\n    }\n    \n    if x == 30 {\n        return 30\n    }\n    \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpbzfkqsfm_test.go:145:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpdbwsv5h6_test.go:52: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpdbwsv5h6_test.go:52: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpdbwsv5h6_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return (x + y) / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == 1 {\n        return 2\n    }\n    \n    if x == 2 {\n        return 4\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y-x == 1 {\n        return x + 2\n    }\n    \n    if y-x == 2 {\n        return x + 4\n    }\n    \n    if y-x == 3 {\n        return x + 6\n    }\n    \n    if y-x == 4 {\n        return x + 8\n    }\n    \n    if y-x == 5 {\n        return x + 10\n    }\n    \n    if y-x == 6 {\n        return x + 12\n    }\n    \n    if y-x == 7 {\n        return x + 14\n    }\n    \n    if y-x == 8 {\n        return x + 16\n    }\n    \n    if y-x == 9 {\n        return x + 18\n    }\n    \n    if y-x == 10 {\n        return x + 20\n    }\n    \n    if y-x == 11 {\n        return x + 22\n    }\n    \n    if y-x == 12 {\n        return x + 24\n    }\n    \n    if y-x == 13 {\n        return x + 26\n    }\n    \n    if y-x == 14 {\n        return x + 28\n    }\n    \n    if y-x == 15 {\n        return x + 30\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpx574qrir_test.go:120: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpx574qrir_test.go:120: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpx574qrir_test.go:120: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpx574qrir_test.go:120: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // This is the number of even numbers in the range [x, y]\n    num_of_even_numbers := (y - x + 1) / 2\n    \n    // This is the number of odd numbers in the range [x, y]\n    num_of_odd_numbers := (y - x) / 2\n    \n    // This is the number of odd numbers in the range [x, y]\n    num_of_odd_numbers_in_range := num_of_odd_numbers - num_of_even_numbers\n    \n    // This is the number of even numbers in the range [x, y]\n    num_of_even_numbers_in_range := num_of_even_numbers + num_of_odd_numbers_in_range\n    \n    // This is the number of even numbers in the range [x, y]\n    num_of_even_numbers_in_range_inclusive := num_of_even_numbers_in_range + 1\n    \n    // This is the number of odd numbers in the range [x, y]\n    num_of_odd_numbers_in_range_inclusive := num_of_odd_numbers_in_range + 1\n    \n    // This is the number of odd numbers in the range [x, y]\n    num_of_odd_numbers_in_range_inclusive_inclusive := num_of_odd_numbers_in_range_inclusive + 1\n    \n    // This is the number of even numbers in the range [x, y]\n    num_of_even_numbers_in_range_inclusive_inclusive := num_of_even_numbers_in_range_inclusive + 1\n    \n    // This is the number of odd numbers in the range [x, y]\n    num_of_odd_numbers_in_range_inclusive_inclusive_inclusive := num_of_odd_numbers_in_range_inclusive_inclusive + 1\n    \n    // This is the number of even numbers in the range [x, y]\n    num_of_even_\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmphbl7p2wn_test.go:50:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The number of even numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both even.\n    // The number of odd numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both odd.\n    // The number of numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both even and\n    // odd.\n    //\n    // The number of even numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both even.\n    // The number of odd numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both odd.\n    // The number of numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both even and\n    // odd.\n    //\n    // The number of even numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both even.\n    // The number of odd numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both odd.\n    // The number of numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both even and\n    // odd.\n    //\n    // The number of even numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both even.\n    // The number of odd numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both odd.\n    // The number of numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both even and\n    // odd.\n    //\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvq96uesq_test.go:53:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpd1vi73e4_test.go:58: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpd1vi73e4_test.go:58: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpd1vi73e4_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // We'll use a map to store the numbers that are in the range [x, y]\n    // inclusive.\n    m := make(map[int]bool)\n    \n    // We'll start with x and y.\n    for x <= y {\n        m[x] = true\n        x += 2\n    }\n    \n    // We'll iterate over the map and find the biggest even number that is\n    // in the range [x, y] inclusive.\n    for k, _ := range m {\n        if k%2 == 0 {\n            return k\n        }\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpu9juf3fv_test.go:62: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpu9juf3fv_test.go:62: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpu9juf3fv_test.go:62: expected '%!s(int=28)', got '%!s(int=24)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The number of even numbers in the range [x, y] is the number of\n    // pairs of numbers in the range [x, y] that are both even.\n    // The number of pairs is the number of numbers in the range [x, y]\n    // that are even.\n    // The number of even numbers in the range [x, y] is the number of\n    // numbers in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the range [x, y] is the number of numbers\n    // in the range [x, y] that are even.\n    // The number of numbers in the\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpas03b3lv_test.go:50:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x%2 == 0 {\n        return x\n    }\n    \n    if y%2 == 0 {\n        return y\n    }\n    \n    return (x+y)/2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv3agbxgp_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpv3agbxgp_test.go:56: expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv3agbxgp_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpv3agbxgp_test.go:56: expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv3agbxgp_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpv3agbxgp_test.go:56: expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv3agbxgp_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x > y + 1 {\n        return -1\n    }\n    if x > y + 2 {\n        return -1\n    }\n    if y > x + 1 {\n        return -1\n    }\n    if y > x + 2 {\n        return -1\n    }\n    if x > y + 3 {\n        return -1\n    }\n    if y > x + 3 {\n        return -1\n    }\n    if x > y + 4 {\n        return -1\n    }\n    if y > x + 4 {\n        return -1\n    }\n    if x > y + 5 {\n        return -1\n    }\n    if y > x + 5 {\n        return -1\n    }\n    if x > y + 6 {\n        return -1\n    }\n    if y > x + 6 {\n        return -1\n    }\n    if x > y + 7 {\n        return -1\n    }\n    if y > x + 7 {\n        return -1\n    }\n    if x > y + 8 {\n        return -1\n    }\n    if y > x + 8 {\n        return -1\n    }\n    if x > y + 9 {\n        return -1\n    }\n    if y > x + 9 {\n        return -1\n    }\n    if x > y + 10 {\n        return -1\n    }\n    if y > x + 10 {\n        return -1\n    }\n    if x > y + 11 {\n        return -1\n    }\n    if y > x + 11 {\n        return -1\n    }\n    if x > y + 12 {\n        return -1\n    }\n    if y > x + 12 {\n        return -1\n    }\n    if x > y + 13 {\n        return -1\n    }\n    if y > x + 13 {\n        \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2ol6yk0s_test.go:109:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x%2 == 0 {\n        return x\n    }\n    \n    if y%2 == 0 {\n        return y\n    }\n    \n    return (x+y)/2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp21bp74wn_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp21bp74wn_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp21bp74wn_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // If x == y, then the answer is x.\n    if x == y {\n        return x\n    }\n    \n    // If x == y + 1, then the answer is y.\n    if x == y + 1 {\n        return y\n    }\n    \n    // If x == y - 1, then the answer is y - 1.\n    if x == y - 1 {\n        return y - 1\n    }\n    \n    // If x > y + 1, then the answer is y + 1.\n    if x > y + 1 {\n        return y + 1\n    }\n    \n    // If x > y - 1, then the answer is y - 1.\n    if x > y - 1 {\n        return y - 1\n    }\n    \n    // If x > y, then the answer is y.\n    if x > y {\n        return y\n    }\n    \n    // If x < y, then the answer is x.\n    if x < y {\n        return x\n    }\n    \n    // If x < y + 1, then the answer is x.\n    if x < y + 1 {\n        return x\n    }\n    \n    // If x < y - 1, then the answer is x.\n    if x < y - 1 {\n        return x\n    }\n    \n    // If x < y, then the answer is x.\n    if x < y {\n        return x\n    }\n    \n    // If x == y + 1, then the answer is y.\n    if x == y + 1 {\n        return y\n    }\n    \n    // If x == y - 1, then the answer is y - 1.\n    if x == y - 1 {\n        return y - 1\n    }\n    \n    // If x == y, then the answer is y.\n    if x == y {\n        return y\n    }\n    \n    // If x == y + 1, then the answer is y.\n    if x == y + 1 {\n        return y\n    }\n    \n    // If x == y - 1, then the answer is y - 1.\n    if x == y\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374766,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpaod3dig1_test.go:93:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x%2 == 0 {\n        return x\n    }\n    \n    if y%2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmppv8xm7ft_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmppv8xm7ft_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmppv8xm7ft_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp1zr5vno1_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x == y + 2 {\n        return x\n    }\n    if x == y + 3 {\n        return x\n    }\n    if x == y + 4 {\n        return x\n    }\n    if x == y + 5 {\n        return x\n    }\n    if x == y + 6 {\n        return x\n    }\n    if x == y + 7 {\n        return x\n    }\n    if x == y + 8 {\n        return x\n    }\n    if x == y + 9 {\n        return x\n    }\n    if x == y + 10 {\n        return x\n    }\n    if x == y + 11 {\n        return x\n    }\n    if x == y + 12 {\n        return x\n    }\n    if x == y + 13 {\n        return x\n    }\n    if x == y + 14 {\n        return x\n    }\n    if x == y + 15 {\n        return x\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv8zev2ct_test.go:94: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv8zev2ct_test.go:94: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv8zev2ct_test.go:94: expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv8zev2ct_test.go:94: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x % 2 == 1 {\n        return x + 1\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp88u4ho48_test.go:58: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp88u4ho48_test.go:58: expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp88u4ho48_test.go:58: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp88u4ho48_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpcu2ghtov_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpg8hj2xrp_test.go:52: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpg8hj2xrp_test.go:52: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpg8hj2xrp_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return (x + y) / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    // The range [x, y] is divided into two parts:\n    // [x, x+1) and [x+1, y]\n    // We need to find the biggest even number in [x, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers in [x, x+1)\n    // and then checking the numbers in [x+1, y]\n    // We can do this by checking the numbers\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2e1acgor_test.go:52:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    \n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The number of even numbers in the range [x, y] is the sum of\n    // the numbers in the range [x, y] divided by 2.\n    sum := 0\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    \n    return sum / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpashwdi6d_test.go:53: expected '%!s(int=14)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpashwdi6d_test.go:53: expected '%!s(int=12354)', got '%!s(int=19080617)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpashwdi6d_test.go:53: expected '%!s(int=28)', got '%!s(int=102)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpashwdi6d_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpashwdi6d_test.go:53: expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The following code is a bit tricky. We use the formula\n    // (x + y) / 2 to compute the number of even numbers in the range\n    // [x, y] inclusive.\n    //\n    // For example, if x = 12 and y = 15, then the formula is\n    // (12 + 15) / 2 = 14.\n    //\n    // The formula is also correct if x = 13 and y = 12.\n    //\n    // The formula is also correct if x = 13 and y = 13.\n    //\n    // The formula is also correct if x = 13 and y = 14.\n    //\n    // The formula is also correct if x = 13 and y = 15.\n    //\n    // The formula is also correct if x = 14 and y = 15.\n    //\n    // The formula is also correct if x = 14 and y = 14.\n    //\n    // The formula is also correct if x = 14 and y = 13.\n    //\n    // The formula is also correct if x = 14 and y = 12.\n    //\n    // The formula is also correct if x = 12 and y = 12.\n    //\n    // The formula is also correct if x = 12 and y = 13.\n    //\n    // The formula is also correct if x = 12 and y = 14.\n    //\n    // The formula is also correct if x = 12 and y = 15.\n    //\n    // The formula is also correct if x = 13 and y = 13.\n    //\n    // The formula is also correct if x = 13 and y = 14.\n    //\n    // The formula is also correct if x = 13 and y = 15.\n    //\n    // The formula is also correct if x = 14 and y = 14.\n    //\n    // The formula is also correct if x = 14 and y = 13.\n    //\n    // The formula is also correct if x = 14 and y = 12.\n    //\n    // The formula is also correct if x = 12 and y = 12.\n    //\n    // The formula is also correct if x = 12 and y = 13.\n    //\n    // The formula is also correct if x = 12 and\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmphlaenyzc_test.go:69:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 2 {\n        return x\n    }\n    if x == y - 2 {\n        return x\n    }\n    if x == y + 3 {\n        return x\n    }\n    if x == y - 3 {\n        return x\n    }\n    if x == y + 4 {\n        return x\n    }\n    if x == y - 4 {\n        return x\n    }\n    if x == y + 5 {\n        return x\n    }\n    if x == y - 5 {\n        return x\n    }\n    if x == y + 6 {\n        return x\n    }\n    if x == y - 6 {\n        return x\n    }\n    if x == y + 7 {\n        return x\n    }\n    if x == y - 7 {\n        return x\n    }\n    if x == y + 8 {\n        return x\n    }\n    if x == y - 8 {\n        return x\n    }\n    if x == y + 9 {\n        return x\n    }\n    if x == y - 9 {\n        return x\n    }\n    if x == y + 10 {\n        return x\n    }\n    if x == y - 10 {\n        return x\n    }\n    if x == y + 11 {\n        return x\n    }\n    if x == y - 11 {\n        return x\n    }\n    if x == y + 12 {\n        return x\n    }\n    if x == y - 12 {\n        return x\n    }\n    if x == y + 13 {\n        return x\n    }\n    if x == y - 13 {\n        return x\n    }\n    if x == y + 14 {\n        return x\n    }\n    if x == y - 14 {\n        return x\n    }\n    if x == y + 15 {\n        return x\n    }\n    if x == y - 15 {\n        return x\n    }\n    if x\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpa5tzu0q0_test.go:114:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x == y + 2 {\n        return x\n    }\n    if x == y + 3 {\n        return x\n    }\n    if x == y + 4 {\n        return x\n    }\n    if x == y + 5 {\n        return x\n    }\n    if x == y + 6 {\n        return x\n    }\n    if x == y + 7 {\n        return x\n    }\n    if x == y + 8 {\n        return x\n    }\n    if x == y + 9 {\n        return x\n    }\n    if x == y + 10 {\n        return x\n    }\n    if x == y + 11 {\n        return x\n    }\n    if x == y + 12 {\n        return x\n    }\n    if x == y + 13 {\n        return x\n    }\n    if x == y + 14 {\n        return x\n    }\n    if x == y + 15 {\n        return x\n    }\n    if x == y + 16 {\n        return x\n    }\n    if x == y + 17 {\n        return x\n    }\n    if x == y + 18 {\n        return x\n    }\n    if x == y + 19 {\n        return x\n    }\n    if x == y + 20 {\n        return x\n    }\n    if x == y + 21 {\n        return x\n    }\n    if x == y + 22 {\n        return x\n    }\n    if x == y + 23 {\n        return x\n    }\n    if x == y + 24 {\n        return x\n    }\n    if x == y + 25 {\n        return x\n    }\n    if x == y + 26 {\n        return x\n    }\n    if x == y + 27 {\n        return x\n    }\n    if x == y + 28 {\n        return x\n    }\n    if x == y + 29 {\n        return x\n    }\n    if x\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpscl_idgs_test.go:114:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x > y + 1 {\n        return -1\n    }\n    if x > y + 2 {\n        return -1\n    }\n    if x > y + 3 {\n        return -1\n    }\n    if x > y + 4 {\n        return -1\n    }\n    if x > y + 5 {\n        return -1\n    }\n    if x > y + 6 {\n        return -1\n    }\n    if x > y + 7 {\n        return -1\n    }\n    if x > y + 8 {\n        return -1\n    }\n    if x > y + 9 {\n        return -1\n    }\n    if x > y + 10 {\n        return -1\n    }\n    if x > y + 11 {\n        return -1\n    }\n    if x > y + 12 {\n        return -1\n    }\n    if x > y + 13 {\n        return -1\n    }\n    if x > y + 14 {\n        return -1\n    }\n    if x > y + 15 {\n        return -1\n    }\n    if x > y + 16 {\n        return -1\n    }\n    if x > y + 17 {\n        return -1\n    }\n    if x > y + 18 {\n        return -1\n    }\n    if x > y + 19 {\n        return -1\n    }\n    if x > y + 20 {\n        return -1\n    }\n    if x > y + 21 {\n        return -1\n    }\n    if x > y + 22 {\n        return -1\n    }\n    if x > y + 23 {\n        return -1\n    }\n    if x > y + 24 {\n        return -1\n    }\n    if x > y + 25 {\n        return -1\n    }\n    if x > y + 26 {\n        \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwga4eb4i_test.go:109:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return (x + y) / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The following code is a bit tricky. We need to find the biggest\n    // even integer number that is in the range [x, y] inclusive.\n    // The trick is that we can use the formula:\n    // 2^(n-1) <= x <= 2^n - 1\n    // 2^(n-1) <= y <= 2^n - 1\n    // 2^(n-1) <= 2^n - 1 - x <= 2^n - 1\n    // 2^(n-1) <= 2^n - 1 - y <= 2^n - 1\n    // 2^(n-1) <= 2^n - 2 - y <= 2^n - 1\n    // 2^(n-2) <= 2^n - 2 - y <= 2^n - 2\n    // 2^(n-2) <= 2^n - 3 - y <= 2^n - 2\n    // ...\n    // 2^(n-n) <= 2^n - n - y <= 2^n - 1\n    // 2^(n-n) <= 2^n - n - y <= 2^n - n\n    // 2^(n-n) <= 2^n - n - y <= 2^n - n - 1\n    // 2^(n-n) <= 2^n - n - y <= 2^n - n - 2\n    // 2^(n-n) <= 2^n - n - y <= 2^n - n - 3\n    // ...\n    // 2^(1) <= 2^n - n - y <= 2^n - 1\n    // 2^(1) <= 2^n - n - y <= 2^n - 2\n    // 2^(1) <= 2^n - n - y <= 2^n - 3\n    // ...\n    // 2^(0) <= 2^n - n - y <= 2^n - 1\n    // 2^(0) <= 2^n - n - y <= 2^n - 2\n    // 2^(0) <= 2^n - n - y <= 2^n - 3\n    // ...\n    // 2^(-1) >= 2^n - n - y >= 2\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0mpbnpci_test.go:47:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x == y + 2 {\n        return x\n    }\n    if x == y + 3 {\n        return x\n    }\n    if x == y + 4 {\n        return x\n    }\n    if x == y + 5 {\n        return x\n    }\n    if x == y + 6 {\n        return x\n    }\n    if x == y + 7 {\n        return x\n    }\n    if x == y + 8 {\n        return x\n    }\n    if x == y + 9 {\n        return x\n    }\n    if x == y + 10 {\n        return x\n    }\n    if x == y + 11 {\n        return x\n    }\n    if x == y + 12 {\n        return x\n    }\n    if x == y + 13 {\n        return x\n    }\n    if x == y + 14 {\n        return x\n    }\n    if x == y + 15 {\n        return x\n    }\n    if x == y + 16 {\n        return x\n    }\n    if x == y + 17 {\n        return x\n    }\n    if x == y + 18 {\n        return x\n    }\n    if x == y + 19 {\n        return x\n    }\n    if x == y + 20 {\n        return x\n    }\n    if x == y + 21 {\n        return x\n    }\n    if x == y + 22 {\n        return x\n    }\n    if x == y + 23 {\n        return x\n    }\n    if x == y + 24 {\n        return x\n    }\n    if x == y + 25 {\n        return x\n    }\n    if x == y + 26 {\n        return x\n    }\n    if x == y + 27 {\n        return x\n    }\n    if x == y + 28 {\n        return x\n    }\n    if x == y + 29 {\n        return x\n    }\n    if x\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpscl_idgs_test.go:114:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The number of even numbers in the range [x, y] is the number of\n    // factors of 2 in y - x + 1.\n    factors := 0\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            factors++\n        }\n    }\n    \n    return 2 * factors\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp1kqcw3f3_test.go:53: expected '%!s(int=14)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp1kqcw3f3_test.go:53: expected '%!s(int=12354)', got '%!s(int=12322)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp1kqcw3f3_test.go:53: expected '%!s(int=28)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp1kqcw3f3_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1kqcw3f3_test.go:53: expected '%!s(int=546)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return choose_num(x - 1, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpycdrgapf_test.go:55: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpycdrgapf_test.go:55: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpycdrgapf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 2\n    }\n    if x == 3 {\n        return 4\n    }\n    if x == 4 {\n        return 4\n    }\n    if x == 5 {\n        return 6\n    }\n    if x == 6 {\n        return 6\n    }\n    if x == 7 {\n        return 8\n    }\n    if x == 8 {\n        return 8\n    }\n    if x == 9 {\n        return 10\n    }\n    if x == 10 {\n        return 10\n    }\n    if x == 11 {\n        return 12\n    }\n    if x == 12 {\n        return 12\n    }\n    if x == 13 {\n        return 14\n    }\n    if x == 14 {\n        return 14\n    }\n    if x == 15 {\n        return 16\n    }\n    if x == 16 {\n        return 16\n    }\n    if x == 17 {\n        return 18\n    }\n    if x == 18 {\n        return 18\n    }\n    if x == 19 {\n        return 20\n    }\n    if x == 20 {\n        return 20\n    }\n    if x == 21 {\n        return 22\n    }\n    if x == 22 {\n        return 22\n    }\n    if x == 23 {\n        return 24\n    }\n    if x == 24 {\n        return 24\n    }\n    if x == 25 {\n        return 26\n    }\n    if x == 26 {\n        return 26\n    }\n    if x == 27 {\n        return 28\n    }\n    if x == 28 {\n        return 28\n    }\n    if x == 29 {\n        return 30\n    }\n    if x == 30 {\n        return 30\n    }\n    if x == 31 {\n        return 32\n    }\n    if x == 32 {\n        return 32\n    }\n    if x == 33 {\n        return 34\n    }\n    if x == 34 {\n        return 34\n    }\n    if x == 35 {\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg3i4v0_3_test.go:127:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y - 1 {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    if x > y + 1 {\n        return -1\n    }\n    \n    if x > y - 1 {\n        return -1\n    }\n    \n    if x > y + 2 {\n        return -1\n    }\n    \n    if x > y - 2 {\n        return -1\n    }\n    \n    if x > y + 3 {\n        return -1\n    }\n    \n    if x > y - 3 {\n        return -1\n    }\n    \n    if x > y + 4 {\n        return -1\n    }\n    \n    if x > y - 4 {\n        return -1\n    }\n    \n    if x > y + 5 {\n        return -1\n    }\n    \n    if x > y - 5 {\n        return -1\n    }\n    \n    if x > y + 6 {\n        return -1\n    }\n    \n    if x > y - 6 {\n        return -1\n    }\n    \n    if x > y + 7 {\n        return -1\n    }\n    \n    if x > y - 7 {\n        return -1\n    }\n    \n    if x > y + 8 {\n        return -1\n    }\n    \n    if x > y - 8 {\n        return -1\n    }\n    \n    if x > y + 9 {\n        return -1\n    }\n    \n    if x > y - 9 {\n        return -1\n    }\n    \n    if x > y + 10 {\n        return -1\n    }\n    \n    if x > y - 10 {\n        return -1\n    }\n    \n    if x > y + 11 {\n        return -1\n    }\n    \n    if x > y - 11 {\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_xacgyyq_test.go:126:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpaf7p_dmx_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpaf7p_dmx_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpaf7p_dmx_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpaf7p_dmx_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // If x == y, then return x\n    if x == y {\n        return x\n    }\n    \n    // If x is even, then return x\n    if x%2 == 0 {\n        return x\n    }\n    \n    // If y is even, then return y\n    if y%2 == 0 {\n        return y\n    }\n    \n    // If x is odd and y is even, then return x + y\n    if x%2 == 1 && y%2 == 0 {\n        return x + y\n    }\n    \n    // If x is odd and y is odd, then return x + y\n    if x%2 == 1 && y%2 == 1 {\n        return x + y\n    }\n    \n    // If x is odd and y is even, then return x + y\n    if x%2 == 1 && y%2 == 0 {\n        return x + y\n    }\n    \n    // If x is even and y is odd, then return x + y\n    if x%2 == 0 && y%2 == 1 {\n        return x + y\n    }\n    \n    // If x is even and y is even, then return x + y\n    if x%2 == 0 && y%2 == 0 {\n        return x + y\n    }\n    \n    // If x is odd and y is odd, then return x + y\n    if x%2 == 1 && y%2 == 1 {\n        return x + y\n    }\n    \n    // If x is odd and y is odd, then return x + y\n    if x%2 == 1 && y%2 == 1 {\n        return x + y\n    }\n    \n    // If x is odd and y is odd, then return x + y\n    if x%2 == 1 && y%2 == 1 {\n        return x + y\n    }\n    \n    // If x is odd and y is odd, then return x + y\n    if x%2 == 1 && y%2 == 1 {\n        return x + y\n    }\n    \n    // If x is odd and y is odd, then return x + y\n    if x%2 ==\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpciqfkicc_test.go:83:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // We can use the formula:\n    // choose(n, k) = choose(n-1, k-1) + choose(n-1, k)\n    // where choose(n, k) is the number of ways to choose k elements from a set of n elements.\n    // For example, choose(3, 2) = choose(2, 1) + choose(2, 2) = 2 + 2 = 4.\n    //\n    // The formula is recursive.\n    //\n    // The base case is when k = 0 or k = n.\n    //\n    // The base case is when k = 0.\n    //\n    // The base case is when n = 0.\n    //\n    // The base case is when n = k.\n    \n    // We need to use the formula:\n    // choose(n, k) = choose(n-1, k-1) + choose(n-1, k)\n    // where choose(n, k) is the number of ways to choose k elements from a set of n elements.\n    // For example, choose(3, 2) = choose(2, 1) + choose(2, 2) = 2 + 2 = 4.\n    //\n    // The formula is recursive.\n    //\n    // The base case is when k = 0 or k = n.\n    //\n    // The base case is when k = 0.\n    //\n    // The base case is when n = 0.\n    //\n    // The base case is when n = k.\n    \n    // We need to use the formula:\n    // choose(n, k) = choose(n-1, k-1) + choose(n-1, k)\n    // where choose(n, k) is the number of ways to choose k elements from a set of n elements.\n    // For example, choose(3, 2) = choose(2, 1) + choose(2, 2) = 2 + 2 = 4.\n    //\n    // The formula is recursive.\n    //\n    // The base case is when k = 0 or k = n.\n    //\n    // The base case is when k = 0.\n    //\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpa0w9u_22_test.go:63:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    \n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    \n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x > y + 1 {\n        return -1\n    }\n    if x > y + 2 {\n        return -1\n    }\n    if x > y + 3 {\n        return -1\n    }\n    if x > y + 4 {\n        return -1\n    }\n    if x > y + 5 {\n        return -1\n    }\n    if x > y + 6 {\n        return -1\n    }\n    if x > y + 7 {\n        return -1\n    }\n    if x > y + 8 {\n        return -1\n    }\n    if x > y + 9 {\n        return -1\n    }\n    if x > y + 10 {\n        return -1\n    }\n    if x > y + 11 {\n        return -1\n    }\n    if x > y + 12 {\n        return -1\n    }\n    if x > y + 13 {\n        return -1\n    }\n    if x > y + 14 {\n        return -1\n    }\n    if x > y + 15 {\n        return -1\n    }\n    if x > y + 16 {\n        return -1\n    }\n    if x > y + 17 {\n        return -1\n    }\n    if x > y + 18 {\n        return -1\n    }\n    if x > y + 19 {\n        return -1\n    }\n    if x > y + 20 {\n        return -1\n    }\n    if x > y + 21 {\n        return -1\n    }\n    if x > y + 22 {\n        return -1\n    }\n    if x > y + 23 {\n        return -1\n    }\n    if x > y + 24 {\n        return -1\n    }\n    if x > y + 25 {\n        return -1\n    }\n    if x > y + 26 {\n        \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp44qfhbpm_test.go:109:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y/2)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpdviiizx5_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    if x < y {\n        return -1\n    }\n    \n    if x - y < y {\n        return -1\n    }\n    \n    if x - y == y {\n        return y\n    }\n    \n    if x - y == y + 1 {\n        return y + 1\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpofcg1z7r_test.go:76: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpofcg1z7r_test.go:76: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpofcg1z7r_test.go:76: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x == y + 2 {\n        return x\n    }\n    if x == y + 3 {\n        return x\n    }\n    if x == y + 4 {\n        return x\n    }\n    if x == y + 5 {\n        return x\n    }\n    if x == y + 6 {\n        return x\n    }\n    if x == y + 7 {\n        return x\n    }\n    if x == y + 8 {\n        return x\n    }\n    if x == y + 9 {\n        return x\n    }\n    if x == y + 10 {\n        return x\n    }\n    if x == y + 11 {\n        return x\n    }\n    if x == y + 12 {\n        return x\n    }\n    if x == y + 13 {\n        return x\n    }\n    if x == y + 14 {\n        return x\n    }\n    if x == y + 15 {\n        return x\n    }\n    if x == y + 16 {\n        return x\n    }\n    if x == y + 17 {\n        return x\n    }\n    if x == y + 18 {\n        return x\n    }\n    if x == y + 19 {\n        return x\n    }\n    if x == y + 20 {\n        return x\n    }\n    if x == y + 21 {\n        return x\n    }\n    if x == y + 22 {\n        return x\n    }\n    if x == y + 23 {\n        return x\n    }\n    if x == y + 24 {\n        return x\n    }\n    if x == y + 25 {\n        return x\n    }\n    if x == y + 26 {\n        return x\n    }\n    if x == y + 27 {\n        return x\n    }\n    if x == y + 28 {\n        return x\n    }\n    if x == y + 29 {\n        return x\n    }\n    if x\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpscl_idgs_test.go:114:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x%2 == 0 {\n        return x\n    }\n    \n    if y%2 == 0 {\n        return y\n    }\n    \n    return (x+y)/2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374767,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp21bp74wn_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp21bp74wn_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp21bp74wn_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x%2 == 0 {\n        return x\n    }\n    if y%2 == 0 {\n        return y\n    }\n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwr9hpd7n_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    // The following is a simple brute-force approach.\n    // It is not efficient.\n    //\n    // for i := x; i <= y; i++ {\n    //     if i % 2 == 0 {\n    //         return i\n    //     }\n    // }\n    \n    // The following is a simple brute-force approach.\n    // It is not efficient.\n    //\n    // for i := x; i <= y; i++ {\n    //     if i % 2 == 0 {\n    //         return i\n    //     }\n    // }\n    \n    // The following is a simple brute-force approach.\n    // It is not efficient.\n    //\n    // for i := x; i <= y; i++ {\n    //     if i % 2 == 0 {\n    //         return i\n    //     }\n    // }\n    \n    // The following is a simple brute-force approach.\n    // It is not efficient.\n    //\n    // for i := x; i <= y; i++ {\n    //     if i % 2 == 0 {\n    //         return i\n    //     }\n    // }\n    \n    // The following is a simple brute-force approach.\n    // It is not efficient.\n    //\n    // for i := x; i <= y; i++ {\n    //     if i % 2 == 0 {\n    //         return i\n    //     }\n    // }\n    \n    // The following is a simple brute-force approach.\n    // It is not efficient.\n    //\n    // for i := x; i <= y; i++ {\n    //     if i % 2 == 0 {\n    //         return i\n    //     }\n    // }\n    \n    // The following is a simple brute-force approach.\n    // It is not efficient.\n    //\n    // for i := x; i <= y; i++ {\n    //     if i % 2 == 0 {\n    //         return i\n    //     }\n    // }\n    \n    // The following is a simple brute-force approach.\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp55zlxjp5_test.go:88:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return (x + y) / 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpuinf_yuj_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    \n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    // The following is a simple implementation of the algorithm.\n    // It uses a binary search to find the biggest even number in the range\n    // [x, y] inclusive.\n    \n    // The binary search algorithm is as follows:\n    // 1. Start with the middle of the range [x, y] (i.e., x + (y - x) / 2).\n    // 2. If the middle number is even, then return it.\n    // 3. If the middle number is odd, then divide the range in half and\n    //    recursively call choose_num() with the lower half of the range.\n    // 4. If the middle number is greater than y, then return -1.\n    // 5. If the middle number is less than x, then return -1.\n    \n    // The binary search stops when the middle number is either x or y.\n    \n    // The following implementation uses a while loop instead of recursion.\n    \n    // The binary search algorithm is as follows:\n    // 1. Start with the middle of the range [x, y] (i.e., x + (y - x) / 2).\n    // 2. If the middle number is even, then return it.\n    // 3. If the middle number is odd, then divide the range in half and\n    //    recursively call choose_num() with the lower half of the range.\n    // 4. If the middle number is greater than y, then return -1.\n    // 5. If the middle number is less than x, then return -1.\n    \n    // The binary search stops when the middle number is either x or y.\n    \n    // The following implementation uses a for loop instead of recursion.\n    \n    // The binary search algorithm is as follows:\n    // 1. Start with the middle of the range [x, y] (i.e., x + (y - x) / 2).\n    // 2. If the middle number is even, then return it.\n    // 3. If the middle number is odd, then divide the range in half and\n    //    recursively call choose_num() with the\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_7db6nmh_test.go:57:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 2\n    }\n    if x == 3 {\n        return 4\n    }\n    if x == 4 {\n        return 4\n    }\n    if x == 5 {\n        return 6\n    }\n    if x == 6 {\n        return 6\n    }\n    if x == 7 {\n        return 8\n    }\n    if x == 8 {\n        return 8\n    }\n    if x == 9 {\n        return 10\n    }\n    if x == 10 {\n        return 10\n    }\n    if x == 11 {\n        return 12\n    }\n    if x == 12 {\n        return 12\n    }\n    if x == 13 {\n        return 14\n    }\n    if x == 14 {\n        return 14\n    }\n    if x == 15 {\n        return 16\n    }\n    if x == 16 {\n        return 16\n    }\n    if x == 17 {\n        return 18\n    }\n    if x == 18 {\n        return 18\n    }\n    if x == 19 {\n        return 20\n    }\n    if x == 20 {\n        return 20\n    }\n    if x == 21 {\n        return 22\n    }\n    if x == 22 {\n        return 22\n    }\n    if x == 23 {\n        return 24\n    }\n    if x == 24 {\n        return 24\n    }\n    if x == 25 {\n        return 26\n    }\n    if x == 26 {\n        return 26\n    }\n    if x == 27 {\n        return 28\n    }\n    if x == 28 {\n        return 28\n    }\n    if x == 29 {\n        return 30\n    }\n    if x == 30 {\n        return 30\n    }\n    if x == 31 {\n        return 32\n    }\n    if x == 32 {\n        return 32\n    }\n    if x == 33 {\n        return 34\n    }\n    if x == 34 {\n        return 34\n    }\n    if x == 35 {\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg3i4v0_3_test.go:127:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    max := x\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374770,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmprdrz3z06_test.go:50: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return x + y - 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpbv342cxc_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    \n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp55vd6sul_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return choose_num(x, y - x + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxbtuz0q7_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x == y + 1 {\n        return y\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpfo779oyf_test.go:60: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x > y + 1 {\n        return -1\n    }\n    if x > y + 2 {\n        return -1\n    }\n    if x > y + 3 {\n        return -1\n    }\n    if x > y + 4 {\n        return -1\n    }\n    if x > y + 5 {\n        return -1\n    }\n    if x > y + 6 {\n        return -1\n    }\n    if x > y + 7 {\n        return -1\n    }\n    if x > y + 8 {\n        return -1\n    }\n    if x > y + 9 {\n        return -1\n    }\n    if x > y + 10 {\n        return -1\n    }\n    if x > y + 11 {\n        return -1\n    }\n    if x > y + 12 {\n        return -1\n    }\n    if x > y + 13 {\n        return -1\n    }\n    if x > y + 14 {\n        return -1\n    }\n    if x > y + 15 {\n        return -1\n    }\n    if x > y + 16 {\n        return -1\n    }\n    if x > y + 17 {\n        return -1\n    }\n    if x > y + 18 {\n        return -1\n    }\n    if x > y + 19 {\n        return -1\n    }\n    if x > y + 20 {\n        return -1\n    }\n    if x > y + 21 {\n        return -1\n    }\n    if x > y + 22 {\n        return -1\n    }\n    if x > y + 23 {\n        return -1\n    }\n    if x > y + 24 {\n        return -1\n    }\n    if x > y + 25 {\n        return -1\n    }\n    if x > y + 26 {\n        \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp44qfhbpm_test.go:109:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x%2 == 0 {\n        return x\n    }\n    \n    if y%2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374770,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmp7fkifv4m_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp7fkifv4m_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp7fkifv4m_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // We'll start with x and y as the biggest even integer in the range\n    // [x, y] inclusive.\n    x_max := x\n    y_max := y\n    \n    // We'll keep track of the biggest even integer in the range [x, y]\n    // inclusive.\n    x_max_even := x\n    y_max_even := y\n    \n    // We'll keep track of the biggest even integer in the range [x, y]\n    // inclusive.\n    x_max_odd := x\n    y_max_odd := y\n    \n    // We'll keep track of the biggest even integer in the range [x, y]\n    // inclusive.\n    x_min_even := x\n    y_min_even := y\n    \n    // We'll keep track of the biggest even integer in the range [x, y]\n    // inclusive.\n    x_min_odd := x\n    y_min_odd := y\n    \n    // We'll keep track of the biggest even integer in the range [x, y]\n    // inclusive.\n    x_even := x\n    y_even := y\n    \n    // We'll keep track of the biggest even integer in the range [x, y]\n    // inclusive.\n    x_odd := x\n    y_odd := y\n    \n    // We'll keep track of the biggest even integer in the range [x, y]\n    // inclusive.\n    x_even_odd := x\n    y_even_odd := y\n    \n    // We'll keep track of the biggest even integer in the range [x, y]\n    // inclusive.\n    x_odd_even := x\n    y_odd_even := y\n    \n    // We'll keep track of the biggest even integer in the range [x, y]\n    // inclusive.\n    x_odd_odd := x\n    y_odd_odd := y\n    \n    // We'll keep track of the biggest even integer in the range [x, y]\n    // inclusive.\n    x_even_odd_even := x\n    y_even_odd_even := y\n    \n    // We'll keep\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2hq3ocbt_test.go:77:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    max := x\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374765,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpvt8_5gnz_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The range [x, y] is inclusive.\n    // So, we need to add 1 to y to get the upper bound.\n    upper_bound := y + 1\n    \n    // We need to find the biggest even integer number that is in the range\n    // [x, upper_bound] inclusive.\n    // So, we can use the formula:\n    // 2*n*(n+1)/2 = upper_bound\n    // 2*n*(n+1) - 1 = upper_bound\n    // 2*n*(n+1) - 2 = upper_bound\n    // 2*n*(n+1) - 2 = upper_bound - 1\n    // 2*n*(n+1) - 2 - 1 = upper_bound - 2\n    // 2*n*(n+1) - 2 - 2 = upper_bound - 3\n    // 2*n*(n+1) - 2 - 3 = upper_bound - 4\n    // 2*n*(n+1) - 2 - 4 = upper_bound - 5\n    // 2*n*(n+1) - 2 - 5 = upper_bound - 6\n    // 2*n*(n+1) - 2 - 6 = upper_bound - 7\n    // 2*n*(n+1) - 2 - 7 = upper_bound - 8\n    // 2*n*(n+1) - 2 - 8 = upper_bound - 9\n    // 2*n*(n+1) - 2 - 9 = upper_bound - 10\n    // 2*n*(n+1) - 2 - 10 = upper_bound - 11\n    // 2*n*(n+1) - 2 - 11 = upper_bound - 12\n    // 2*n*(n+1) - 2 - 12 = upper_bound - 13\n    // 2*n*(n+1) - 2 - 13 = upper_bound - 14\n    // 2*n*(n+1) - 2 - 14 = upper_bound - 15\n    // 2*n*(n+1) - 2 - 15 = upper_bound - 16\n    // 2*n*(n+1\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnp8sbxnb_test.go:48:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    if y % 2 == 0 {\n        return y\n    }\n    \n    return choose_num(x - 1, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374770,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpmn0q_v_j_test.go:56: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpmn0q_v_j_test.go:56: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpmn0q_v_j_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y + 1 {\n        return y\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x > y + 1 {\n        return -1\n    }\n    return choose_num(x - 1, y - 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374770,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpxfp7v_2n_test.go:58: expected '%!s(int=14)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpxfp7v_2n_test.go:58: expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxfp7v_2n_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 2\n    }\n    if x == 3 {\n        return 4\n    }\n    if x == 4 {\n        return 4\n    }\n    if x == 5 {\n        return 6\n    }\n    if x == 6 {\n        return 6\n    }\n    if x == 7 {\n        return 8\n    }\n    if x == 8 {\n        return 8\n    }\n    if x == 9 {\n        return 10\n    }\n    if x == 10 {\n        return 10\n    }\n    if x == 11 {\n        return 12\n    }\n    if x == 12 {\n        return 12\n    }\n    if x == 13 {\n        return 14\n    }\n    if x == 14 {\n        return 14\n    }\n    if x == 15 {\n        return 16\n    }\n    if x == 16 {\n        return 16\n    }\n    if x == 17 {\n        return 18\n    }\n    if x == 18 {\n        return 18\n    }\n    if x == 19 {\n        return 20\n    }\n    if x == 20 {\n        return 20\n    }\n    if x == 21 {\n        return 22\n    }\n    if x == 22 {\n        return 22\n    }\n    if x == 23 {\n        return 24\n    }\n    if x == 24 {\n        return 24\n    }\n    if x == 25 {\n        return 26\n    }\n    if x == 26 {\n        return 26\n    }\n    if x == 27 {\n        return 28\n    }\n    if x == 28 {\n        return 28\n    }\n    if x == 29 {\n        return 30\n    }\n    if x == 30 {\n        return 30\n    }\n    if x == 31 {\n        return 32\n    }\n    if x == 32 {\n        return 32\n    }\n    if x == 33 {\n        return 34\n    }\n    if x == 34 {\n        return 34\n    }\n    if x == 35 {\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg3i4v0_3_test.go:127:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == 1 {\n        return 2\n    }\n    if x == 2 {\n        return 4\n    }\n    if x == 3 {\n        return 6\n    }\n    if x == 4 {\n        return 8\n    }\n    if x == 5 {\n        return 10\n    }\n    if x == 6 {\n        return 12\n    }\n    if x == 7 {\n        return 14\n    }\n    if x == 8 {\n        return 16\n    }\n    if x == 9 {\n        return 18\n    }\n    if x == 10 {\n        return 20\n    }\n    if x == 11 {\n        return 22\n    }\n    if x == 12 {\n        return 24\n    }\n    if x == 13 {\n        return 26\n    }\n    if x == 14 {\n        return 28\n    }\n    if x == 15 {\n        return 30\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=14)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpv6z9z7mo_test.go:91: expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    // The number of even integers in the range [x, y] is equal to the\n    // number of integers in the range [x, y] that are divisible by 2.\n    // So, we just need to count the number of integers in the range\n    // [x, y] that are divisible by 2.\n    count := 0\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374770,
      "stdout": "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpiph5yao8_test.go:55: expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpiph5yao8_test.go:55: expected '%!s(int=12354)', got '%!s(int=6161)'\n    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpiph5yao8_test.go:55: expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpiph5yao8_test.go:55: expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpiph5yao8_test.go:55: expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x == y - 1 {\n        return x\n    }\n    if x == y + 1 {\n        return x\n    }\n    if x == y + 2 {\n        return x\n    }\n    if x == y + 3 {\n        return x\n    }\n    if x == y + 4 {\n        return x\n    }\n    if x == y + 5 {\n        return x\n    }\n    if x == y + 6 {\n        return x\n    }\n    if x == y + 7 {\n        return x\n    }\n    if x == y + 8 {\n        return x\n    }\n    if x == y + 9 {\n        return x\n    }\n    if x == y + 10 {\n        return x\n    }\n    if x == y + 11 {\n        return x\n    }\n    if x == y + 12 {\n        return x\n    }\n    if x == y + 13 {\n        return x\n    }\n    if x == y + 14 {\n        return x\n    }\n    if x == y + 15 {\n        return x\n    }\n    if x == y + 16 {\n        return x\n    }\n    if x == y + 17 {\n        return x\n    }\n    if x == y + 18 {\n        return x\n    }\n    if x == y + 19 {\n        return x\n    }\n    if x == y + 20 {\n        return x\n    }\n    if x == y + 21 {\n        return x\n    }\n    if x == y + 22 {\n        return x\n    }\n    if x == y + 23 {\n        return x\n    }\n    if x == y + 24 {\n        return x\n    }\n    if x == y + 25 {\n        return x\n    }\n    if x == y + 26 {\n        return x\n    }\n    if x == y + 27 {\n        return x\n    }\n    if x == y + 28 {\n        return x\n    }\n    if x == y + 29 {\n        return x\n    }\n    if x\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpscl_idgs_test.go:114:6: expected '(', found TestChoose_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}