{
  "name": "HumanEval_163_generate_integers",
  "language": "go_test.go",
  "prompt": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n",
  "tests": "func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < b {\n        return []int{}\n    }\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpphzvvkkm_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpphzvvkkm_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpphzvvkkm_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < b {\n        return []int{}\n    }\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpphzvvkkm_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpphzvvkkm_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpphzvvkkm_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < b {\n        return []int{}\n    }\n    \n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpwhhitigp_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpwhhitigp_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpwhhitigp_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < 0 || b < 0 {\n        return []int{}\n    }\n    if a > b {\n        return []int{}\n    }\n    if a == b {\n        return []int{a}\n    }\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmp05dd5fiq_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp05dd5fiq_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp05dd5fiq_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp05dd5fiq_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a > b {\n        return []int{}\n    }\n    if a == b {\n        return []int{a}\n    }\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmp1dymaw6x_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp1dymaw6x_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp1dymaw6x_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp1dymaw6x_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < b {\n        return []int{}\n    }\n    \n    result := []int{}\n    \n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    \n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpoj8blpam_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpoj8blpam_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpoj8blpam_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < b {\n        return []int{}\n    }\n    result := []int{}\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpy50_cjsa_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpy50_cjsa_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpy50_cjsa_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < b {\n        return []int{}\n    }\n    \n    result := []int{}\n    \n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    \n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpoj8blpam_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpoj8blpam_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpoj8blpam_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < b {\n        return []int{}\n    }\n    \n    result := []int{}\n    \n    for i := a; i <= b; i += 2 {\n        result = append(result, i)\n    }\n    \n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpkf2wejl4_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpkf2wejl4_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpkf2wejl4_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpy91e1oh0_test.go:38: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpy91e1oh0_test.go:38: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpy91e1oh0_test.go:38: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a > b {\n        return []int{}\n    }\n    \n    result := []int{}\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmp3f2ggkmi_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3f2ggkmi_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp3f2ggkmi_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp3f2ggkmi_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < b {\n        return []int{}\n    }\n    \n    result := []int{}\n    for i := a; i <= b; i += 2 {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpnyg_3u1b_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpnyg_3u1b_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpnyg_3u1b_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < b {\n        return []int{}\n    }\n    result := []int{}\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpy50_cjsa_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpy50_cjsa_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpy50_cjsa_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    if a < b {\n        return []int{}\n    }\n    \n    result := []int{}\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmp_7mv4q7s_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp_7mv4q7s_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp_7mv4q7s_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvdbpa2mf_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm0zu0d4x_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}