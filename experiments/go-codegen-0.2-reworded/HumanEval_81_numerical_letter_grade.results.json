{
  "name": "HumanEval_81_numerical_letter_grade",
  "language": "go_test.go",
  "prompt": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n",
  "tests": "func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    \n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    \n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpyrgeqeij_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpyrgeqeij_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpyrgeqeij_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpyrgeqeij_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmppfo9_9_b_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmppfo9_9_b_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmppfo9_9_b_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmppfo9_9_b_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade out of range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp4qenpgyf_test.go:85: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp4qenpgyf_test.go:85: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp4qenpgyf_test.go:85: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp4qenpgyf_test.go:85: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade out of range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmplpn7l6on_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmplpn7l6on_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmplpn7l6on_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmplpn7l6on_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grade >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grade >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grade >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grade >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grade == 0.0 {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmplbtxpyil_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmplbtxpyil_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmplbtxpyil_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmplbtxpyil_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp7yabiutj_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp7yabiutj_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp7yabiutj_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp7yabiutj_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_map = map[float64]string{\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n    }\n    var grades_list []string\n    for _, grade := range grades {\n        grades_list = append(grades_list, grade_map[grade])\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpkom1l5pf_test.go:70: expected '[A+ B C- C A-]', got '[A+ B+ C C+ ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpkom1l5pf_test.go:70: expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpkom1l5pf_test.go:70: expected '[D-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpkom1l5pf_test.go:70: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpkom1l5pf_test.go:70: expected '[D D- C- B B+]', got '[D+    A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpkom1l5pf_test.go:70: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    \n    if len(grades) == 0 {\n        return grade_equation\n    }\n    \n    // calculate the GPA\n    var gpa float64\n    for _, grade := range grades {\n        gpa += grade\n    }\n    gpa /= len(grades)\n    \n    // calculate the letter grade\n    var letter_grade string\n    if gpa >= 4.0 {\n        letter_grade = \"A+\"\n    } else if gpa >= 3.7 {\n        letter_grade = \"A\"\n    } else if gpa >= 3.3 {\n        letter_grade = \"A-\"\n    } else if gpa >= 3.0 {\n        letter_grade = \"B+\"\n    } else if gpa >= 2.7 {\n        letter_grade = \"B\"\n    } else if gpa >= 2.3 {\n        letter_grade = \"B-\"\n    } else if gpa >= 2.0 {\n        letter_grade = \"C+\"\n    } else if gpa >= 1.7 {\n        letter_grade = \"C\"\n    } else if gpa >= 1.3 {\n        letter_grade = \"C-\"\n    } else if gpa >= 1.0 {\n        letter_grade = \"D+\"\n    } else if gpa >= 0.7 {\n        letter_grade = \"D\"\n    } else if gpa >= 0.0 {\n        letter_grade = \"D-\"\n    } else if gpa == 0.0 {\n        letter_grade = \"E\"\n    }\n    \n    grade_equation = append(grade_equation, letter_grade)\n    \n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4hcbz97q_test.go:42:9: invalid operation: gpa /= len(grades) (mismatched types float64 and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    var grade_equation_length = len(grades)\n    var grade_equation_index = 0\n    var grade_equation_value = 0\n    var grade_equation_value_index = 0\n    var grade_equation_value_length = len(grade_equation)\n    var grade_equation_value_index_length = len(grade_equation_value)\n    var grade_equation_value_index_length_minus_1 = grade_equation_value_index_length - 1\n    var grade_equation_value_index_length_minus_2 = grade_equation_value_index_length - 2\n    var grade_equation_value_index_length_minus_3 = grade_equation_value_index_length - 3\n    var grade_equation_value_index_length_minus_4 = grade_equation_value_index_length - 4\n    var grade_equation_value_index_length_minus_5 = grade_equation_value_index_length - 5\n    var grade_equation_value_index_length_minus_6 = grade_equation_value_index_length - 6\n    var grade_equation_value_index_length_minus_7 = grade_equation_value_index_length - 7\n    var grade_equation_value_index_length_minus_8 = grade_equation_value_index_length - 8\n    var grade_equation_value_index_length_minus_9 = grade_equation_value_index_length - 9\n    var grade_equation_value_index_length_minus_10 = grade_equation_value_index_length - 10\n    var grade_equation_value_index_length_minus_11 = grade_equation_value_index_length - 11\n    var grade_equation_value_index_length_minus_12 = grade_equation_value_index_length - 12\n    var grade_equation_value_index_length_minus_13 = grade_equation_value_index_length - 13\n    var grade_equation_value_index_length_minus_14 = grade_equation_\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp03axquyp_test.go:52:6: expected '(', found TestNumerical_Letter_Grade\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: Invalid grade\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp7hkk6cmy_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp7hkk6cmy_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp7hkk6cmy_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp7hkk6cmy_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp1kozp1s4_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp1kozp1s4_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp1kozp1s4_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp1kozp1s4_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_table[int(grade)])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[A+ B C- C A-]', got '[B B+ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[D+]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[D-]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[D D- C- B B+]', got '[A A+ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in the range [0, 4.0]\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp6hdkpzm5_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp6hdkpzm5_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp6hdkpzm5_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp6hdkpzm5_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpkvmiz25f_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpkvmiz25f_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpkvmiz25f_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpkvmiz25f_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    \n    for _, grade := range grades {\n        if grade > 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade > 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade > 3.0 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade > 2.7 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade > 2.3 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade > 2.0 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade > 1.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade > 1.3 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else if grade > 1.0 {\n            grade_equation = append(grade_equation, \"E\")\n        } else if grade > 0.7 {\n            grade_equation = append(grade_equation, \"F\")\n        } else if grade > 0.0 {\n            grade_equation = append(grade_equation, \"F\")\n        } else {\n            grade_equation = append(grade_equation, \"F\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp833z04vi_test.go:81: expected '[A+ B C- C A-]', got '[A B- D- D A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp833z04vi_test.go:81: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp833z04vi_test.go:81: expected '[D-]', got '[F]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp833z04vi_test.go:81: expected '[E]', got '[F]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp833z04vi_test.go:81: expected '[D D- C- B B+]', got '[F F D- B- B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp833z04vi_test.go:81: expected '[E D-]', got '[F F]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not a number\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp0snx6sry_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp0snx6sry_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp0snx6sry_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp0snx6sry_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp08fyuc25_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp08fyuc25_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp08fyuc25_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp08fyuc25_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade > 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade > 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade > 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade > 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade > 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade > 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade > 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade > 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade > 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade > 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade > 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmps3sz90xe_test.go:82: expected '[A+ B C- C A-]', got '[A B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grade >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grade >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grade >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grade >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grade == 0.0 {\n            grades_str = append(grades_str, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not between 0 and 4\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpub_coyea_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpub_coyea_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpub_coyea_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpub_coyea_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade > 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade > 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade > 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade > 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade > 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade > 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade > 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade > 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade > 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade > 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade > 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpa8unoq3l_test.go:82: expected '[A+ B C- C A-]', got '[A B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    var result []string\n    for _, grade := range grades_map {\n        if grade == \"E\" {\n            result = append(result, \"E\")\n        } else {\n            if grade > 3.7 {\n                result = append(result, \"A\")\n            } else if grade > 3.3 {\n                result = append(result, \"A-\")\n            } else if grade > 3.0 {\n                result = append(result, \"B\")\n            } else if grade > 2.7 {\n                result = append(result, \"B-\")\n            } else if grade > 2.3 {\n                result = append(result, \"C\")\n            } else if grade > 2.0 {\n                result = append(result, \"C-\")\n            } else if grade > 1.7 {\n                result = append(result, \"D\")\n            } else if grade > 1.3 {\n                result = append(result, \"D-\")\n            } else if grade > 1.0 {\n                result = append(result, \"F\")\n            } else {\n                result = append(result, \"E\")\n            }\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmposjv7q5m_test.go:40:22: cannot use 3.7 (type untyped float) as type string\n/tmp/tmposjv7q5m_test.go:42:29: cannot use 3.3 (type untyped float) as type string\n/tmp/tmposjv7q5m_test.go:44:29: cannot use 3 (type untyped float) as type string\n/tmp/tmposjv7q5m_test.go:46:29: cannot use 2.7 (type untyped float) as type string\n/tmp/tmposjv7q5m_test.go:48:29: cannot use 2.3 (type untyped float) as type string\n/tmp/tmposjv7q5m_test.go:50:29: cannot use 2 (type untyped float) as type string\n/tmp/tmposjv7q5m_test.go:52:29: cannot use 1.7 (type untyped float) as type string\n/tmp/tmposjv7q5m_test.go:54:29: cannot use 1.3 (type untyped float) as type string\n/tmp/tmposjv7q5m_test.go:56:29: cannot use 1 (type untyped float) as type string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not between 0.0 and 4.0\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpk0yepmm0_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpk0yepmm0_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpk0yepmm0_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpk0yepmm0_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for i := range grades {\n        grades_map[grades[i]] = \"E\"\n    }\n    var grades_list []string\n    for _, grade := range grades_map {\n        if grade == \"E\" {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            if grade > 3.7 {\n                grades_list = append(grades_list, \"A\")\n            } else if grade > 3.3 {\n                grades_list = append(grades_list, \"A-\")\n            } else if grade > 3.0 {\n                grades_list = append(grades_list, \"B\")\n            } else if grade > 2.7 {\n                grades_list = append(grades_list, \"B-\")\n            } else if grade > 2.3 {\n                grades_list = append(grades_list, \"C\")\n            } else if grade > 2.0 {\n                grades_list = append(grades_list, \"C-\")\n            } else if grade > 1.7 {\n                grades_list = append(grades_list, \"D\")\n            } else if grade > 1.3 {\n                grades_list = append(grades_list, \"D-\")\n            } else if grade > 1.0 {\n                grades_list = append(grades_list, \"F\")\n            } else if grade > 0.7 {\n                grades_list = append(grades_list, \"F-\")\n            } else if grade > 0.0 {\n                grades_list = append(grades_list, \"F-\")\n            } else {\n                grades_list = append(grades_list, \"E\")\n            }\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkg7zaij__test.go:40:22: cannot use 3.7 (type untyped float) as type string\n/tmp/tmpkg7zaij__test.go:42:29: cannot use 3.3 (type untyped float) as type string\n/tmp/tmpkg7zaij__test.go:44:29: cannot use 3 (type untyped float) as type string\n/tmp/tmpkg7zaij__test.go:46:29: cannot use 2.7 (type untyped float) as type string\n/tmp/tmpkg7zaij__test.go:48:29: cannot use 2.3 (type untyped float) as type string\n/tmp/tmpkg7zaij__test.go:50:29: cannot use 2 (type untyped float) as type string\n/tmp/tmpkg7zaij__test.go:52:29: cannot use 1.7 (type untyped float) as type string\n/tmp/tmpkg7zaij__test.go:54:29: cannot use 1.3 (type untyped float) as type string\n/tmp/tmpkg7zaij__test.go:56:29: cannot use 1 (type untyped float) as type string\n/tmp/tmpkg7zaij__test.go:58:29: cannot use 0.7 (type untyped float) as type string\n/tmp/tmpkg7zaij__test.go:58:29: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpgadjlhzb_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpgadjlhzb_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpgadjlhzb_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpgadjlhzb_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: The grade is not a number\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpr3iwofpn_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpr3iwofpn_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpr3iwofpn_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpr3iwofpn_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not a number\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpqj1wmy99_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpqj1wmy99_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpqj1wmy99_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpqj1wmy99_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else if grade == 0.0 {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpxv2dp558_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpxv2dp558_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpxv2dp558_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpxv2dp558_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade > 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade > 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade > 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade > 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade > 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade > 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade > 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade > 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade > 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade > 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade > 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpa8unoq3l_test.go:82: expected '[A+ B C- C A-]', got '[A B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for i := 0; i < len(grades); i++ {\n        grades_map[grades[i]] = \"E\"\n    }\n    var grades_list = make([]string, len(grades))\n    for i := 0; i < len(grades); i++ {\n        if grades_map[grades[i]] == \"E\" {\n            grades_list[i] = \"E\"\n        } else if grades_map[grades[i]] == \"D\" {\n            if grades[i] >= 3.7 {\n                grades_list[i] = \"A\"\n            } else if grades[i] >= 3.3 {\n                grades_list[i] = \"A-\"\n            } else if grades[i] >= 3.0 {\n                grades_list[i] = \"B\"\n            } else if grades[i] >= 2.7 {\n                grades_list[i] = \"B-\"\n            } else if grades[i] >= 2.3 {\n                grades_list[i] = \"C\"\n            } else if grades[i] >= 2.0 {\n                grades_list[i] = \"C-\"\n            } else if grades[i] >= 1.7 {\n                grades_list[i] = \"D\"\n            } else if grades[i] >= 1.3 {\n                grades_list[i] = \"D-\"\n            } else if grades[i] >= 1.0 {\n                grades_list[i] = \"F\"\n            } else {\n                grades_list[i] = \"E\"\n            }\n        } else if grades_map[grades[i]] == \"C\" {\n            if grades[i] >= 3.7 {\n                grades_list[i] = \"A\"\n            } else if grades[i] >= 3.3 {\n                grades_list[i] = \"A-\"\n            } else if grades[i] >= 3.0 {\n                grades_list[i] = \"B\"\n            } else if grades[i] >= 2.7 {\n                grades_list[i] = \"B-\"\n            } else if grades[i] >= 2.3 {\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzrxqcw65_test.go:71:6: expected '(', found TestNumerical_Letter_Grade\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    \n    for _, grade := range grades {\n        if grade > 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade > 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade > 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade > 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade > 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade > 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade > 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade > 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade > 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade > 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade > 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade > 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmps66ucisb_test.go:83: expected '[A+ B C- C A-]', got '[A B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpxttwzx31_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grade := grade_table[int(grade) - 1]\n        letter_grades = append(letter_grades, letter_grade)\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5363c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5363c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.numerical_letter_grade(0xc0000b8df0, 0x1, 0x1, 0xc00009a4c0, 0x1, 0x1)\n\t/tmp/tmpfd5oylpr_test.go:34 +0x2db\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0xc000001380)\n\t/tmp/tmpfd5oylpr_test.go:49 +0x1af\ntesting.tRunner(0xc000001380, 0x54f2a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp7nodyun0_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp7nodyun0_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp7nodyun0_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp7nodyun0_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    \n    for grade, _ := range grades_map {\n        if grade > 3.7 {\n            grades_map[grade] = \"A\"\n        } else if grade > 3.3 {\n            grades_map[grade] = \"A-\"\n        } else if grade > 3.0 {\n            grades_map[grade] = \"B\"\n        } else if grade > 2.7 {\n            grades_map[grade] = \"B-\"\n        } else if grade > 2.3 {\n            grades_map[grade] = \"C\"\n        } else if grade > 2.0 {\n            grades_map[grade] = \"C-\"\n        } else if grade > 1.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 1.3 {\n            grades_map[grade] = \"D-\"\n        } else if grade > 1.0 {\n            grades_map[grade] = \"D+\"\n        } else if grade > 0.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"D-\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"E\"\n        }\n    }\n    \n    var grades_list []string\n    for _, grade := range grades_map {\n        grades_list = append(grades_list, grade)\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpw07o9d_7_test.go:89: expected '[A+ B C- C A-]', got '[A B- D- D A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpw07o9d_7_test.go:89: expected '[D D- C- B B+]', got '[D D- D- B- B]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grades[i] >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grades[i] >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grades[i] >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grades[i] >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp8qf4o54w_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp8qf4o54w_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp8qf4o54w_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp8qf4o54w_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    \n    var grades_list []string\n    for _, grade := range grades_map {\n        if grade == \"E\" {\n            grades_list = append(grades_list, \"E\")\n        } else if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwsqwu74y_test.go:40:25: cannot use 4 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:42:25: cannot use 3.7 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:44:25: cannot use 3.3 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:46:25: cannot use 3 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:48:25: cannot use 2.7 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:50:25: cannot use 2.3 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:52:25: cannot use 2 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:54:25: cannot use 1.7 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:56:25: cannot use 1.3 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:58:25: cannot use 1 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:58:25: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpwcvy45om_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpwcvy45om_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpwcvy45om_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpwcvy45om_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades = make([]string, len(grades))\n    for i, grade := range grades {\n        letter_grades[i] = grade_equation[int(grade*10)]\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index out of range [40] with length 13 [recovered]\n\tpanic: runtime error: index out of range [40] with length 13\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5363c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5363c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.numerical_letter_grade(0xc0000b8e08, 0x5, 0x5, 0x4cd165, 0xf, 0x4cd120)\n\t/tmp/tmpkt43nzd7_test.go:34 +0x265\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0xc000001380)\n\t/tmp/tmpkt43nzd7_test.go:46 +0xd4\ntesting.tRunner(0xc000001380, 0x54f2a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_equation[int(grade)])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[A+ B C- C A-]', got '[B B+ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[D+]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[D-]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[D D- C- B B+]', got '[A A+ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not a number\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpx72glah0_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpx72glah0_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpx72glah0_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpx72glah0_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    for _, grade := range grades {\n        if grade > 3.7 {\n            grades_map[grade] = \"A\"\n        } else if grade > 3.3 {\n            grades_map[grade] = \"A-\"\n        } else if grade > 3.0 {\n            grades_map[grade] = \"B\"\n        } else if grade > 2.7 {\n            grades_map[grade] = \"B-\"\n        } else if grade > 2.3 {\n            grades_map[grade] = \"C\"\n        } else if grade > 2.0 {\n            grades_map[grade] = \"C-\"\n        } else if grade > 1.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 1.3 {\n            grades_map[grade] = \"D-\"\n        } else if grade > 1.0 {\n            grades_map[grade] = \"D+\"\n        } else if grade > 0.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"D-\"\n        } else {\n            grades_map[grade] = \"E\"\n        }\n    }\n    var result []string\n    for _, grade := range grades_map {\n        result = append(result, grade)\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp6gly79e3_test.go:87: expected '[A+ B C- C A-]', got '[A- A B- D- D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp6gly79e3_test.go:87: expected '[D D- C- B B+]', got '[D- B- B D D-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grade := grade_table[int(grade) - 1]\n        letter_grades = append(letter_grades, letter_grade)\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5363c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5363c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.numerical_letter_grade(0xc0000b8df0, 0x1, 0x1, 0xc00009a4c0, 0x1, 0x1)\n\t/tmp/tmpfd5oylpr_test.go:34 +0x2db\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0xc000001380)\n\t/tmp/tmpfd5oylpr_test.go:49 +0x1af\ntesting.tRunner(0xc000001380, 0x54f2a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grade := grade_table[int(grade) - 1]\n        letter_grades = append(letter_grades, letter_grade)\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5363c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5363c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.numerical_letter_grade(0xc0000b8df0, 0x1, 0x1, 0xc00009a4c0, 0x1, 0x1)\n\t/tmp/tmpfd5oylpr_test.go:34 +0x2db\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0xc000001380)\n\t/tmp/tmpfd5oylpr_test.go:49 +0x1af\ntesting.tRunner(0xc000001380, 0x54f2a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[A+ B C- C A-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[D-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[D D- C- B B+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = map[float64]string{\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n    }\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_table[grade])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpa16vm81l_test.go:70: expected '[A+ B C- C A-]', got '[A+ B+ C C+ ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpa16vm81l_test.go:70: expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpa16vm81l_test.go:70: expected '[D-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpa16vm81l_test.go:70: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpa16vm81l_test.go:70: expected '[D D- C- B B+]', got '[D+    A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpa16vm81l_test.go:70: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not a number\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpb41vqi2t_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpb41vqi2t_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpb41vqi2t_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpb41vqi2t_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var grade_list []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n            grade_list = append(grade_list, \"A+\")\n        } else if grade > 3.7 {\n            grade_list = append(grade_list, \"A\")\n        } else if grade > 3.3 {\n            grade_list = append(grade_list, \"A-\")\n        } else if grade > 3.0 {\n            grade_list = append(grade_list, \"B+\")\n        } else if grade > 2.7 {\n            grade_list = append(grade_list, \"B\")\n        } else if grade > 2.3 {\n            grade_list = append(grade_list, \"B-\")\n        } else if grade > 2.0 {\n            grade_list = append(grade_list, \"C+\")\n        } else if grade > 1.7 {\n            grade_list = append(grade_list, \"C\")\n        } else if grade > 1.3 {\n            grade_list = append(grade_list, \"C-\")\n        } else if grade > 1.0 {\n            grade_list = append(grade_list, \"D+\")\n        } else if grade > 0.7 {\n            grade_list = append(grade_list, \"D\")\n        } else if grade > 0.0 {\n            grade_list = append(grade_list, \"D-\")\n        } else {\n            grade_list = append(grade_list, \"E\")\n        }\n    }\n    return grade_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpolt0bf5m_test.go:83: expected '[A+ B C- C A-]', got '[A B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    \n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    \n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpclqoqm9r_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpclqoqm9r_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpclqoqm9r_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpclqoqm9r_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_equation[int(grade)])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[A+ B C- C A-]', got '[B B+ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[D+]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[D-]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[D D- C- B B+]', got '[A A+ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp0_0psg6x_test.go:57: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grade >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grade >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grade >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grade >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grade == 0.0 {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmplbtxpyil_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmplbtxpyil_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmplbtxpyil_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmplbtxpyil_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    \n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpq0x3ul7s_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpq0x3ul7s_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpq0x3ul7s_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpq0x3ul7s_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpg2yn4omn_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpg2yn4omn_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpg2yn4omn_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpg2yn4omn_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    \n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpq0x3ul7s_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpq0x3ul7s_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpq0x3ul7s_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpq0x3ul7s_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_map = map[float64]string{\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n        0.0: \"E\",\n    }\n    var grades_list []string\n    for _, grade := range grades {\n        grades_list = append(grades_list, grade_map[grade])\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp37m4fjxx_test.go:44:9: duplicate key 0 in map literal\n\tprevious key at /tmp/tmp37m4fjxx_test.go:43:9\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp9cmbvvej_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp9cmbvvej_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp9cmbvvej_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp9cmbvvej_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grade >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grade >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grade >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grade >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpolcgkv7__test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpolcgkv7__test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpolcgkv7__test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpolcgkv7__test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_table[int(grade)])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[A+ B C- C A-]', got '[B B+ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[D+]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[D-]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[D D- C- B B+]', got '[A A+ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpi36kkqz1_test.go:57: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpssv_ezry_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpssv_ezry_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpssv_ezry_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpssv_ezry_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpwzr9dpwg_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var result []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grades[i] >= 3.7 {\n            result = append(result, \"A\")\n        } else if grades[i] >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grades[i] >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grades[i] >= 2.7 {\n            result = append(result, \"B\")\n        } else if grades[i] >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grades[i] >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grades[i] >= 1.7 {\n            result = append(result, \"C\")\n        } else if grades[i] >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grades[i] >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grades[i] >= 0.7 {\n            result = append(result, \"D\")\n        } else if grades[i] >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpx3fu1w5v_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpx3fu1w5v_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpx3fu1w5v_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpx3fu1w5v_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: The grade is not valid.\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp7n7zhbcc_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp7n7zhbcc_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp7n7zhbcc_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp7n7zhbcc_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpv3pvqg_p_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpv3pvqg_p_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpv3pvqg_p_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpv3pvqg_p_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade > 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade > 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade > 3.0 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade > 2.7 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade > 2.3 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade > 2.0 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade > 1.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade > 1.3 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grade > 1.0 {\n            grades_str = append(grades_str, \"E\")\n        } else if grade > 0.7 {\n            grades_str = append(grades_str, \"F\")\n        } else if grade > 0.0 {\n            grades_str = append(grades_str, \"F\")\n        } else {\n            grades_str = append(grades_str, \"F\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpv2lr3tlm_test.go:80: expected '[A+ B C- C A-]', got '[A B- D- D A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpv2lr3tlm_test.go:80: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpv2lr3tlm_test.go:80: expected '[D-]', got '[F]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpv2lr3tlm_test.go:80: expected '[E]', got '[F]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpv2lr3tlm_test.go:80: expected '[D D- C- B B+]', got '[F F D- B- B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpv2lr3tlm_test.go:80: expected '[E D-]', got '[F F]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp04azld4p_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp04azld4p_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp04azld4p_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp04azld4p_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grades[i] >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grades[i] >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grades[i] >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grades[i] >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp8qf4o54w_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp8qf4o54w_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp8qf4o54w_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp8qf4o54w_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for i := 0; i < len(grades); i++ {\n        grades_map[grades[i]] = \"E\"\n    }\n    var grades_list []string\n    for _, grade := range grades_map {\n        if grade == \"E\" {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            if grade > 3.7 {\n                grades_list = append(grades_list, \"A\")\n            } else if grade > 3.3 {\n                grades_list = append(grades_list, \"A-\")\n            } else if grade > 3.0 {\n                grades_list = append(grades_list, \"B\")\n            } else if grade > 2.7 {\n                grades_list = append(grades_list, \"B-\")\n            } else if grade > 2.3 {\n                grades_list = append(grades_list, \"C\")\n            } else if grade > 2.0 {\n                grades_list = append(grades_list, \"C-\")\n            } else if grade > 1.7 {\n                grades_list = append(grades_list, \"D\")\n            } else if grade > 1.3 {\n                grades_list = append(grades_list, \"D-\")\n            } else if grade > 1.0 {\n                grades_list = append(grades_list, \"F\")\n            } else if grade > 0.7 {\n                grades_list = append(grades_list, \"F-\")\n            } else if grade > 0.0 {\n                grades_list = append(grades_list, \"F-\")\n            } else {\n                grades_list = append(grades_list, \"F-\")\n            }\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpclc7p2fq_test.go:40:22: cannot use 3.7 (type untyped float) as type string\n/tmp/tmpclc7p2fq_test.go:42:29: cannot use 3.3 (type untyped float) as type string\n/tmp/tmpclc7p2fq_test.go:44:29: cannot use 3 (type untyped float) as type string\n/tmp/tmpclc7p2fq_test.go:46:29: cannot use 2.7 (type untyped float) as type string\n/tmp/tmpclc7p2fq_test.go:48:29: cannot use 2.3 (type untyped float) as type string\n/tmp/tmpclc7p2fq_test.go:50:29: cannot use 2 (type untyped float) as type string\n/tmp/tmpclc7p2fq_test.go:52:29: cannot use 1.7 (type untyped float) as type string\n/tmp/tmpclc7p2fq_test.go:54:29: cannot use 1.3 (type untyped float) as type string\n/tmp/tmpclc7p2fq_test.go:56:29: cannot use 1 (type untyped float) as type string\n/tmp/tmpclc7p2fq_test.go:58:29: cannot use 0.7 (type untyped float) as type string\n/tmp/tmpclc7p2fq_test.go:58:29: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not between 0 and 4\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpfhibn1h2_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpfhibn1h2_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpfhibn1h2_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpfhibn1h2_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp08fyuc25_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp08fyuc25_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp08fyuc25_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp08fyuc25_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    \n    var grades_list []string\n    for _, grade := range grades_map {\n        if grade == \"E\" {\n            grades_list = append(grades_list, \"E\")\n        } else if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwsqwu74y_test.go:40:25: cannot use 4 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:42:25: cannot use 3.7 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:44:25: cannot use 3.3 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:46:25: cannot use 3 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:48:25: cannot use 2.7 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:50:25: cannot use 2.3 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:52:25: cannot use 2 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:54:25: cannot use 1.7 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:56:25: cannot use 1.3 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:58:25: cannot use 1 (type untyped float) as type string\n/tmp/tmpwsqwu74y_test.go:58:25: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpg5cpq63y_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpg5cpq63y_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpg5cpq63y_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpg5cpq63y_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    \n    for grade, _ := range grades_map {\n        if grade > 3.7 {\n            grades_map[grade] = \"A\"\n        } else if grade > 3.3 {\n            grades_map[grade] = \"B\"\n        } else if grade > 2.7 {\n            grades_map[grade] = \"C\"\n        } else if grade > 2.3 {\n            grades_map[grade] = \"D\"\n        } else if grade > 1.7 {\n            grades_map[grade] = \"E\"\n        } else if grade > 1.3 {\n            grades_map[grade] = \"F\"\n        } else if grade > 0.7 {\n            grades_map[grade] = \"G\"\n        } else if grade > 0.3 {\n            grades_map[grade] = \"H\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"I\"\n        } else {\n            grades_map[grade] = \"J\"\n        }\n    }\n    \n    var result []string\n    for _, grade := range grades_map {\n        result = append(result, grade)\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmppc8nnpaj_test.go:85: expected '[A+ B C- C A-]', got '[A C F E B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmppc8nnpaj_test.go:85: expected '[D+]', got '[G]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmppc8nnpaj_test.go:85: expected '[D-]', got '[H]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmppc8nnpaj_test.go:85: expected '[E]', got '[J]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmppc8nnpaj_test.go:85: expected '[D D- C- B B+]', got '[F C C G I]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmppc8nnpaj_test.go:85: expected '[E D-]', got '[J H]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not between 0 and 4\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp4uzuda7k_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp4uzuda7k_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp4uzuda7k_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp4uzuda7k_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    for grade, _ := range grades_map {\n        if grade > 4.0 {\n            grades_map[grade] = \"A+\"\n        } else if grade > 3.7 {\n            grades_map[grade] = \"A\"\n        } else if grade > 3.3 {\n            grades_map[grade] = \"A-\"\n        } else if grade > 3.0 {\n            grades_map[grade] = \"B+\"\n        } else if grade > 2.7 {\n            grades_map[grade] = \"B\"\n        } else if grade > 2.3 {\n            grades_map[grade] = \"B-\"\n        } else if grade > 2.0 {\n            grades_map[grade] = \"C+\"\n        } else if grade > 1.7 {\n            grades_map[grade] = \"C\"\n        } else if grade > 1.3 {\n            grades_map[grade] = \"C-\"\n        } else if grade > 1.0 {\n            grades_map[grade] = \"D+\"\n        } else if grade > 0.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"D-\"\n        } else {\n            grades_map[grade] = \"E\"\n        }\n    }\n    var result []string\n    for _, grade := range grades_map {\n        result = append(result, grade)\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp0kk6arsi_test.go:89: expected '[A+ B C- C A-]', got '[A B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: The grade is not a number\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpr3iwofpn_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpr3iwofpn_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpr3iwofpn_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpr3iwofpn_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not between 0.0 and 4.0\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpk0yepmm0_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpk0yepmm0_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpk0yepmm0_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpk0yepmm0_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpt4wi6hm3_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpt4wi6hm3_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpt4wi6hm3_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpt4wi6hm3_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    for _, grade := range grades {\n        if grade > 3.7 {\n            grades_map[grade] = \"A\"\n        } else if grade > 3.3 {\n            grades_map[grade] = \"B\"\n        } else if grade > 3.0 {\n            grades_map[grade] = \"C\"\n        } else if grade > 2.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 2.3 {\n            grades_map[grade] = \"E\"\n        } else if grade > 2.0 {\n            grades_map[grade] = \"F\"\n        } else if grade > 1.7 {\n            grades_map[grade] = \"G\"\n        } else if grade > 1.3 {\n            grades_map[grade] = \"H\"\n        } else if grade > 1.0 {\n            grades_map[grade] = \"I\"\n        } else if grade > 0.7 {\n            grades_map[grade] = \"J\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"K\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"L\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"M\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"N\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"O\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"P\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"Q\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"R\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"S\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"T\"\n        } else\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0ffajshy_test.go:77:1: expected if statement or block, found 'func'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpnru5k6y2_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpnru5k6y2_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpnru5k6y2_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpnru5k6y2_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    \n    for _, grade := range grades {\n        if grade > 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade > 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade > 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade > 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade > 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade > 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade > 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade > 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade > 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade > 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade > 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade > 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmps66ucisb_test.go:83: expected '[A+ B C- C A-]', got '[A B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for i := 0; i < len(grades); i++ {\n        grades_map[grades[i]] = \"E\"\n    }\n    var result []string\n    for key, value := range grades_map {\n        if key >= 4.0 {\n            result = append(result, \"A+\")\n        } else if key >= 3.7 {\n            result = append(result, \"A\")\n        } else if key >= 3.3 {\n            result = append(result, \"A-\")\n        } else if key >= 3.0 {\n            result = append(result, \"B+\")\n        } else if key >= 2.7 {\n            result = append(result, \"B\")\n        } else if key >= 2.3 {\n            result = append(result, \"B-\")\n        } else if key >= 2.0 {\n            result = append(result, \"C+\")\n        } else if key >= 1.7 {\n            result = append(result, \"C\")\n        } else if key >= 1.3 {\n            result = append(result, \"C-\")\n        } else if key >= 1.0 {\n            result = append(result, \"D+\")\n        } else if key >= 0.7 {\n            result = append(result, \"D\")\n        } else if key >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphrxdsqi4_test.go:36:14: value declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_eyprcq5_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpnru5k6y2_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpnru5k6y2_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpnru5k6y2_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpnru5k6y2_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp71xoyvwv_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp71xoyvwv_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp71xoyvwv_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp71xoyvwv_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n            result = append(result, \"A+\")\n        } else if grade > 3.7 {\n            result = append(result, \"A\")\n        } else if grade > 3.3 {\n            result = append(result, \"A-\")\n        } else if grade > 3.0 {\n            result = append(result, \"B+\")\n        } else if grade > 2.7 {\n            result = append(result, \"B\")\n        } else if grade > 2.3 {\n            result = append(result, \"B-\")\n        } else if grade > 2.0 {\n            result = append(result, \"C+\")\n        } else if grade > 1.7 {\n            result = append(result, \"C\")\n        } else if grade > 1.3 {\n            result = append(result, \"C-\")\n        } else if grade > 1.0 {\n            result = append(result, \"D+\")\n        } else if grade > 0.7 {\n            result = append(result, \"D\")\n        } else if grade > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp_cndtlqt_test.go:82: expected '[A+ B C- C A-]', got '[A B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grade >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grade >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grade >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grade >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpolcgkv7__test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpolcgkv7__test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpolcgkv7__test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpolcgkv7__test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpr130s8ay_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpr130s8ay_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpr130s8ay_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpr130s8ay_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grades[i] >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grades[i] >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grades[i] >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grades[i] >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else if grades[i] == 0.0 {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpj5pe8m28_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpj5pe8m28_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpj5pe8m28_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpj5pe8m28_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[A+ B C- C A-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[D-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[D D- C- B B+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp9q5c3hs0_test.go:53: expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphg_um3ev_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var grade_equation []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmppvp1795r_test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmppvp1795r_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmppvp1795r_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmppvp1795r_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpagcsakm5_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation = []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grade_equation[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n            grade_equation[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n            grade_equation[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n            grade_equation[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n            grade_equation[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n            grade_equation[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n            grade_equation[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n            grade_equation[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n            grade_equation[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n            grade_equation[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n            grade_equation[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n            grade_equation[i] = \"D-\"\n        } else if grades[i] == 0.0 {\n            grade_equation[i] = \"E\"\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp6jhtjcm__test.go:83: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp6jhtjcm__test.go:83: expected '[D+]', got '[D+ B C- C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp6jhtjcm__test.go:83: expected '[D-]', got '[D- B C- C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp6jhtjcm__test.go:83: expected '[E]', got '[D- B C- C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp6jhtjcm__test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp6jhtjcm__test.go:83: expected '[E D-]', got '[D- D C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp63hf6a9p_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: invalid grade\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpnwz739n2_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpnwz739n2_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpnwz739n2_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpnwz739n2_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3k8dxs8u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grades[i] is not a number\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpltfg8i5n_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpltfg8i5n_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpltfg8i5n_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpltfg8i5n_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpr130s8ay_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpr130s8ay_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpr130s8ay_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpr130s8ay_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_table[int(grade)])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp6rdimdyi_test.go:58: expected '[A+ B C- C A-]', got '[B B+ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp6rdimdyi_test.go:58: expected '[D+]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp6rdimdyi_test.go:58: expected '[D-]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp6rdimdyi_test.go:58: expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp6rdimdyi_test.go:58: expected '[D D- C- B B+]', got '[A A+ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp6rdimdyi_test.go:58: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmp89275lqz_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp89275lqz_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp89275lqz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpzj5wmegv_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpqh2y2jlq_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}