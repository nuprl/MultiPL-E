{
  "name": "HumanEval_81_numerical_letter_grade",
  "language": "go_test.go",
  "prompt": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n",
  "tests": "func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    \n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    \n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade out of range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade out of range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grade >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grade >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grade >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grade >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grade == 0.0 {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_map = map[float64]string{\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n    }\n    var grades_list []string\n    for _, grade := range grades {\n        grades_list = append(grades_list, grade_map[grade])\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    \n    if len(grades) == 0 {\n        return grade_equation\n    }\n    \n    // calculate the GPA\n    var gpa float64\n    for _, grade := range grades {\n        gpa += grade\n    }\n    gpa /= len(grades)\n    \n    // calculate the letter grade\n    var letter_grade string\n    if gpa >= 4.0 {\n        letter_grade = \"A+\"\n    } else if gpa >= 3.7 {\n        letter_grade = \"A\"\n    } else if gpa >= 3.3 {\n        letter_grade = \"A-\"\n    } else if gpa >= 3.0 {\n        letter_grade = \"B+\"\n    } else if gpa >= 2.7 {\n        letter_grade = \"B\"\n    } else if gpa >= 2.3 {\n        letter_grade = \"B-\"\n    } else if gpa >= 2.0 {\n        letter_grade = \"C+\"\n    } else if gpa >= 1.7 {\n        letter_grade = \"C\"\n    } else if gpa >= 1.3 {\n        letter_grade = \"C-\"\n    } else if gpa >= 1.0 {\n        letter_grade = \"D+\"\n    } else if gpa >= 0.7 {\n        letter_grade = \"D\"\n    } else if gpa >= 0.0 {\n        letter_grade = \"D-\"\n    } else if gpa == 0.0 {\n        letter_grade = \"E\"\n    }\n    \n    grade_equation = append(grade_equation, letter_grade)\n    \n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    var grade_equation_length = len(grades)\n    var grade_equation_index = 0\n    var grade_equation_value = 0\n    var grade_equation_value_index = 0\n    var grade_equation_value_length = len(grade_equation)\n    var grade_equation_value_index_length = len(grade_equation_value)\n    var grade_equation_value_index_length_minus_1 = grade_equation_value_index_length - 1\n    var grade_equation_value_index_length_minus_2 = grade_equation_value_index_length - 2\n    var grade_equation_value_index_length_minus_3 = grade_equation_value_index_length - 3\n    var grade_equation_value_index_length_minus_4 = grade_equation_value_index_length - 4\n    var grade_equation_value_index_length_minus_5 = grade_equation_value_index_length - 5\n    var grade_equation_value_index_length_minus_6 = grade_equation_value_index_length - 6\n    var grade_equation_value_index_length_minus_7 = grade_equation_value_index_length - 7\n    var grade_equation_value_index_length_minus_8 = grade_equation_value_index_length - 8\n    var grade_equation_value_index_length_minus_9 = grade_equation_value_index_length - 9\n    var grade_equation_value_index_length_minus_10 = grade_equation_value_index_length - 10\n    var grade_equation_value_index_length_minus_11 = grade_equation_value_index_length - 11\n    var grade_equation_value_index_length_minus_12 = grade_equation_value_index_length - 12\n    var grade_equation_value_index_length_minus_13 = grade_equation_value_index_length - 13\n    var grade_equation_value_index_length_minus_14 = grade_equation_\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: Invalid grade\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_table[int(grade)])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in the range [0, 4.0]\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    \n    for _, grade := range grades {\n        if grade > 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade > 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade > 3.0 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade > 2.7 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade > 2.3 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade > 2.0 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade > 1.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade > 1.3 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else if grade > 1.0 {\n            grade_equation = append(grade_equation, \"E\")\n        } else if grade > 0.7 {\n            grade_equation = append(grade_equation, \"F\")\n        } else if grade > 0.0 {\n            grade_equation = append(grade_equation, \"F\")\n        } else {\n            grade_equation = append(grade_equation, \"F\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not a number\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade > 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade > 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade > 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade > 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade > 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade > 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade > 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade > 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade > 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade > 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade > 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grade >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grade >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grade >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grade >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grade == 0.0 {\n            grades_str = append(grades_str, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not between 0 and 4\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade > 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade > 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade > 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade > 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade > 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade > 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade > 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade > 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade > 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade > 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade > 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    var result []string\n    for _, grade := range grades_map {\n        if grade == \"E\" {\n            result = append(result, \"E\")\n        } else {\n            if grade > 3.7 {\n                result = append(result, \"A\")\n            } else if grade > 3.3 {\n                result = append(result, \"A-\")\n            } else if grade > 3.0 {\n                result = append(result, \"B\")\n            } else if grade > 2.7 {\n                result = append(result, \"B-\")\n            } else if grade > 2.3 {\n                result = append(result, \"C\")\n            } else if grade > 2.0 {\n                result = append(result, \"C-\")\n            } else if grade > 1.7 {\n                result = append(result, \"D\")\n            } else if grade > 1.3 {\n                result = append(result, \"D-\")\n            } else if grade > 1.0 {\n                result = append(result, \"F\")\n            } else {\n                result = append(result, \"E\")\n            }\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not between 0.0 and 4.0\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for i := range grades {\n        grades_map[grades[i]] = \"E\"\n    }\n    var grades_list []string\n    for _, grade := range grades_map {\n        if grade == \"E\" {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            if grade > 3.7 {\n                grades_list = append(grades_list, \"A\")\n            } else if grade > 3.3 {\n                grades_list = append(grades_list, \"A-\")\n            } else if grade > 3.0 {\n                grades_list = append(grades_list, \"B\")\n            } else if grade > 2.7 {\n                grades_list = append(grades_list, \"B-\")\n            } else if grade > 2.3 {\n                grades_list = append(grades_list, \"C\")\n            } else if grade > 2.0 {\n                grades_list = append(grades_list, \"C-\")\n            } else if grade > 1.7 {\n                grades_list = append(grades_list, \"D\")\n            } else if grade > 1.3 {\n                grades_list = append(grades_list, \"D-\")\n            } else if grade > 1.0 {\n                grades_list = append(grades_list, \"F\")\n            } else if grade > 0.7 {\n                grades_list = append(grades_list, \"F-\")\n            } else if grade > 0.0 {\n                grades_list = append(grades_list, \"F-\")\n            } else {\n                grades_list = append(grades_list, \"E\")\n            }\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: The grade is not a number\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not a number\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else if grade == 0.0 {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade > 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade > 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade > 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade > 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade > 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade > 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade > 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade > 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade > 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade > 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade > 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for i := 0; i < len(grades); i++ {\n        grades_map[grades[i]] = \"E\"\n    }\n    var grades_list = make([]string, len(grades))\n    for i := 0; i < len(grades); i++ {\n        if grades_map[grades[i]] == \"E\" {\n            grades_list[i] = \"E\"\n        } else if grades_map[grades[i]] == \"D\" {\n            if grades[i] >= 3.7 {\n                grades_list[i] = \"A\"\n            } else if grades[i] >= 3.3 {\n                grades_list[i] = \"A-\"\n            } else if grades[i] >= 3.0 {\n                grades_list[i] = \"B\"\n            } else if grades[i] >= 2.7 {\n                grades_list[i] = \"B-\"\n            } else if grades[i] >= 2.3 {\n                grades_list[i] = \"C\"\n            } else if grades[i] >= 2.0 {\n                grades_list[i] = \"C-\"\n            } else if grades[i] >= 1.7 {\n                grades_list[i] = \"D\"\n            } else if grades[i] >= 1.3 {\n                grades_list[i] = \"D-\"\n            } else if grades[i] >= 1.0 {\n                grades_list[i] = \"F\"\n            } else {\n                grades_list[i] = \"E\"\n            }\n        } else if grades_map[grades[i]] == \"C\" {\n            if grades[i] >= 3.7 {\n                grades_list[i] = \"A\"\n            } else if grades[i] >= 3.3 {\n                grades_list[i] = \"A-\"\n            } else if grades[i] >= 3.0 {\n                grades_list[i] = \"B\"\n            } else if grades[i] >= 2.7 {\n                grades_list[i] = \"B-\"\n            } else if grades[i] >= 2.3 {\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    \n    for _, grade := range grades {\n        if grade > 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade > 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade > 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade > 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade > 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade > 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade > 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade > 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade > 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade > 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade > 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade > 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grade := grade_table[int(grade) - 1]\n        letter_grades = append(letter_grades, letter_grade)\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    \n    for grade, _ := range grades_map {\n        if grade > 3.7 {\n            grades_map[grade] = \"A\"\n        } else if grade > 3.3 {\n            grades_map[grade] = \"A-\"\n        } else if grade > 3.0 {\n            grades_map[grade] = \"B\"\n        } else if grade > 2.7 {\n            grades_map[grade] = \"B-\"\n        } else if grade > 2.3 {\n            grades_map[grade] = \"C\"\n        } else if grade > 2.0 {\n            grades_map[grade] = \"C-\"\n        } else if grade > 1.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 1.3 {\n            grades_map[grade] = \"D-\"\n        } else if grade > 1.0 {\n            grades_map[grade] = \"D+\"\n        } else if grade > 0.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"D-\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"E\"\n        }\n    }\n    \n    var grades_list []string\n    for _, grade := range grades_map {\n        grades_list = append(grades_list, grade)\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grades[i] >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grades[i] >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grades[i] >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grades[i] >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    \n    var grades_list []string\n    for _, grade := range grades_map {\n        if grade == \"E\" {\n            grades_list = append(grades_list, \"E\")\n        } else if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades = make([]string, len(grades))\n    for i, grade := range grades {\n        letter_grades[i] = grade_equation[int(grade*10)]\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_equation[int(grade)])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not a number\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    for _, grade := range grades {\n        if grade > 3.7 {\n            grades_map[grade] = \"A\"\n        } else if grade > 3.3 {\n            grades_map[grade] = \"A-\"\n        } else if grade > 3.0 {\n            grades_map[grade] = \"B\"\n        } else if grade > 2.7 {\n            grades_map[grade] = \"B-\"\n        } else if grade > 2.3 {\n            grades_map[grade] = \"C\"\n        } else if grade > 2.0 {\n            grades_map[grade] = \"C-\"\n        } else if grade > 1.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 1.3 {\n            grades_map[grade] = \"D-\"\n        } else if grade > 1.0 {\n            grades_map[grade] = \"D+\"\n        } else if grade > 0.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"D-\"\n        } else {\n            grades_map[grade] = \"E\"\n        }\n    }\n    var result []string\n    for _, grade := range grades_map {\n        result = append(result, grade)\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grade := grade_table[int(grade) - 1]\n        letter_grades = append(letter_grades, letter_grade)\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grade := grade_table[int(grade) - 1]\n        letter_grades = append(letter_grades, letter_grade)\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = map[float64]string{\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n    }\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_table[grade])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not a number\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var grade_list []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n            grade_list = append(grade_list, \"A+\")\n        } else if grade > 3.7 {\n            grade_list = append(grade_list, \"A\")\n        } else if grade > 3.3 {\n            grade_list = append(grade_list, \"A-\")\n        } else if grade > 3.0 {\n            grade_list = append(grade_list, \"B+\")\n        } else if grade > 2.7 {\n            grade_list = append(grade_list, \"B\")\n        } else if grade > 2.3 {\n            grade_list = append(grade_list, \"B-\")\n        } else if grade > 2.0 {\n            grade_list = append(grade_list, \"C+\")\n        } else if grade > 1.7 {\n            grade_list = append(grade_list, \"C\")\n        } else if grade > 1.3 {\n            grade_list = append(grade_list, \"C-\")\n        } else if grade > 1.0 {\n            grade_list = append(grade_list, \"D+\")\n        } else if grade > 0.7 {\n            grade_list = append(grade_list, \"D\")\n        } else if grade > 0.0 {\n            grade_list = append(grade_list, \"D-\")\n        } else {\n            grade_list = append(grade_list, \"E\")\n        }\n    }\n    return grade_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    \n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    \n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_equation[int(grade)])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grade >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grade >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grade >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grade >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grade == 0.0 {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    \n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    \n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_map = map[float64]string{\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n        0.0: \"E\",\n    }\n    var grades_list []string\n    for _, grade := range grades {\n        grades_list = append(grades_list, grade_map[grade])\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grade >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grade >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grade >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grade >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_table[int(grade)])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var result []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grades[i] >= 3.7 {\n            result = append(result, \"A\")\n        } else if grades[i] >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grades[i] >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grades[i] >= 2.7 {\n            result = append(result, \"B\")\n        } else if grades[i] >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grades[i] >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grades[i] >= 1.7 {\n            result = append(result, \"C\")\n        } else if grades[i] >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grades[i] >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grades[i] >= 0.7 {\n            result = append(result, \"D\")\n        } else if grades[i] >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: The grade is not valid.\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade > 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade > 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade > 3.0 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade > 2.7 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade > 2.3 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade > 2.0 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade > 1.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade > 1.3 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grade > 1.0 {\n            grades_str = append(grades_str, \"E\")\n        } else if grade > 0.7 {\n            grades_str = append(grades_str, \"F\")\n        } else if grade > 0.0 {\n            grades_str = append(grades_str, \"F\")\n        } else {\n            grades_str = append(grades_str, \"F\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grades[i] >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grades[i] >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grades[i] >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grades[i] >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for i := 0; i < len(grades); i++ {\n        grades_map[grades[i]] = \"E\"\n    }\n    var grades_list []string\n    for _, grade := range grades_map {\n        if grade == \"E\" {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            if grade > 3.7 {\n                grades_list = append(grades_list, \"A\")\n            } else if grade > 3.3 {\n                grades_list = append(grades_list, \"A-\")\n            } else if grade > 3.0 {\n                grades_list = append(grades_list, \"B\")\n            } else if grade > 2.7 {\n                grades_list = append(grades_list, \"B-\")\n            } else if grade > 2.3 {\n                grades_list = append(grades_list, \"C\")\n            } else if grade > 2.0 {\n                grades_list = append(grades_list, \"C-\")\n            } else if grade > 1.7 {\n                grades_list = append(grades_list, \"D\")\n            } else if grade > 1.3 {\n                grades_list = append(grades_list, \"D-\")\n            } else if grade > 1.0 {\n                grades_list = append(grades_list, \"F\")\n            } else if grade > 0.7 {\n                grades_list = append(grades_list, \"F-\")\n            } else if grade > 0.0 {\n                grades_list = append(grades_list, \"F-\")\n            } else {\n                grades_list = append(grades_list, \"F-\")\n            }\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not between 0 and 4\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    \n    var grades_list []string\n    for _, grade := range grades_map {\n        if grade == \"E\" {\n            grades_list = append(grades_list, \"E\")\n        } else if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    \n    for grade, _ := range grades_map {\n        if grade > 3.7 {\n            grades_map[grade] = \"A\"\n        } else if grade > 3.3 {\n            grades_map[grade] = \"B\"\n        } else if grade > 2.7 {\n            grades_map[grade] = \"C\"\n        } else if grade > 2.3 {\n            grades_map[grade] = \"D\"\n        } else if grade > 1.7 {\n            grades_map[grade] = \"E\"\n        } else if grade > 1.3 {\n            grades_map[grade] = \"F\"\n        } else if grade > 0.7 {\n            grades_map[grade] = \"G\"\n        } else if grade > 0.3 {\n            grades_map[grade] = \"H\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"I\"\n        } else {\n            grades_map[grade] = \"J\"\n        }\n    }\n    \n    var result []string\n    for _, grade := range grades_map {\n        result = append(result, grade)\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not between 0 and 4\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    for grade, _ := range grades_map {\n        if grade > 4.0 {\n            grades_map[grade] = \"A+\"\n        } else if grade > 3.7 {\n            grades_map[grade] = \"A\"\n        } else if grade > 3.3 {\n            grades_map[grade] = \"A-\"\n        } else if grade > 3.0 {\n            grades_map[grade] = \"B+\"\n        } else if grade > 2.7 {\n            grades_map[grade] = \"B\"\n        } else if grade > 2.3 {\n            grades_map[grade] = \"B-\"\n        } else if grade > 2.0 {\n            grades_map[grade] = \"C+\"\n        } else if grade > 1.7 {\n            grades_map[grade] = \"C\"\n        } else if grade > 1.3 {\n            grades_map[grade] = \"C-\"\n        } else if grade > 1.0 {\n            grades_map[grade] = \"D+\"\n        } else if grade > 0.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"D-\"\n        } else {\n            grades_map[grade] = \"E\"\n        }\n    }\n    var result []string\n    for _, grade := range grades_map {\n        result = append(result, grade)\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: The grade is not a number\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not between 0.0 and 4.0\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for _, grade := range grades {\n        grades_map[grade] = \"E\"\n    }\n    for _, grade := range grades {\n        if grade > 3.7 {\n            grades_map[grade] = \"A\"\n        } else if grade > 3.3 {\n            grades_map[grade] = \"B\"\n        } else if grade > 3.0 {\n            grades_map[grade] = \"C\"\n        } else if grade > 2.7 {\n            grades_map[grade] = \"D\"\n        } else if grade > 2.3 {\n            grades_map[grade] = \"E\"\n        } else if grade > 2.0 {\n            grades_map[grade] = \"F\"\n        } else if grade > 1.7 {\n            grades_map[grade] = \"G\"\n        } else if grade > 1.3 {\n            grades_map[grade] = \"H\"\n        } else if grade > 1.0 {\n            grades_map[grade] = \"I\"\n        } else if grade > 0.7 {\n            grades_map[grade] = \"J\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"K\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"L\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"M\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"N\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"O\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"P\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"Q\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"R\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"S\"\n        } else if grade > 0.0 {\n            grades_map[grade] = \"T\"\n        } else\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    \n    for _, grade := range grades {\n        if grade > 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade > 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade > 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade > 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade > 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade > 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade > 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade > 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade > 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade > 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade > 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade > 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_map = make(map[float64]string)\n    for i := 0; i < len(grades); i++ {\n        grades_map[grades[i]] = \"E\"\n    }\n    var result []string\n    for key, value := range grades_map {\n        if key >= 4.0 {\n            result = append(result, \"A+\")\n        } else if key >= 3.7 {\n            result = append(result, \"A\")\n        } else if key >= 3.3 {\n            result = append(result, \"A-\")\n        } else if key >= 3.0 {\n            result = append(result, \"B+\")\n        } else if key >= 2.7 {\n            result = append(result, \"B\")\n        } else if key >= 2.3 {\n            result = append(result, \"B-\")\n        } else if key >= 2.0 {\n            result = append(result, \"C+\")\n        } else if key >= 1.7 {\n            result = append(result, \"C\")\n        } else if key >= 1.3 {\n            result = append(result, \"C-\")\n        } else if key >= 1.0 {\n            result = append(result, \"D+\")\n        } else if key >= 0.7 {\n            result = append(result, \"D\")\n        } else if key >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n            result = append(result, \"A+\")\n        } else if grade > 3.7 {\n            result = append(result, \"A\")\n        } else if grade > 3.3 {\n            result = append(result, \"A-\")\n        } else if grade > 3.0 {\n            result = append(result, \"B+\")\n        } else if grade > 2.7 {\n            result = append(result, \"B\")\n        } else if grade > 2.3 {\n            result = append(result, \"B-\")\n        } else if grade > 2.0 {\n            result = append(result, \"C+\")\n        } else if grade > 1.7 {\n            result = append(result, \"C\")\n        } else if grade > 1.3 {\n            result = append(result, \"C-\")\n        } else if grade > 1.0 {\n            result = append(result, \"D+\")\n        } else if grade > 0.7 {\n            result = append(result, \"D\")\n        } else if grade > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_str []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_str = append(grades_str, \"A+\")\n        } else if grade >= 3.7 {\n            grades_str = append(grades_str, \"A\")\n        } else if grade >= 3.3 {\n            grades_str = append(grades_str, \"A-\")\n        } else if grade >= 3.0 {\n            grades_str = append(grades_str, \"B+\")\n        } else if grade >= 2.7 {\n            grades_str = append(grades_str, \"B\")\n        } else if grade >= 2.3 {\n            grades_str = append(grades_str, \"B-\")\n        } else if grade >= 2.0 {\n            grades_str = append(grades_str, \"C+\")\n        } else if grade >= 1.7 {\n            grades_str = append(grades_str, \"C\")\n        } else if grade >= 1.3 {\n            grades_str = append(grades_str, \"C-\")\n        } else if grade >= 1.0 {\n            grades_str = append(grades_str, \"D+\")\n        } else if grade >= 0.7 {\n            grades_str = append(grades_str, \"D\")\n        } else if grade >= 0.0 {\n            grades_str = append(grades_str, \"D-\")\n        } else {\n            grades_str = append(grades_str, \"E\")\n        }\n    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grades[i] >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grades[i] >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grades[i] >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grades[i] >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else if grades[i] == 0.0 {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Your code here\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Write your code here\n    var grade_equation []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grade_equation = append(grade_equation, \"A+\")\n        } else if grade >= 3.7 {\n            grade_equation = append(grade_equation, \"A\")\n        } else if grade >= 3.3 {\n            grade_equation = append(grade_equation, \"A-\")\n        } else if grade >= 3.0 {\n            grade_equation = append(grade_equation, \"B+\")\n        } else if grade >= 2.7 {\n            grade_equation = append(grade_equation, \"B\")\n        } else if grade >= 2.3 {\n            grade_equation = append(grade_equation, \"B-\")\n        } else if grade >= 2.0 {\n            grade_equation = append(grade_equation, \"C+\")\n        } else if grade >= 1.7 {\n            grade_equation = append(grade_equation, \"C\")\n        } else if grade >= 1.3 {\n            grade_equation = append(grade_equation, \"C-\")\n        } else if grade >= 1.0 {\n            grade_equation = append(grade_equation, \"D+\")\n        } else if grade >= 0.7 {\n            grade_equation = append(grade_equation, \"D\")\n        } else if grade >= 0.0 {\n            grade_equation = append(grade_equation, \"D-\")\n        } else {\n            grade_equation = append(grade_equation, \"E\")\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_equation = []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grade_equation[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n            grade_equation[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n            grade_equation[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n            grade_equation[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n            grade_equation[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n            grade_equation[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n            grade_equation[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n            grade_equation[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n            grade_equation[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n            grade_equation[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n            grade_equation[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n            grade_equation[i] = \"D-\"\n        } else if grades[i] == 0.0 {\n            grade_equation[i] = \"E\"\n        }\n    }\n    return grade_equation\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: invalid grade\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grade >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grade == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_string []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_string = append(grades_string, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_string = append(grades_string, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_string = append(grades_string, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_string = append(grades_string, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_string = append(grades_string, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_string = append(grades_string, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_string = append(grades_string, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_string = append(grades_string, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_string = append(grades_string, \"E\")\n        } else {\n            fmt.Println(\"Error: grades[i] is not a number\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grades[i] >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grades[i] >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grades[i] >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grades[i] >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grades[i] >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grades[i] >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grades[i] >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grades[i] >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grades[i] >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grades[i] >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grades[i] >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grades[i] == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grade_table = []string{\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    var letter_grades []string\n    for _, grade := range grades {\n        letter_grades = append(letter_grades, grade_table[int(grade)])\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var result []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    var grades_list []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n            grades_list = append(grades_list, \"A+\")\n        } else if grade >= 3.7 {\n            grades_list = append(grades_list, \"A\")\n        } else if grade >= 3.3 {\n            grades_list = append(grades_list, \"A-\")\n        } else if grade >= 3.0 {\n            grades_list = append(grades_list, \"B+\")\n        } else if grade >= 2.7 {\n            grades_list = append(grades_list, \"B\")\n        } else if grade >= 2.3 {\n            grades_list = append(grades_list, \"B-\")\n        } else if grade >= 2.0 {\n            grades_list = append(grades_list, \"C+\")\n        } else if grade >= 1.7 {\n            grades_list = append(grades_list, \"C\")\n        } else if grade >= 1.3 {\n            grades_list = append(grades_list, \"C-\")\n        } else if grade >= 1.0 {\n            grades_list = append(grades_list, \"D+\")\n        } else if grade >= 0.7 {\n            grades_list = append(grades_list, \"D\")\n        } else if grade >= 0.0 {\n            grades_list = append(grades_list, \"D-\")\n        } else if grade == 0.0 {\n            grades_list = append(grades_list, \"E\")\n        } else {\n            fmt.Println(\"Error: grade is not in range\")\n        }\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    }
  ]
}