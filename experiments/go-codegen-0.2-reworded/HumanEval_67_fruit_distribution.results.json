{
  "name": "HumanEval_67_fruit_distribution",
  "language": "go_test.go",
  "prompt": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n",
  "tests": "func TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, c := range s {\n        switch c {\n            case 'a':\n                apple_count += 1\n            case 'o':\n                orange_count += 1\n            case 'm':\n                mango_count += 1\n        }\n    }\n    \n    if apple_count > orange_count {\n        return apple_count\n    } else if apple_count < orange_count {\n        return orange_count\n    } else {\n        return mango_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp6giopi1n_test.go:66: expected '%!s(int=8)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp6giopi1n_test.go:66: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp6giopi1n_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp6giopi1n_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp6giopi1n_test.go:66: expected '%!s(int=95)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp6giopi1n_test.go:66: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp6giopi1n_test.go:66: expected '%!s(int=19)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        \n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple =\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9sdj5u4v_test.go:117:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples, oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples += 1\n            case 'o':\n                oranges += 1\n            case 'm':\n                mango += 1\n        }\n    }\n    \n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpenr9wo01_test.go:59: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpenr9wo01_test.go:59: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpenr9wo01_test.go:59: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpenr9wo01_test.go:59: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpenr9wo01_test.go:59: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpenr9wo01_test.go:59: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpenr9wo01_test.go:59: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5dcv984h_test.go:119:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * n / (apple + orange + mango)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var a, o, m int\n    a, o, m = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            a++\n        } else if s[i] == 'o' {\n            o++\n        } else if s[i] == 'm' {\n            m++\n        }\n    }\n    if a > o {\n        a = a - o\n        o = 0\n    } else {\n        o = o - a\n        a = 0\n    }\n    if a > m {\n        a = a - m\n        m = 0\n    } else {\n        m = m - a\n        a = 0\n    }\n    if o > m {\n        o = o - m\n        m = 0\n    } else {\n        m = m - o\n        o = 0\n    }\n    if a > 0 {\n        a = a - o - m\n        o = 0\n        m = 0\n    }\n    return a\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpmclmoroe_test.go:83: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpmclmoroe_test.go:83: expected '%!s(int=10)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpmclmoroe_test.go:83: expected '%!s(int=95)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpmclmoroe_test.go:83: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpmclmoroe_test.go:83: expected '%!s(int=19)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmps_ism7_q_test.go:119:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var a, o, m int\n    a, o, m = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            a++\n        } else if s[i] == 'o' {\n            o++\n        } else if s[i] == 'm' {\n            m++\n        }\n    }\n    if a > o {\n        return a * n / (a + o)\n    } else {\n        return o * n / (a + o)\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=8)', got '%!s(int=14)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=10)', got '%!s(int=15)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=95)', got '%!s(int=75)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=19)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples, oranges, mango int\n    var total int\n    for _, v := range s {\n        switch v {\n        case 'a':\n            apples++\n        case 'o':\n            oranges++\n        case 'm':\n            mango++\n        }\n    }\n    total = apples + oranges\n    if total > n {\n        return mango\n    }\n    return mango + (n - total)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpmezzvhia_test.go:62: expected '%!s(int=8)', got '%!s(int=15)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpmezzvhia_test.go:62: expected '%!s(int=10)', got '%!s(int=17)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpmezzvhia_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpmezzvhia_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpmezzvhia_test.go:62: expected '%!s(int=95)', got '%!s(int=96)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpmezzvhia_test.go:62: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpmezzvhia_test.go:62: expected '%!s(int=19)', got '%!s(int=116)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp79111k8g_test.go:60: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp79111k8g_test.go:60: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp79111k8g_test.go:60: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp79111k8g_test.go:60: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp79111k8g_test.go:60: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp79111k8g_test.go:60: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp79111k8g_test.go:60: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    total = apples + oranges + mango\n    \n    if total < n {\n        return 0\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_szc4g4z_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_szc4g4z_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_szc4g4z_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_szc4g4z_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_szc4g4z_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_szc4g4z_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple, orange, mango int\n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    return mango * n / (apple + orange)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpsc3mqupi_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpsc3mqupi_test.go:56: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpsc3mqupi_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpsc3mqupi_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpsc3mqupi_test.go:56: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpsc3mqupi_test.go:56: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    total = apples + oranges\n    \n    for total > 0 {\n        if total >= oranges {\n            total -= oranges\n            mango += oranges\n        } else {\n            mango += total\n            total = 0\n        }\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374891,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple -\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8v67s_5t_test.go:116:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples, oranges, mango int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    if oranges > apples {\n        return mango\n    } else if oranges < apples {\n        return oranges\n    } else {\n        return mango - oranges\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpqelwk545_test.go:62: expected '%!s(int=8)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpqelwk545_test.go:62: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpqelwk545_test.go:62: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpqelwk545_test.go:62: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpqelwk545_test.go:62: expected '%!s(int=95)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpqelwk545_test.go:62: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpqelwk545_test.go:62: expected '%!s(int=19)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        \n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprs1ty6cu_test.go:117:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count += 1\n        } else if v == 'o' {\n            orange_count += 1\n        } else if v == 'm' {\n            mango_count += 1\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count - apple_count\n    } else {\n        return mango_count - apple_count - orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpthiw041i_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpthiw041i_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpthiw041i_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpthiw041i_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpthiw041i_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpthiw041i_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpjnaku1i1_test.go:62: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpjnaku1i1_test.go:62: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpjnaku1i1_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpjnaku1i1_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpjnaku1i1_test.go:62: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpjnaku1i1_test.go:62: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    \n    mango = oranges / apples\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x52b640, 0x625a60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x52b640, 0x625a60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.fruit_distribution(0x551ccf, 0x16, 0x3, 0x1)\n\t/tmp/tmpesha2ews_test.go:30 +0x173\ncommand-line-arguments_test.TestFruit_Distribution(0xc000001380)\n\t/tmp/tmpesha2ews_test.go:44 +0xcd\ntesting.tRunner(0xc000001380, 0x5584b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    if oranges > apples {\n        return mango / oranges\n    } else {\n        return mango / (apples + oranges)\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpdvs2yvj5_test.go:63: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpdvs2yvj5_test.go:63: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpdvs2yvj5_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpdvs2yvj5_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpdvs2yvj5_test.go:63: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpdvs2yvj5_test.go:63: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count += 1\n        } else if v == 'o' {\n            orange_count += 1\n        } else if v == 'm' {\n            mango_count += 1\n        }\n    }\n    \n    if apple_count > orange_count {\n        mango_count = mango_count * apple_count / orange_count\n    } else {\n        mango_count = mango_count * orange_count / apple_count\n    }\n    \n    return mango_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpumu55usi_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpumu55usi_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpumu55usi_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpumu55usi_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpumu55usi_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpumu55usi_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    if oranges > apples {\n        return mango * n / oranges\n    } else {\n        return mango * n / (apples + oranges)\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpciwvg6fg_test.go:64: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpciwvg6fg_test.go:64: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpciwvg6fg_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpciwvg6fg_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpciwvg6fg_test.go:64: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpciwvg6fg_test.go:64: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    total = apples + oranges + mango\n    \n    if total > n {\n        return mango\n    }\n    \n    return mango + (n - total)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpjytfburt_test.go:66: expected '%!s(int=8)', got '%!s(int=15)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpjytfburt_test.go:66: expected '%!s(int=10)', got '%!s(int=17)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpjytfburt_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpjytfburt_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpjytfburt_test.go:66: expected '%!s(int=95)', got '%!s(int=96)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpjytfburt_test.go:66: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpjytfburt_test.go:66: expected '%!s(int=19)', got '%!s(int=116)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples, oranges, mango int\n    for _, v := range s {\n        switch v {\n        case 'a':\n            apples++\n        case 'o':\n            oranges++\n        case 'm':\n            mango++\n        }\n    }\n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp3362_o9z_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp3362_o9z_test.go:57: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp3362_o9z_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp3362_o9z_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp3362_o9z_test.go:57: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp3362_o9z_test.go:57: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        \n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count + orange_count - apple_count\n    } else {\n        return mango_count + orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpuo2f4gtd_test.go:67: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpuo2f4gtd_test.go:67: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpuo2f4gtd_test.go:67: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpuo2f4gtd_test.go:67: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpuo2f4gtd_test.go:67: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpuo2f4gtd_test.go:67: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, char := range s {\n        if char == 'a' {\n            apple_count += 1\n        } else if char == 'o' {\n            orange_count += 1\n        } else if char == 'm' {\n            mango_count += 1\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count + orange_count - apple_count\n    } else {\n        return mango_count + orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpn688q3z6_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpn688q3z6_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpn688q3z6_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpn688q3z6_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpn688q3z6_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpn688q3z6_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    for _, v := range s {\n        switch v {\n        case 'a':\n            apples++\n        case 'o':\n            oranges++\n        case 'm':\n            mango++\n        }\n    }\n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpvub3ptuw_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpvub3ptuw_test.go:57: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpvub3ptuw_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpvub3ptuw_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpvub3ptuw_test.go:57: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpvub3ptuw_test.go:57: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        return apple_count\n    } else if apple_count < orange_count {\n        return orange_count\n    } else {\n        return mango_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=8)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=95)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=19)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, char := range s {\n        if char == 'a' {\n            apple_count++\n        } else if char == 'o' {\n            orange_count++\n        } else if char == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        apple_count, orange_count = orange_count, apple_count\n    }\n    \n    if apple_count > mango_count {\n        apple_count, mango_count = mango_count, apple_count\n    }\n    \n    if orange_count > mango_count {\n        orange_count, mango_count = mango_count, orange_count\n    }\n    \n    if apple_count > orange_count {\n        apple_count, orange_count = orange_count, apple_count\n    }\n    \n    if apple_count > mango_count {\n        apple_count, mango_count = mango_count, apple_count\n    }\n    \n    if orange_count > mango_count {\n        orange_count, mango_count = mango_count, orange_count\n    }\n    \n    if apple_count > orange_count {\n        apple_count, orange_count = orange_count, apple_count\n    }\n    \n    if apple_count > mango_count {\n        apple_count, mango_count = mango_count, apple_count\n    }\n    \n    if orange_count > mango_count {\n        orange_count, mango_count = mango_count, orange_count\n    }\n    \n    if apple_count > orange_count {\n        apple_count, orange_count = orange_count, apple_count\n    }\n    \n    if apple_count > mango_count {\n        apple_count, mango_count = mango_count, apple_count\n    }\n    \n    if orange_count > mango_count {\n        orange_count, mango_count = mango_count, orange_count\n    }\n    \n    if apple_count > orange_count {\n        apple_count,\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpfnuqj41x_test.go:87:9: expected 1 expression\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count + orange_count - apple_count\n    } else {\n        return mango_count + orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpsr9ro3lo_test.go:63: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpsr9ro3lo_test.go:63: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpsr9ro3lo_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpsr9ro3lo_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpsr9ro3lo_test.go:63: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpsr9ro3lo_test.go:63: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples, oranges, mango int\n    var total int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    total = apples + oranges + mango\n    \n    if total < n {\n        return 0\n    }\n    \n    if total == n {\n        return mango\n    }\n    \n    return mango * (n - total) / (total - apples - oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523080, 0x616a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523080, 0x616a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.fruit_distribution(0x548db5, 0x16, 0x3, 0x0)\n\t/tmp/tmpeusttk48_test.go:47 +0x137\ncommand-line-arguments_test.TestFruit_Distribution(0xc000102600)\n\t/tmp/tmpeusttk48_test.go:59 +0xcd\ntesting.tRunner(0xc000102600, 0x54f278)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    var total int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    total = apples + oranges\n    \n    if total > n {\n        return mango\n    }\n    \n    return mango + (n - total)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_prynskd_test.go:64: expected '%!s(int=8)', got '%!s(int=15)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_prynskd_test.go:64: expected '%!s(int=10)', got '%!s(int=17)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_prynskd_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_prynskd_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_prynskd_test.go:64: expected '%!s(int=95)', got '%!s(int=96)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp_prynskd_test.go:64: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_prynskd_test.go:64: expected '%!s(int=19)', got '%!s(int=116)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    \n    mango = oranges / 2\n    \n    if oranges % 2 == 0 {\n        mango = mango + apples / 2\n    } else {\n        mango = mango + apples / 2\n    }\n    \n    if mango > n {\n        return mango - n\n    } else {\n        return 0\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp461c6sub_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp461c6sub_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp461c6sub_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp461c6sub_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp461c6sub_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp461c6sub_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    if apple > orange && apple > mango {\n        return apple\n    } else if orange > apple && orange > mango {\n        return orange\n    } else {\n        return mango\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpbm9lh772_test.go:63: expected '%!s(int=8)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpbm9lh772_test.go:63: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpbm9lh772_test.go:63: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpbm9lh772_test.go:63: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpbm9lh772_test.go:63: expected '%!s(int=95)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpbm9lh772_test.go:63: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpbm9lh772_test.go:63: expected '%!s(int=19)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple int\n    var orange int\n    var mango int\n    var apple_oranges int\n    var apple_orange int\n    var apple_mango int\n    \n    apple_oranges = 0\n    apple_orange = 0\n    apple_mango = 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple += 1\n        } else if s[i] == 'o' {\n            orange += 1\n        } else if s[i] == 'm' {\n            mango += 1\n        }\n    }\n    \n    apple_oranges = apple + orange\n    apple_orange = apple + orange\n    apple_mango = apple + mango\n    \n    if apple_oranges == apple_orange {\n        return apple_mango\n    } else {\n        return apple_mango - apple_orange\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp2fuujhq8_test.go:75: expected '%!s(int=8)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp2fuujhq8_test.go:75: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp2fuujhq8_test.go:75: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp2fuujhq8_test.go:75: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp2fuujhq8_test.go:75: expected '%!s(int=95)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp2fuujhq8_test.go:75: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp2fuujhq8_test.go:75: expected '%!s(int=19)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apples int\n    var oranges int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            oranges++\n        }\n    }\n    \n    if oranges > apples {\n        return oranges / 2\n    } else {\n        return oranges / 2 + apples / 2\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpds43m1rh_test.go:65: expected '%!s(int=8)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpds43m1rh_test.go:65: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpds43m1rh_test.go:65: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpds43m1rh_test.go:65: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpds43m1rh_test.go:65: expected '%!s(int=95)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpds43m1rh_test.go:65: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpds43m1rh_test.go:65: expected '%!s(int=19)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var a, o, m int\n    a, o, m = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            a++\n        } else if s[i] == 'o' {\n            o++\n        } else if s[i] == 'm' {\n            m++\n        }\n    }\n    return m\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpar0awwfv_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpar0awwfv_test.go:57: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpar0awwfv_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpar0awwfv_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpar0awwfv_test.go:57: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpar0awwfv_test.go:57: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for _, v := range s {\n        switch v {\n        case 'a':\n            apple++\n        case 'o':\n            orange++\n        case 'm':\n            mango++\n        }\n    }\n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpbh37o418_test.go:58: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpbh37o418_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpbh37o418_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpbh37o418_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpbh37o418_test.go:58: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpbh37o418_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp1pmgb1gn_test.go:60: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp1pmgb1gn_test.go:60: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp1pmgb1gn_test.go:60: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp1pmgb1gn_test.go:60: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp1pmgb1gn_test.go:60: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp1pmgb1gn_test.go:60: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp1pmgb1gn_test.go:60: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    total = apples + oranges\n    \n    if total > n {\n        return mango\n    }\n    \n    return mango - (total - n)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp9rb94xlq_test.go:66: expected '%!s(int=8)', got '%!s(int=15)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp9rb94xlq_test.go:66: expected '%!s(int=10)', got '%!s(int=17)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp9rb94xlq_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp9rb94xlq_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp9rb94xlq_test.go:66: expected '%!s(int=95)', got '%!s(int=96)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp9rb94xlq_test.go:66: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp9rb94xlq_test.go:66: expected '%!s(int=19)', got '%!s(int=116)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple int\n    var orange int\n    var mango int\n    var apple_oranges int\n    var apple_orange int\n    var apple_orange_mango int\n    var apple_orange_mango_mango int\n    var apple_orange_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango_mango int\n    var apple_orange_mango_mango\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpt70zqa0r_test.go:44:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * n / (apple + orange)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpnboep4hl_test.go:62: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpnboep4hl_test.go:62: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpnboep4hl_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpnboep4hl_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpnboep4hl_test.go:62: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpnboep4hl_test.go:62: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_9e17gjz_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_9e17gjz_test.go:57: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_9e17gjz_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_9e17gjz_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_9e17gjz_test.go:57: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_9e17gjz_test.go:57: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnulqog57_test.go:116:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpv5n459j6_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpv5n459j6_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpv5n459j6_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpv5n459j6_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpv5n459j6_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpv5n459j6_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp4sgw9t00_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp4sgw9t00_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp4sgw9t00_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp4sgw9t00_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp4sgw9t00_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp4sgw9t00_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    mango = oranges / 2\n    \n    if oranges % 2 == 0 {\n        mango = mango + apples / 2\n    } else {\n        mango = mango + apples / 2\n    }\n    \n    if mango > n {\n        mango = mango - n\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp5vxzwllr_test.go:63: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp5vxzwllr_test.go:63: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp5vxzwllr_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp5vxzwllr_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp5vxzwllr_test.go:63: expected '%!s(int=95)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp5vxzwllr_test.go:63: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp5vxzwllr_test.go:63: expected '%!s(int=19)', got '%!s(int=50)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples, oranges, mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango / (mango + oranges + apples)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpzkvv97oo_test.go:58: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpzkvv97oo_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpzkvv97oo_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpzkvv97oo_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpzkvv97oo_test.go:58: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpzkvv97oo_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple + orange + mango == n {\n        return mango\n    } else {\n        return 0\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var a, o, m int\n    a, o, m = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            a++\n        } else if s[i] == 'o' {\n            o++\n        } else if s[i] == 'm' {\n            m++\n        }\n    }\n    if a > o {\n        return m\n    } else {\n        return m - o\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count + orange_count - apple_count\n    } else {\n        return mango_count + orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpype7kise_test.go:62: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpype7kise_test.go:62: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpype7kise_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpype7kise_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpype7kise_test.go:62: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpype7kise_test.go:62: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    \n    mango = oranges / 2\n    \n    if oranges % 2 == 0 {\n        mango = mango + apples / 2\n    } else {\n        mango = mango + apples / 2\n    }\n    \n    if mango > n {\n        mango = mango - n\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_joo46c3_test.go:64: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_joo46c3_test.go:64: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_joo46c3_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_joo46c3_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_joo46c3_test.go:64: expected '%!s(int=95)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp_joo46c3_test.go:64: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_joo46c3_test.go:64: expected '%!s(int=19)', got '%!s(int=50)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var a, o, m int\n    a, o, m = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            a++\n        } else if s[i] == 'o' {\n            o++\n        } else if s[i] == 'm' {\n            m++\n        }\n    }\n    if a > o {\n        a, o = o, a\n    }\n    if a > m {\n        a, m = m, a\n    }\n    if o > m {\n        o, m = m, o\n    }\n    if a + o + m > n {\n        return 0\n    }\n    return a + o + m - n\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp1wdn9i9d_test.go:69: expected '%!s(int=8)', got '%!s(int=-15)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp1wdn9i9d_test.go:69: expected '%!s(int=10)', got '%!s(int=-17)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp1wdn9i9d_test.go:69: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp1wdn9i9d_test.go:69: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp1wdn9i9d_test.go:69: expected '%!s(int=95)', got '%!s(int=-96)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp1wdn9i9d_test.go:69: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp1wdn9i9d_test.go:69: expected '%!s(int=19)', got '%!s(int=-116)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples, oranges, mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmps2dhfots_test.go:58: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmps2dhfots_test.go:58: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmps2dhfots_test.go:58: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmps2dhfots_test.go:58: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmps2dhfots_test.go:58: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmps2dhfots_test.go:58: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmps2dhfots_test.go:58: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples, oranges, mango int\n    var total int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    total = apples + oranges + mango\n    \n    if total < n {\n        return 0\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpch2yp_aq_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpch2yp_aq_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpch2yp_aq_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpch2yp_aq_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpch2yp_aq_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpch2yp_aq_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count - apple_count\n    } else {\n        return mango_count - apple_count - orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp6b_4iv9g_test.go:63: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp6b_4iv9g_test.go:63: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp6b_4iv9g_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp6b_4iv9g_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp6b_4iv9g_test.go:63: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp6b_4iv9g_test.go:63: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if oranges > apples {\n        return mango\n    } else if oranges < apples {\n        return oranges\n    } else {\n        return mango - oranges\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpf75ao1rd_test.go:66: expected '%!s(int=8)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpf75ao1rd_test.go:66: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpf75ao1rd_test.go:66: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpf75ao1rd_test.go:66: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpf75ao1rd_test.go:66: expected '%!s(int=95)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpf75ao1rd_test.go:66: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpf75ao1rd_test.go:66: expected '%!s(int=19)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple_count, orange_count int\n    apple_count, orange_count = 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        }\n    }\n    return apple_count * orange_count / n\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp1mnyxvii_test.go:55: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp1mnyxvii_test.go:55: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp1mnyxvii_test.go:55: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp1mnyxvii_test.go:55: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp1mnyxvii_test.go:55: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp1mnyxvii_test.go:55: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    return mango_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmphufpuu5m_test.go:59: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple -\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8v67s_5t_test.go:116:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count += 1\n        } else if v == 'o' {\n            orange_count += 1\n        } else if v == 'm' {\n            mango_count += 1\n        }\n    }\n    return mango_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp1w9khkoh_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp1w9khkoh_test.go:56: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp1w9khkoh_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp1w9khkoh_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp1w9khkoh_test.go:56: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp1w9khkoh_test.go:56: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    var total int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    total = apples + oranges + mango\n    if total < n {\n        return 0\n    }\n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp3rpum9f6_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp3rpum9f6_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp3rpum9f6_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp3rpum9f6_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp3rpum9f6_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp3rpum9f6_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples, oranges, mango int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    var total int\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    total = apples + oranges + mango\n    \n    if total > n {\n        return mango\n    } else if total < n {\n        return 0\n    } else {\n        return mango - (n - total)\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmprd6f0n3q_test.go:67: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmprd6f0n3q_test.go:67: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmprd6f0n3q_test.go:67: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmprd6f0n3q_test.go:67: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmprd6f0n3q_test.go:67: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmprd6f0n3q_test.go:67: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count += 1\n        } else if v == 'o' {\n            orange_count += 1\n        } else if v == 'm' {\n            mango_count += 1\n        }\n    }\n    \n    return mango_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpmi2is4lv_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpmi2is4lv_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpmi2is4lv_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpmi2is4lv_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpmi2is4lv_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpmi2is4lv_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpm8o0s975_test.go:61: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpm8o0s975_test.go:61: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpm8o0s975_test.go:61: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpm8o0s975_test.go:61: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpm8o0s975_test.go:61: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpm8o0s975_test.go:61: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpm8o0s975_test.go:61: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    }\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxshi_30d_test.go:115:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n        mango = 0\n    } else {\n        mango = mango - orange\n        orange = 0\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n        mango = 0\n    } else {\n        mango = mango - orange\n        orange = 0\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n        mango = 0\n    } else {\n        mango = mango - orange\n        orange = 0\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange =\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hx1yaha_test.go:119:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var a, o, m int\n    a, o, m = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            a++\n        } else if s[i] == 'o' {\n            o++\n        } else if s[i] == 'm' {\n            m++\n        }\n    }\n    if a > o {\n        return a * n / (a + o)\n    } else {\n        return o * n / (a + o)\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=8)', got '%!s(int=14)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=10)', got '%!s(int=15)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=95)', got '%!s(int=75)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=19)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var a, o, m int\n    var s_arr []string\n    s_arr = strings.Split(s, \" \")\n    a, _ = strconv.Atoi(s_arr[0])\n    o, _ = strconv.Atoi(s_arr[1])\n    m, _ = strconv.Atoi(s_arr[2])\n    \n    return m - (a + o)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2cdzluor_test.go:26:13: undefined: strings\n/tmp/tmp2cdzluor_test.go:27:12: undefined: strconv\n/tmp/tmp2cdzluor_test.go:28:12: undefined: strconv\n/tmp/tmp2cdzluor_test.go:29:12: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    if orange > mango {\n        orange = orange - mango\n        mango = 0\n    } else {\n        mango = mango - orange\n        orange = 0\n    }\n    if apple + orange + mango == n {\n        return mango\n    }\n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpkw4z3clw_test.go:81: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpkw4z3clw_test.go:81: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpkw4z3clw_test.go:81: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpkw4z3clw_test.go:81: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpkw4z3clw_test.go:81: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpkw4z3clw_test.go:81: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, elem := range s {\n        if elem == 'a' {\n            apples++\n        } else if elem == 'o' {\n            oranges++\n        } else if elem == 'm' {\n            mango++\n        }\n    }\n    \n    return mango / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpqxg0jx30_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpqxg0jx30_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpqxg0jx30_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpqxg0jx30_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpqxg0jx30_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpqxg0jx30_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples, oranges, mango int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmphgswssmn_test.go:56: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    apple_count, orange_count := 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            apple_count += orange_count\n            orange_count = 0\n        }\n    }\n    apple_count += orange_count\n    return apple_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpfj9aha7y_test.go:58: expected '%!s(int=8)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpfj9aha7y_test.go:58: expected '%!s(int=10)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpfj9aha7y_test.go:58: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpfj9aha7y_test.go:58: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpfj9aha7y_test.go:58: expected '%!s(int=95)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpfj9aha7y_test.go:58: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpfj9aha7y_test.go:58: expected '%!s(int=19)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, c := range s {\n        if c == 'a' {\n            apple_count++\n        } else if c == 'o' {\n            orange_count++\n        } else if c == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        mango_count = mango_count * apple_count / orange_count\n    } else {\n        mango_count = mango_count * orange_count / apple_count\n    }\n    \n    return mango_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpqnki1y1r_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpqnki1y1r_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpqnki1y1r_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpqnki1y1r_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpqnki1y1r_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpqnki1y1r_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        \n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n        mango = 0\n    } else {\n        mango = mango - orange\n        orange = 0\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n        mango = 0\n    } else {\n        mango = mango - orange\n        orange = 0\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n        mango = 0\n    } else {\n        mango = mango - orange\n        orange = 0\n    }\n    \n    if apple > orange {\n        apple =\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpc2h_f805_test.go:117:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n            default:\n                total++\n        }\n    }\n    \n    return mango/total\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpazab2gl9_test.go:64: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpazab2gl9_test.go:64: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpazab2gl9_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpazab2gl9_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpazab2gl9_test.go:64: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpazab2gl9_test.go:64: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmptt9ucdsg_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if oranges >= apples {\n        return mango\n    } else {\n        return oranges - apples\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp0sysxrqz_test.go:64: expected '%!s(int=8)', got '%!s(int=-2)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp0sysxrqz_test.go:64: expected '%!s(int=10)', got '%!s(int=-2)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp0sysxrqz_test.go:64: expected '%!s(int=2)', got '%!s(int=-2)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp0sysxrqz_test.go:64: expected '%!s(int=2)', got '%!s(int=-2)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp0sysxrqz_test.go:64: expected '%!s(int=95)', got '%!s(int=-2)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp0sysxrqz_test.go:64: expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp0sysxrqz_test.go:64: expected '%!s(int=19)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple == 0 && orange == 0 && mango == 0 {\n        return 0\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp5m743v1i_test.go:84: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp5m743v1i_test.go:84: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp5m743v1i_test.go:84: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp5m743v1i_test.go:84: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp5m743v1i_test.go:84: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp5m743v1i_test.go:84: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples, oranges, mango int\n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp898kcidl_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp898kcidl_test.go:57: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp898kcidl_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp898kcidl_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp898kcidl_test.go:57: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp898kcidl_test.go:57: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    \n    mango = oranges / 2\n    \n    if oranges % 2 == 0 {\n        mango = mango + apples / 2\n    } else {\n        mango = mango + apples / 2\n    }\n    \n    if mango > n {\n        return mango - n\n    } else {\n        return mango\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpj622lnph_test.go:64: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpj622lnph_test.go:64: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpj622lnph_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpj622lnph_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpj622lnph_test.go:64: expected '%!s(int=95)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpj622lnph_test.go:64: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpj622lnph_test.go:64: expected '%!s(int=19)', got '%!s(int=50)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count += 1\n        } else if v == 'o' {\n            orange_count += 1\n        } else if v == 'm' {\n            mango_count += 1\n        }\n    }\n    if apple_count > orange_count {\n        return apple_count * mango_count\n    } else {\n        return orange_count * mango_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpijlagbi3_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpijlagbi3_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpijlagbi3_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpijlagbi3_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpijlagbi3_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpijlagbi3_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    if oranges > apples {\n        return mango - oranges\n    } else {\n        return mango - apples\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpv4b6ckdv_test.go:65: expected '%!s(int=8)', got '%!s(int=-3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpv4b6ckdv_test.go:65: expected '%!s(int=10)', got '%!s(int=-3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpv4b6ckdv_test.go:65: expected '%!s(int=2)', got '%!s(int=-3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpv4b6ckdv_test.go:65: expected '%!s(int=2)', got '%!s(int=-3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpv4b6ckdv_test.go:65: expected '%!s(int=95)', got '%!s(int=-3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpv4b6ckdv_test.go:65: expected '%!s(int=0)', got '%!s(int=-3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpv4b6ckdv_test.go:65: expected '%!s(int=19)', got '%!s(int=-3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    total = apples + oranges\n    \n    for total > 0 {\n        if total >= oranges {\n            mango = mango + oranges\n            total = total - oranges\n        } else {\n            mango = mango + apples\n            total = total - apples\n        }\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374905,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        return apple_count * mango_count\n    } else if orange_count > apple_count {\n        return orange_count * mango_count\n    } else {\n        return mango_count * apple_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpu4i1gctb_test.go:63: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpu4i1gctb_test.go:63: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpu4i1gctb_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpu4i1gctb_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpu4i1gctb_test.go:63: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpu4i1gctb_test.go:63: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    return mango * n / (apple + orange + mango)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpfvqp7vhp_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpfvqp7vhp_test.go:57: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpfvqp7vhp_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpfvqp7vhp_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpfvqp7vhp_test.go:57: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpfvqp7vhp_test.go:57: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    var result int\n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    result = apples * oranges / (apples + oranges + mango)\n    if result > n {\n        result = n\n    }\n    return result\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpeedzftld_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpeedzftld_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpeedzftld_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpeedzftld_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpeedzftld_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpeedzftld_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        return apple_count\n    } else if apple_count < orange_count {\n        return orange_count\n    } else {\n        return mango_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=8)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=95)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpex9fcs1e_test.go:66: expected '%!s(int=19)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples, oranges, mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp3ao90efw_test.go:58: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp3ao90efw_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp3ao90efw_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp3ao90efw_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp3ao90efw_test.go:58: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp3ao90efw_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango =\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpclkps1sz_test.go:104:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange && apple > mango {\n        return apple\n    } else if orange > apple && orange > mango {\n        return orange\n    } else if mango > apple && mango > orange {\n        return mango\n    }\n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpj1aikchc_test.go:72: expected '%!s(int=8)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpj1aikchc_test.go:72: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpj1aikchc_test.go:72: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpj1aikchc_test.go:72: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpj1aikchc_test.go:72: expected '%!s(int=95)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpj1aikchc_test.go:72: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpj1aikchc_test.go:72: expected '%!s(int=19)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    return mango * n / (apple + orange + mango)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpif9jyip9_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpif9jyip9_test.go:57: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpif9jyip9_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpif9jyip9_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpif9jyip9_test.go:57: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpif9jyip9_test.go:57: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, elem := range s {\n        switch elem {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp4uhmcqu__test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp4uhmcqu__test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp4uhmcqu__test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp4uhmcqu__test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp4uhmcqu__test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp4uhmcqu__test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    return mango_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpu0f_nvxl_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpu0f_nvxl_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpu0f_nvxl_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpu0f_nvxl_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpu0f_nvxl_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpu0f_nvxl_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    \n    mango = oranges / 2\n    \n    if oranges % 2 == 0 {\n        mango = mango + apples / 2\n    }\n    \n    if mango > n {\n        mango = mango - n\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpl3jy800m_test.go:62: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpl3jy800m_test.go:62: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpl3jy800m_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpl3jy800m_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpl3jy800m_test.go:62: expected '%!s(int=95)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpl3jy800m_test.go:62: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpl3jy800m_test.go:62: expected '%!s(int=19)', got '%!s(int=50)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        \n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple + orange + mango == n {\n        return mango\n    }\n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpxzmawt___test.go:87: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpxzmawt___test.go:87: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpxzmawt___test.go:87: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpxzmawt___test.go:87: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpxzmawt___test.go:87: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpxzmawt___test.go:87: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if oranges >= apples && oranges >= mango {\n        return mango\n    } else if apples >= oranges && apples >= mango {\n        return oranges\n    } else if oranges >= mango && oranges >= apples {\n        return mango\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if mango >= apples && mango >= oranges {\n        return mango\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if oranges >= mango && oranges >= apples {\n        return oranges\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if mango >= apples && mango >= oranges {\n        return mango\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if oranges >= mango && oranges >= apples {\n        return oranges\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if mango >= apples && mango >= oranges {\n        return mango\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if oranges >= mango && oranges >= apples {\n        return oranges\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if mango >= apples && mango >= oranges {\n        return mango\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if oranges >= mango && oranges >= apples {\n        return oranges\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if mango >= apples && mango >= oranges {\n        return mango\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if oranges >= mango && oranges >= apples {\n        return oranges\n    } else if apples >= mango && apples >= oranges {\n        return apples\n    } else if mango >= apples &&\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp06kqlr90_test.go:87:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    return mango / (mango + oranges + apples)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp3u16a4ku_test.go:62: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp3u16a4ku_test.go:62: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp3u16a4ku_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp3u16a4ku_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp3u16a4ku_test.go:62: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp3u16a4ku_test.go:62: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apples int\n    var oranges int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            oranges++\n        }\n    }\n    \n    return oranges / apples\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp1br6wb5__test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp1br6wb5__test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp1br6wb5__test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp1br6wb5__test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp1br6wb5__test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp1br6wb5__test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples, oranges, mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    if apples > oranges {\n        return mango * (n - oranges) / apples\n    } else {\n        return mango * (n - apples) / oranges\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpkss93bc8_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpkss93bc8_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpkss93bc8_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpkss93bc8_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpkss93bc8_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpkss93bc8_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpp7wa2gpq_test.go:62: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpp7wa2gpq_test.go:62: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpp7wa2gpq_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpp7wa2gpq_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpp7wa2gpq_test.go:62: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpp7wa2gpq_test.go:62: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple, orange, mango := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    return mango * n / (apple + orange)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpv4ka8i0t_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpv4ka8i0t_test.go:56: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpv4ka8i0t_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpv4ka8i0t_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpv4ka8i0t_test.go:56: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpv4ka8i0t_test.go:56: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    total = apples + oranges + mango\n    \n    if total > n {\n        return mango\n    }\n    \n    return mango + (n - total)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp2t4vp1d3_test.go:67: expected '%!s(int=8)', got '%!s(int=15)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp2t4vp1d3_test.go:67: expected '%!s(int=10)', got '%!s(int=17)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp2t4vp1d3_test.go:67: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp2t4vp1d3_test.go:67: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp2t4vp1d3_test.go:67: expected '%!s(int=95)', got '%!s(int=96)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp2t4vp1d3_test.go:67: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp2t4vp1d3_test.go:67: expected '%!s(int=19)', got '%!s(int=116)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for i := 0; i < len(s); i++ {\n        switch s[i] {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpzrlnhztb_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpzrlnhztb_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpzrlnhztb_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpzrlnhztb_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpzrlnhztb_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpzrlnhztb_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count == 0 && orange_count == 0 && mango_count == 0 {\n        return 0\n    }\n    \n    if apple_count > orange_count && apple_count > mango_count {\n        return apple_count\n    } else if orange_count > mango_count {\n        return orange_count\n    } else {\n        return mango_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpv7066rgc_test.go:67: expected '%!s(int=8)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpv7066rgc_test.go:67: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpv7066rgc_test.go:67: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpv7066rgc_test.go:67: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpv7066rgc_test.go:67: expected '%!s(int=95)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpv7066rgc_test.go:67: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpv7066rgc_test.go:67: expected '%!s(int=19)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango / (apple + orange)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpe6e9k42w_test.go:64: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpe6e9k42w_test.go:64: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpe6e9k42w_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpe6e9k42w_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpe6e9k42w_test.go:64: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpe6e9k42w_test.go:64: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple -\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8v67s_5t_test.go:116:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count - apple_count\n    } else {\n        return mango_count - apple_count - orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpb94lfe7b_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpb94lfe7b_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpb94lfe7b_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpb94lfe7b_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpb94lfe7b_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpb94lfe7b_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpg0z9zsgl_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    \n    mango = oranges / 2\n    \n    if oranges % 2 == 0 {\n        mango = mango + apples / 2\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp9nh8j2_z_test.go:60: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp9nh8j2_z_test.go:60: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp9nh8j2_z_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp9nh8j2_z_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp9nh8j2_z_test.go:60: expected '%!s(int=95)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp9nh8j2_z_test.go:60: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp9nh8j2_z_test.go:60: expected '%!s(int=19)', got '%!s(int=50)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple, orange, mango int\n    var total int\n    for _, v := range s {\n        switch v {\n        case 'a':\n            apple++\n        case 'o':\n            orange++\n        case 'm':\n            mango++\n        }\n    }\n    total = apple + orange + mango\n    return total - n\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmps9iesk2j_test.go:59: expected '%!s(int=8)', got '%!s(int=-15)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmps9iesk2j_test.go:59: expected '%!s(int=10)', got '%!s(int=-17)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmps9iesk2j_test.go:59: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmps9iesk2j_test.go:59: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmps9iesk2j_test.go:59: expected '%!s(int=95)', got '%!s(int=-96)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmps9iesk2j_test.go:59: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmps9iesk2j_test.go:59: expected '%!s(int=19)', got '%!s(int=-116)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    return mango_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpo6wwmiyz_test.go:56: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpvjh043ld_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpvjh043ld_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpvjh043ld_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpvjh043ld_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpvjh043ld_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpvjh043ld_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmptw8p6evb_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmptw8p6evb_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmptw8p6evb_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmptw8p6evb_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmptw8p6evb_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmptw8p6evb_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    total = apples + oranges\n    if total > n {\n        return mango\n    }\n    return mango + (n - total)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_l_d6xmc_test.go:64: expected '%!s(int=8)', got '%!s(int=15)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_l_d6xmc_test.go:64: expected '%!s(int=10)', got '%!s(int=17)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_l_d6xmc_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_l_d6xmc_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_l_d6xmc_test.go:64: expected '%!s(int=95)', got '%!s(int=96)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp_l_d6xmc_test.go:64: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_l_d6xmc_test.go:64: expected '%!s(int=19)', got '%!s(int=116)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var a, o, m int\n    for _, v := range s {\n        if v == 'a' {\n            a++\n        } else if v == 'o' {\n            o++\n        } else if v == 'm' {\n            m++\n        }\n    }\n    return m * n / (a + o)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpsf9nlopw_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpsf9nlopw_test.go:56: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpsf9nlopw_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpsf9nlopw_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpsf9nlopw_test.go:56: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpsf9nlopw_test.go:56: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_bvzrjb__test.go:48: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_bvzrjb__test.go:48: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_bvzrjb__test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_bvzrjb__test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_bvzrjb__test.go:48: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_bvzrjb__test.go:48: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        \n        if v == 'a' {\n            apple_count += 1\n        } else if v == 'o' {\n            orange_count += 1\n        } else if v == 'm' {\n            mango_count += 1\n        }\n    }\n    \n    return mango_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_2d2vr13_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_2d2vr13_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_2d2vr13_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_2d2vr13_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_2d2vr13_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_2d2vr13_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count += 1\n        } else if v == 'o' {\n            orange_count += 1\n        } else if v == 'm' {\n            mango_count += 1\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count + orange_count - apple_count\n    } else {\n        return mango_count + orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpfw2q7vq8_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpfw2q7vq8_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpfw2q7vq8_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpfw2q7vq8_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpfw2q7vq8_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpfw2q7vq8_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango / (mango + oranges + apples)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpi9bye01j_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpi9bye01j_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpi9bye01j_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpi9bye01j_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpi9bye01j_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpi9bye01j_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    if oranges > apples {\n        return mango\n    } else if oranges < apples {\n        return oranges\n    } else {\n        return mango - oranges\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpwkerodx8_test.go:66: expected '%!s(int=8)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpwkerodx8_test.go:66: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpwkerodx8_test.go:66: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpwkerodx8_test.go:66: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpwkerodx8_test.go:66: expected '%!s(int=95)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpwkerodx8_test.go:66: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpwkerodx8_test.go:66: expected '%!s(int=19)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpepp7vw4e_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpepp7vw4e_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpepp7vw4e_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpepp7vw4e_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpepp7vw4e_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpepp7vw4e_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        \n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    return mango / (apple + orange)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpdley8jbx_test.go:65: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpdley8jbx_test.go:65: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpdley8jbx_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpdley8jbx_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpdley8jbx_test.go:65: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpdley8jbx_test.go:65: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp8ulj3o47_test.go:58: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp8ulj3o47_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp8ulj3o47_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp8ulj3o47_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp8ulj3o47_test.go:58: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp8ulj3o47_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple int\n    var orange int\n    var mango int\n    var apple_oranges int\n    var apple_orange int\n    var apple_orange_mango int\n    \n    apple_oranges = 0\n    apple_orange = 0\n    apple_orange_mango = 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple = apple + 1\n        } else if s[i] == 'o' {\n            orange = orange + 1\n        } else if s[i] == 'm' {\n            mango = mango + 1\n        }\n    }\n    \n    apple_oranges = apple + orange\n    apple_orange = apple + orange\n    apple_orange_mango = apple + orange + mango\n    \n    if apple_oranges == apple_orange {\n        return apple_orange_mango\n    } else {\n        return apple_orange\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmplw1oiby6_test.go:75: expected '%!s(int=8)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmplw1oiby6_test.go:75: expected '%!s(int=10)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmplw1oiby6_test.go:75: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmplw1oiby6_test.go:75: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmplw1oiby6_test.go:75: expected '%!s(int=95)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmplw1oiby6_test.go:75: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmplw1oiby6_test.go:75: expected '%!s(int=19)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        switch s[i] {\n        case 'a':\n            apple++\n        case 'o':\n            orange++\n        case 'm':\n            mango++\n        }\n    }\n    return mango * n / (apple + orange + mango)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp1iz0cvhw_test.go:58: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp1iz0cvhw_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp1iz0cvhw_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp1iz0cvhw_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp1iz0cvhw_test.go:58: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp1iz0cvhw_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple_count++\n        } else if s[i] == 'o' {\n            orange_count++\n        } else if s[i] == 'm' {\n            mango_count++\n        }\n    }\n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count + apple_count\n    } else {\n        return mango_count + orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_62vhjjj_test.go:62: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_62vhjjj_test.go:62: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_62vhjjj_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_62vhjjj_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_62vhjjj_test.go:62: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_62vhjjj_test.go:62: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple == 0 && orange == 0 && mango == 0 {\n        return 0\n    }\n    \n    if apple > n {\n        return apple - n\n    } else if orange > n {\n        return orange - n\n    } else {\n        return mango - n\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpslwetmo7_test.go:92: expected '%!s(int=8)', got '%!s(int=-19)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpslwetmo7_test.go:92: expected '%!s(int=10)', got '%!s(int=-21)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpslwetmo7_test.go:92: expected '%!s(int=2)', got '%!s(int=-3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpslwetmo7_test.go:92: expected '%!s(int=2)', got '%!s(int=-3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpslwetmo7_test.go:92: expected '%!s(int=95)', got '%!s(int=-100)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpslwetmo7_test.go:92: expected '%!s(int=0)', got '%!s(int=-5)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpslwetmo7_test.go:92: expected '%!s(int=19)', got '%!s(int=-120)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple_count, orange_count, mango_count int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    return mango_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmplfzrvv6f_test.go:58: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmplfzrvv6f_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmplfzrvv6f_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmplfzrvv6f_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmplfzrvv6f_test.go:58: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmplfzrvv6f_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_5qqqa03_test.go:59: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_5qqqa03_test.go:59: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_5qqqa03_test.go:59: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_5qqqa03_test.go:59: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_5qqqa03_test.go:59: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp_5qqqa03_test.go:59: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_5qqqa03_test.go:59: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpxt3x8_47_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_7co924o_test.go:59: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_7co924o_test.go:59: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_7co924o_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_7co924o_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_7co924o_test.go:59: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_7co924o_test.go:59: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count += 1\n        } else if v == 'o' {\n            orange_count += 1\n        } else if v == 'm' {\n            mango_count += 1\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count + orange_count - apple_count\n    } else {\n        return mango_count + orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpowbnh9fk_test.go:63: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpowbnh9fk_test.go:63: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpowbnh9fk_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpowbnh9fk_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpowbnh9fk_test.go:63: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpowbnh9fk_test.go:63: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    if oranges > n {\n        return mango\n    }\n    \n    if apples > n {\n        return mango + oranges\n    }\n    \n    return mango + oranges + apples\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpu4gzow4e_test.go:68: expected '%!s(int=8)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpu4gzow4e_test.go:68: expected '%!s(int=10)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpu4gzow4e_test.go:68: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpu4gzow4e_test.go:68: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpu4gzow4e_test.go:68: expected '%!s(int=95)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpu4gzow4e_test.go:68: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpu4gzow4e_test.go:68: expected '%!s(int=19)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp98f4o7v3_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp98f4o7v3_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp98f4o7v3_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp98f4o7v3_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp98f4o7v3_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp98f4o7v3_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples, oranges, mango int\n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmptoqrj3gz_test.go:56: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - apples - oranges) / oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpqy3lihz7_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpqy3lihz7_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpqy3lihz7_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpqy3lihz7_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpqy3lihz7_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpqy3lihz7_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    total = apples + oranges + mango\n    \n    if total > n {\n        return mango\n    } else if total < n {\n        return apples\n    } else {\n        return oranges\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp792xwh78_test.go:68: expected '%!s(int=8)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp792xwh78_test.go:68: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp792xwh78_test.go:68: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp792xwh78_test.go:68: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp792xwh78_test.go:68: expected '%!s(int=95)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp792xwh78_test.go:68: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp792xwh78_test.go:68: expected '%!s(int=19)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    if apple + orange + mango == n {\n        return mango\n    }\n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp0oxrh8uf_test.go:75: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp0oxrh8uf_test.go:75: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp0oxrh8uf_test.go:75: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp0oxrh8uf_test.go:75: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp0oxrh8uf_test.go:75: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp0oxrh8uf_test.go:75: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    total = apples + oranges + mango\n    \n    if total < n {\n        return 0\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpj_0ov7u2_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpj_0ov7u2_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpj_0ov7u2_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpj_0ov7u2_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpj_0ov7u2_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpj_0ov7u2_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    \n    mango = oranges / 2\n    \n    if oranges % 2 == 0 {\n        mango = mango + apples / 2\n    } else {\n        mango = mango + apples / 2\n    }\n    \n    if mango > n {\n        mango = mango - n\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpnk4ap1st_test.go:66: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpnk4ap1st_test.go:66: expected '%!s(int=10)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpnk4ap1st_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpnk4ap1st_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpnk4ap1st_test.go:66: expected '%!s(int=95)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpnk4ap1st_test.go:66: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpnk4ap1st_test.go:66: expected '%!s(int=19)', got '%!s(int=50)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple int\n    var orange int\n    var mango int\n    var apple_count int\n    var orange_count int\n    var mango_count int\n    \n    apple_count, orange_count, mango_count = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple_count++\n        } else if s[i] == 'o' {\n            orange_count++\n        } else if s[i] == 'm' {\n            mango_count++\n        }\n    }\n    \n    apple = apple_count\n    orange = orange_count\n    mango = mango_count\n    \n    if apple > orange {\n        apple = apple - orange\n        mango = mango + apple\n    } else {\n        orange = orange - apple\n        mango = mango + orange\n    }\n    \n    if mango > n {\n        mango = mango - n\n    } else {\n        n = n - mango\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp8kd73hh8_test.go:83: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp8kd73hh8_test.go:83: expected '%!s(int=10)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp8kd73hh8_test.go:83: expected '%!s(int=95)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp8kd73hh8_test.go:83: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp8kd73hh8_test.go:83: expected '%!s(int=19)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange && apple > mango {\n        return apple\n    } else if orange > apple && orange > mango {\n        return orange\n    } else {\n        return mango\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp5kts_quz_test.go:68: expected '%!s(int=8)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp5kts_quz_test.go:68: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp5kts_quz_test.go:68: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp5kts_quz_test.go:68: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp5kts_quz_test.go:68: expected '%!s(int=95)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp5kts_quz_test.go:68: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp5kts_quz_test.go:68: expected '%!s(int=19)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple int\n    var orange int\n    var mango int\n    var apple_count int\n    var orange_count int\n    var mango_count int\n    \n    apple_count, orange_count, mango_count = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple_count++\n        } else if s[i] == 'o' {\n            orange_count++\n        } else if s[i] == 'm' {\n            mango_count++\n        }\n    }\n    \n    apple = apple_count\n    orange = orange_count\n    mango = mango_count\n    \n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n        mango = 0\n    } else {\n        mango = mango - orange\n        orange = 0\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n        mango = 0\n    } else {\n        mango = mango - orange\n        orange = 0\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    \n    if\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp028j8mjo_test.go:112:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else {\n            mango++\n        }\n    }\n    if apple > orange {\n        apple = apple - orange\n        orange = 0\n    } else {\n        orange = orange - apple\n        apple = 0\n    }\n    if apple > mango {\n        apple = apple - mango\n        mango = 0\n    } else {\n        mango = mango - apple\n        apple = 0\n    }\n    if orange > mango {\n        orange = orange - mango\n        mango = 0\n    } else {\n        mango = mango - orange\n        orange = 0\n    }\n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpws33mlhs_test.go:78: expected '%!s(int=8)', got '%!s(int=16)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpws33mlhs_test.go:78: expected '%!s(int=10)', got '%!s(int=16)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpws33mlhs_test.go:78: expected '%!s(int=2)', got '%!s(int=16)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpws33mlhs_test.go:78: expected '%!s(int=2)', got '%!s(int=16)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpws33mlhs_test.go:78: expected '%!s(int=95)', got '%!s(int=16)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpws33mlhs_test.go:78: expected '%!s(int=0)', got '%!s(int=16)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpws33mlhs_test.go:78: expected '%!s(int=19)', got '%!s(int=18)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpnmm_cb8w_test.go:59: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpnmm_cb8w_test.go:59: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpnmm_cb8w_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpnmm_cb8w_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpnmm_cb8w_test.go:59: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpnmm_cb8w_test.go:59: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var a, o, m int\n    var s_arr []string\n    s_arr = strings.Split(s, \" \")\n    a, _ = strconv.Atoi(s_arr[0])\n    o, _ = strconv.Atoi(s_arr[1])\n    m, _ = strconv.Atoi(s_arr[2])\n    return m - (a + o)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw_7ij3pg_test.go:26:13: undefined: strings\n/tmp/tmpw_7ij3pg_test.go:27:12: undefined: strconv\n/tmp/tmpw_7ij3pg_test.go:28:12: undefined: strconv\n/tmp/tmpw_7ij3pg_test.go:29:12: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpcps9ua54_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpcps9ua54_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpcps9ua54_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpcps9ua54_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpcps9ua54_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpcps9ua54_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * n / (apple + orange + mango)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpfmucrhbp_test.go:62: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count + apple_count\n    } else {\n        return mango_count + orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpwc4_jdr7_test.go:65: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpwc4_jdr7_test.go:65: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpwc4_jdr7_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpwc4_jdr7_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpwc4_jdr7_test.go:65: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpwc4_jdr7_test.go:65: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    total = apples + oranges + mango\n    \n    if total > n {\n        return mango\n    }\n    \n    return mango - (total - n)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmptcjhdsbt_test.go:67: expected '%!s(int=8)', got '%!s(int=15)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmptcjhdsbt_test.go:67: expected '%!s(int=10)', got '%!s(int=17)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmptcjhdsbt_test.go:67: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmptcjhdsbt_test.go:67: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmptcjhdsbt_test.go:67: expected '%!s(int=95)', got '%!s(int=96)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmptcjhdsbt_test.go:67: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmptcjhdsbt_test.go:67: expected '%!s(int=19)', got '%!s(int=116)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count - apple_count\n    } else {\n        return mango_count - apple_count - orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp_9ffq4ts_test.go:62: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp_9ffq4ts_test.go:62: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp_9ffq4ts_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp_9ffq4ts_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp_9ffq4ts_test.go:62: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp_9ffq4ts_test.go:62: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple + orange + mango == n {\n        return mango\n    } else {\n        return 0\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp5t1k080p_test.go:84: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp2_9aol5q_test.go:59: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apples++\n        } else if s[i] == 'o' {\n            oranges++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if oranges > apples {\n        return mango\n    } else if oranges < apples {\n        return oranges\n    } else {\n        return mango - oranges\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp5tww5hg3_test.go:65: expected '%!s(int=8)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp5tww5hg3_test.go:65: expected '%!s(int=10)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp5tww5hg3_test.go:65: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp5tww5hg3_test.go:65: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp5tww5hg3_test.go:65: expected '%!s(int=95)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmp5tww5hg3_test.go:65: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp5tww5hg3_test.go:65: expected '%!s(int=19)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpemswutbg_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * (n - oranges - apples) / oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpjgsbgzzj_test.go:59: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpjgsbgzzj_test.go:59: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpjgsbgzzj_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpjgsbgzzj_test.go:59: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpjgsbgzzj_test.go:59: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpjgsbgzzj_test.go:59: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        switch s[i] {\n            case 'a':\n                apple++\n            case 'o':\n                orange++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango - apple - orange\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpcigmwvpl_test.go:63: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpcigmwvpl_test.go:63: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpcigmwvpl_test.go:63: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpcigmwvpl_test.go:63: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpcigmwvpl_test.go:63: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpcigmwvpl_test.go:63: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpcigmwvpl_test.go:63: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else {\n            mango++\n        }\n    }\n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    if apple > 0 {\n        apple = apple / 2\n    } else {\n        apple = 0\n    }\n    if orange > 0 {\n        orange = orange / 2\n    } else {\n        orange = 0\n    }\n    if mango > 0 {\n        mango = mango / 2\n    } else {\n        mango = 0\n    }\n    return apple + orange + mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmphfn3yosv_test.go:87: expected '%!s(int=10)', got '%!s(int=8)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmphfn3yosv_test.go:87: expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmphfn3yosv_test.go:87: expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmphfn3yosv_test.go:87: expected '%!s(int=95)', got '%!s(int=8)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmphfn3yosv_test.go:87: expected '%!s(int=0)', got '%!s(int=8)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmphfn3yosv_test.go:87: expected '%!s(int=19)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var a, o, m int\n    a, o, m = 0, 0, 0\n    for _, v := range s {\n        switch v {\n        case 'a':\n            a++\n        case 'o':\n            o++\n        case 'm':\n            m++\n        }\n    }\n    return m\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpsqcfy0bv_test.go:58: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpsqcfy0bv_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpsqcfy0bv_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpsqcfy0bv_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpsqcfy0bv_test.go:58: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpsqcfy0bv_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count += 1\n        } else if v == 'o' {\n            orange_count += 1\n        } else if v == 'm' {\n            mango_count += 1\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count + orange_count - apple_count\n    } else {\n        return mango_count + orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpceystsfh_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpceystsfh_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpceystsfh_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpceystsfh_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpceystsfh_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpceystsfh_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples, oranges, mango int\n    var total int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    total = apples + oranges\n    \n    if total > n {\n        return mango\n    } else if total < n {\n        return mango - (n - total)\n    } else {\n        return mango\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmptyff6iov_test.go:66: expected '%!s(int=8)', got '%!s(int=-15)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmptyff6iov_test.go:66: expected '%!s(int=10)', got '%!s(int=-17)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmptyff6iov_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmptyff6iov_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmptyff6iov_test.go:66: expected '%!s(int=95)', got '%!s(int=-96)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmptyff6iov_test.go:66: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmptyff6iov_test.go:66: expected '%!s(int=19)', got '%!s(int=-116)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apples++\n            case 'o':\n                oranges++\n            case 'm':\n                mango++\n        }\n    }\n    \n    return mango - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=8)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=10)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=2)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=95)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=0)', got '%!s(int=-4)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpnrcw5fhk_test.go:60: expected '%!s(int=19)', got '%!s(int=-4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else {\n            mango++\n        }\n    }\n    if apple > orange && apple > mango {\n        return apple\n    } else if orange > apple && orange > mango {\n        return orange\n    } else {\n        return mango\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmplnu0uhz7_test.go:63: expected '%!s(int=8)', got '%!s(int=18)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmplnu0uhz7_test.go:63: expected '%!s(int=10)', got '%!s(int=18)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmplnu0uhz7_test.go:63: expected '%!s(int=2)', got '%!s(int=18)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmplnu0uhz7_test.go:63: expected '%!s(int=2)', got '%!s(int=18)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmplnu0uhz7_test.go:63: expected '%!s(int=95)', got '%!s(int=18)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmplnu0uhz7_test.go:63: expected '%!s(int=0)', got '%!s(int=18)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmplnu0uhz7_test.go:63: expected '%!s(int=19)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apples int\n    var oranges int\n    var mango int\n    \n    for _, v := range s {\n        if v == 'a' {\n            apples++\n        } else if v == 'o' {\n            oranges++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    \n    return mango * n / (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpf1pi2ai7_test.go:60: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var a, o, m int\n    a, o, m = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            a++\n        } else if s[i] == 'o' {\n            o++\n        } else if s[i] == 'm' {\n            m++\n        }\n    }\n    if a > o {\n        return m\n    } else {\n        return m - o\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp1a4zv41v_test.go:61: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple, orange, mango int\n    for _, v := range s {\n        switch v {\n        case 'a':\n            apple++\n        case 'o':\n            orange++\n        case 'm':\n            mango++\n        }\n    }\n    return mango * n / (apple + orange)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpi1cmqqd5_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpi1cmqqd5_test.go:57: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpi1cmqqd5_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpi1cmqqd5_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpi1cmqqd5_test.go:57: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpi1cmqqd5_test.go:57: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple -\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8v67s_5t_test.go:116:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    if apple > orange {\n        apple = orange\n    }\n    if apple > mango {\n        apple = mango\n    }\n    if orange > mango {\n        orange = mango\n    }\n    if apple + orange + mango == n {\n        return mango\n    }\n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmps3kzkixy_test.go:69: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmps3kzkixy_test.go:69: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmps3kzkixy_test.go:69: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmps3kzkixy_test.go:69: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmps3kzkixy_test.go:69: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmps3kzkixy_test.go:69: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple++\n        } else if v == 'o' {\n            orange++\n        } else if v == 'm' {\n            mango++\n        }\n    }\n    return mango * n / (apple + orange + mango)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp6yo0k8yg_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp6yo0k8yg_test.go:57: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp6yo0k8yg_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp6yo0k8yg_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp6yo0k8yg_test.go:57: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp6yo0k8yg_test.go:57: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple_count++\n        } else if s[i] == 'o' {\n            orange_count++\n        } else if s[i] == 'm' {\n            mango_count++\n        }\n    }\n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count + orange_count - apple_count\n    } else {\n        return mango_count + orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp3g0eby8d_test.go:62: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp3g0eby8d_test.go:62: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp3g0eby8d_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp3g0eby8d_test.go:62: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp3g0eby8d_test.go:62: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp3g0eby8d_test.go:62: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var a, o, m int\n    var s_arr []string\n    s_arr = strings.Split(s, \" \")\n    a, _ = strconv.Atoi(s_arr[0])\n    o, _ = strconv.Atoi(s_arr[1])\n    m, _ = strconv.Atoi(s_arr[2])\n    \n    return m - (a + o)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp085sa8zb_test.go:26:13: undefined: strings\n/tmp/tmp085sa8zb_test.go:27:12: undefined: strconv\n/tmp/tmp085sa8zb_test.go:28:12: undefined: strconv\n/tmp/tmp085sa8zb_test.go:29:12: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    }\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxshi_30d_test.go:115:6: expected '(', found TestFruit_Distribution\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    apple_count, orange_count, mango_count := 0, 0, 0\n    for _, v := range s {\n        if v == 'a' {\n            apple_count++\n        } else if v == 'o' {\n            orange_count++\n        } else if v == 'm' {\n            mango_count++\n        }\n    }\n    \n    return mango_count\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmphng9habb_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmphng9habb_test.go:57: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmphng9habb_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmphng9habb_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmphng9habb_test.go:57: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmphng9habb_test.go:57: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        switch v {\n            case 'a':\n                apple_count += 1\n            case 'o':\n                orange_count += 1\n            case 'm':\n                mango_count += 1\n        }\n    }\n    \n    if apple_count > orange_count {\n        return apple_count * mango_count / (apple_count + orange_count)\n    } else {\n        return orange_count * mango_count / (orange_count + apple_count)\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmp5tu50p8i_test.go:64: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmp5tu50p8i_test.go:64: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmp5tu50p8i_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmp5tu50p8i_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmp5tu50p8i_test.go:64: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmp5tu50p8i_test.go:64: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code here\n    \n    var apple int\n    var orange int\n    var mango int\n    \n    apple, orange, mango = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        \n        if s[i] == 'a' {\n            apple++\n        } else if s[i] == 'o' {\n            orange++\n        } else if s[i] == 'm' {\n            mango++\n        }\n    }\n    \n    if apple > orange {\n        apple = apple - orange\n    } else {\n        orange = orange - apple\n    }\n    \n    if apple > mango {\n        apple = apple - mango\n    } else {\n        mango = mango - apple\n    }\n    \n    if orange > mango {\n        orange = orange - mango\n    } else {\n        mango = mango - orange\n    }\n    \n    if apple + orange + mango == n {\n        return mango\n    }\n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpawwnhugc_test.go:87: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpawwnhugc_test.go:87: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpawwnhugc_test.go:87: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpawwnhugc_test.go:87: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpawwnhugc_test.go:87: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpawwnhugc_test.go:87: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var a, o, m int\n    a, o, m = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            a++\n        } else if s[i] == 'o' {\n            o++\n        } else if s[i] == 'm' {\n            m++\n        }\n    }\n    if a > o {\n        return a * n / (a + o)\n    } else {\n        return o * n / (a + o)\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=8)', got '%!s(int=14)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=10)', got '%!s(int=15)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=95)', got '%!s(int=75)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpmzyhl_wc_test.go:61: expected '%!s(int=19)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple_count++\n        } else if s[i] == 'o' {\n            orange_count++\n        } else if s[i] == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count {\n        return mango_count\n    } else if apple_count < orange_count {\n        return mango_count - apple_count\n    } else {\n        return mango_count - apple_count - orange_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpyezs5r5q_test.go:66: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpyezs5r5q_test.go:66: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpyezs5r5q_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpyezs5r5q_test.go:66: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpyezs5r5q_test.go:66: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpyezs5r5q_test.go:66: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    var apple_count int\n    var orange_count int\n    var mango_count int\n    \n    apple_count, orange_count, mango_count = 0, 0, 0\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            apple_count++\n        } else if s[i] == 'o' {\n            orange_count++\n        } else if s[i] == 'm' {\n            mango_count++\n        }\n    }\n    \n    if apple_count > orange_count && apple_count > mango_count {\n        return apple_count\n    } else if orange_count > apple_count && orange_count > mango_count {\n        return orange_count\n    } else if mango_count > apple_count && mango_count > orange_count {\n        return mango_count\n    }\n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmplt4_mpzy_test.go:72: expected '%!s(int=8)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmplt4_mpzy_test.go:72: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmplt4_mpzy_test.go:72: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmplt4_mpzy_test.go:72: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmplt4_mpzy_test.go:72: expected '%!s(int=95)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmplt4_mpzy_test.go:72: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmplt4_mpzy_test.go:72: expected '%!s(int=19)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    apple_count, orange_count, mango_count := 0, 0, 0\n    \n    for _, v := range s {\n        if v == 'a' {\n            apple_count += 1\n        } else if v == 'o' {\n            orange_count += 1\n        } else if v == 'm' {\n            mango_count += 1\n        }\n    }\n    \n    if apple_count > orange_count {\n        mango_count = mango_count * apple_count / orange_count\n    } else {\n        mango_count = mango_count * orange_count / apple_count\n    }\n    \n    if mango_count > n {\n        return mango_count\n    } else {\n        return n - mango_count\n    }\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpc30gaqdd_test.go:70: expected '%!s(int=8)', got '%!s(int=19)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpc30gaqdd_test.go:70: expected '%!s(int=10)', got '%!s(int=21)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpc30gaqdd_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpc30gaqdd_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpc30gaqdd_test.go:70: expected '%!s(int=95)', got '%!s(int=100)'\n    --- FAIL: TestFruit_Distribution/test_num__5 (0.00s)\n        tmpc30gaqdd_test.go:70: expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpc30gaqdd_test.go:70: expected '%!s(int=19)', got '%!s(int=120)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apples int\n    var oranges int\n    var mango int\n    var total int\n    \n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    \n    total = apples + oranges\n    \n    for total >= oranges {\n        total -= oranges\n        mango += oranges\n    }\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374912,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    \n    // your code goes here\n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpg96ybk2n_test.go:48: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // your code here\n    var apple, orange, mango int\n    apple, orange, mango = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        switch s[i] {\n            case 'a':\n                apple++\n            case 'o':\n                orange++\n            case 'm':\n                mango++\n        }\n    }\n    return mango * n / (apple + orange + mango)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374883,
      "stdout": "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0 (0.00s)\n        tmpsfoce_w0_test.go:58: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpsfoce_w0_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2 (0.00s)\n        tmpsfoce_w0_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpsfoce_w0_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4 (0.00s)\n        tmpsfoce_w0_test.go:58: expected '%!s(int=95)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpsfoce_w0_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}