{
  "name": "HumanEval_65_circular_shift",
  "language": "go_test.go",
  "prompt": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n",
  "tests": "func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    var result string\n    for i := len(fmt.Sprintf(\"%d\", x)) - 1; i >= 0; i-- {\n        result = fmt.Sprintf(\"%d%s\", x%10, result)\n        x /= 10\n    }\n    return result[shift:]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpon3k22jk_test.go:44: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpon3k22jk_test.go:44: expected '12', got ''\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpon3k22jk_test.go:44: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpon3k22jk_test.go:44: expected '21', got '2'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - i - 1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoprhkyps_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - 1 - i]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa_iitnz8_test.go:22:16: cannot use result[i] + result[len(result) - 1 - i] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - i - 1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoprhkyps_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmprx5bxij7_test.go:39: expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmprx5bxij7_test.go:39: expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i:] + result[:i]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '79', got '00007900'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - i - 1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoprhkyps_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i:] + result[:i]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '79', got '00007900'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result) - shift; i++ {\n        result = result[i + shift:] + result[:shift]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmprx5bxij7_test.go:39: expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmprx5bxij7_test.go:39: expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result) - shift; i++ {\n        result = result[i + shift:] + result[:shift]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    if shift > len(result) {\n        result = result[len(result) - shift:]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374891,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result)-1-i]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmvwtpgy0_test.go:22:16: cannot use result[i] + result[len(result) - 1 - i] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    if shift > len(result) {\n        result = result + result[0:shift-len(result)]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpfdswh3lc_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpfdswh3lc_test.go:44: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpfdswh3lc_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpfdswh3lc_test.go:44: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x%10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp13g0iofh_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp13g0iofh_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp13g0iofh_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp13g0iofh_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmprx5bxij7_test.go:39: expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmprx5bxij7_test.go:39: expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - i - 1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoprhkyps_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x % 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp0v0b_2uo_test.go:45: expected '001', got '1110100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp0v0b_2uo_test.go:45: expected '12', got '00112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp0v0b_2uo_test.go:45: expected '79', got '00000000000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp0v0b_2uo_test.go:45: expected '21', got '112'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp0v0b_2uo_test.go:45: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmprx5bxij7_test.go:39: expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmprx5bxij7_test.go:39: expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmprx5bxij7_test.go:39: expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmprx5bxij7_test.go:39: expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmprx5bxij7_test.go:39: expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmprx5bxij7_test.go:39: expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x%10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp13g0iofh_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp13g0iofh_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp13g0iofh_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp13g0iofh_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x%10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x%10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp0igcdkjn_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp0igcdkjn_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp0igcdkjn_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp0igcdkjn_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp0igcdkjn_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result) - shift; i++ {\n        result = result[i + shift:] + result[:shift]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Write your code here\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result) - shift; i++ {\n        result = result[i+shift:] + result[:shift]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7dlimldk_test.go:45: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7dlimldk_test.go:45: expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7dlimldk_test.go:45: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7dlimldk_test.go:45: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7dlimldk_test.go:45: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result) - shift; i++ {\n        result = result[i + shift:] + result[:shift]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - i - 1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoprhkyps_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result)-i-1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy3qzp39h_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x%10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp13g0iofh_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp13g0iofh_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp13g0iofh_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp13g0iofh_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i:] + result[:i]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '79', got '00007900'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - i - 1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoprhkyps_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Your code here\n    var result string\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        result = fmt.Sprintf(\"%d\", x)\n    } else {\n        result = \"\"\n        for i := 0; i < shift; i++ {\n            result = fmt.Sprintf(\"%d%s\", x%10, result)\n            x = x / 10\n        }\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp9hhz06vg_test.go:47: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp9hhz06vg_test.go:47: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp9hhz06vg_test.go:47: expected '21', got '2'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x%10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp13g0iofh_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp13g0iofh_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp13g0iofh_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp13g0iofh_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp89eeyxf9_test.go:39: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    if shift > len(result) {\n        result = result + result[len(result) - shift:]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpnkhe3mhd_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpnkhe3mhd_test.go:44: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpnkhe3mhd_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpnkhe3mhd_test.go:44: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - 1 - i]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa_iitnz8_test.go:22:16: cannot use result[i] + result[len(result) - 1 - i] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmprx5bxij7_test.go:39: expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmprx5bxij7_test.go:39: expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result)-i-1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy3qzp39h_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    if shift > len(result) {\n        result = result[len(result) - shift:]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - i - 1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoprhkyps_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result) - shift; i++ {\n        result = result[i + shift:] + result[:shift]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        x *= 10\n        result = fmt.Sprintf(\"%d%s\", x, result[i])\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp2is7jxox_test.go:23:18: Sprintf format %s has arg result[i] of wrong type byte\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmprx5bxij7_test.go:39: expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmprx5bxij7_test.go:39: expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i:] + result[:i]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '79', got '00007900'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpnpp9fmed_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - i - 1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoprhkyps_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        if i < len(result) - shift {\n            result = result[i + shift:] + result[:i + shift]\n        }\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpqvrz638z_test.go:46: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpqvrz638z_test.go:46: expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpqvrz638z_test.go:46: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpqvrz638z_test.go:46: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpqvrz638z_test.go:46: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp4m0afmol_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4m0afmol_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4m0afmol_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp4m0afmol_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result) - i - 1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoprhkyps_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i] + result[len(result)-i-1]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy3qzp39h_test.go:22:16: cannot use result[i] + result[len(result) - i - 1] (type byte) as type string in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x%10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp13g0iofh_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp13g0iofh_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp13g0iofh_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp13g0iofh_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n        x = x / 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmppohfshwy_test.go:41: expected '001', got '10100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppohfshwy_test.go:41: expected '12', got '112'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmppohfshwy_test.go:41: expected '79', got '000000997'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmppohfshwy_test.go:41: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppohfshwy_test.go:41: expected '11', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result) - shift; i++ {\n        result = result[i + shift:] + result[:shift]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmphe1d_kqn_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[0:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpvd4zop60_test.go:39: expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpvd4zop60_test.go:39: expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    if shift > len(result) {\n        result = result[len(result) - shift:]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp1vruk9lk_test.go:44: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7y88ntwz_test.go:41: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Write your code here\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\", x % 10)\n        x /= 10\n    }\n    for i := 0; i < len(result); i++ {\n        result = result[i:] + result[:i]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpxiqkncjm_test.go:45: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpxiqkncjm_test.go:45: expected '79', got '00007900'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpxiqkncjm_test.go:45: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpxiqkncjm_test.go:45: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x) + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '001', got '100100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '12', got '1212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '79', got '9797979797979797'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpedpkdnr8_test.go:40: expected '11', got '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result string\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d\", x % 10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp7yy95z70_test.go:45: expected '001', got '0100'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7yy95z70_test.go:45: expected '12', got '0012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp7yy95z70_test.go:45: expected '79', got '0000000000000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7yy95z70_test.go:45: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7yy95z70_test.go:45: expected '11', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}