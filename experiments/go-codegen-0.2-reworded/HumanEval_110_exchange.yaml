name: HumanEval_110_exchange
language: go_test.go
prompt: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ In this problem, you will implement a function that takes two lists of numbers,\n\
  // and determines whether it is possible to perform an exchange of elements\n//\
  \ between them to make lst1 a list of only even numbers.\n// There is no limit on\
  \ the number of exchanged elements between lst1 and lst2.\n// If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n// all the elements of\
  \ lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
  // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
  \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
  \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n"
tests: "func TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\"\
  \ },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
  \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
  \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
  \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
  \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5, 1,\
  \ 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
  \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
