name: HumanEval_111_histogram
language: go_test.go
prompt: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given a string representing a space separated lowercase letters, return a map\n\
  // of the letter with the most repetition and containing the corresponding count.\n\
  // If several letters have the same occurrence, return all of them.\n// Example:\n\
  // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n//\
  \ >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
  a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b\
  \ a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
  func histogram(test string) map[string]int {\n"
tests: "func TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\"\
  : 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
  a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
  a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
  r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
  \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
  \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n\
  \     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual: candidate(\"\
  a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var histogram map[string]int\n    for _, letter := range test {\n\
    \        if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    // Your code here\n \
    \   return nil\n}\n", "    var result map[string]int\n    for _, c := range test\
    \ {\n        if _, ok := result[string(c)]; !ok {\n            result[string(c)]\
    \ = 0\n        }\n        result[string(c)]++\n    }\n    return result\n}\n",
  "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if histogram == nil {\n          \
    \  histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var result map[string]int\n    for _, letter\
    \ := range test {\n        if _, ok := result[string(letter)]; !ok {\n       \
    \     result[string(letter)] = 0\n        }\n        result[string(letter)]++\n\
    \    }\n    return result\n}\n", "    var result map[string]int\n    for _, letter\
    \ := range test {\n        if _, ok := result[string(letter)]; !ok {\n       \
    \     result[string(letter)] = 0\n        }\n        result[string(letter)]++\n\
    \    }\n    return result\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ _, ok := histogram[string(letter)]; !ok {\n            histogram[string(letter)]\
    \ = 0\n        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var result map[string]int\n    for _, c := range test {\n        if\
    \ _, ok := result[string(c)]; !ok {\n            result[string(c)] = 0\n     \
    \   }\n        result[string(c)]++\n    }\n    return result\n}\n", "    var histogram\
    \ map[string]int\n    for _, letter := range test {\n        if histogram == nil\
    \ {\n            histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        if _, ok := histogram[string(letter)];\
    \ !ok {\n            histogram[string(letter)] = 0\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ // Your code here\n    return nil\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    var histogram map[string]int\n    for _, letter := range test\
    \ {\n        if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    // Your code here\n \
    \   return nil\n}\n", "    // Your code here\n    return nil\n}\n", "    histogram\
    \ := make(map[string]int)\n    for _, letter := range test {\n        if _, ok\
    \ := histogram[string(letter)]; !ok {\n            histogram[string(letter)] =\
    \ 1\n        } else {\n            histogram[string(letter)]++\n        }\n  \
    \  }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        if _, ok := histogram[string(letter)];\
    \ !ok {\n            histogram[string(letter)] = 0\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if histogram == nil {\n          \
    \  histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    // Your code here\n    return nil\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    var histogram map[string]int\n    for _, letter := range test\
    \ {\n        if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var result map[string]int\n    for _, letter := range test {\n    \
    \    if result == nil {\n            result = make(map[string]int)\n        }\n\
    \        if _, ok := result[string(letter)]; !ok {\n            result[string(letter)]\
    \ = 0\n        }\n        result[string(letter)]++\n    }\n    return result\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if histogram == nil {\n          \
    \  histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var result map[string]int\n    for _,\
    \ letter := range test {\n        if _, ok := result[string(letter)]; !ok {\n\
    \            result[string(letter)] = 0\n        }\n        result[string(letter)]++\n\
    \    }\n    return result\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var result map[string]int\n    for _, letter := range test {\n        if result\
    \ == nil {\n            result = make(map[string]int)\n        }\n        result[string(letter)]++\n\
    \    }\n    return result\n}\n", "    // Your code here\n    return nil\n}\n",
  "    // Your code here\n    return nil\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    var histogram map[string]int\n    for _, letter := range test\
    \ {\n        if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    // Your code here\n \
    \   return nil\n}\n", "    // Your code here\n    return nil\n}\n", "    var histogram\
    \ map[string]int\n    for _, letter := range test {\n        if _, ok := histogram[string(letter)];\
    \ !ok {\n            histogram[string(letter)] = 1\n        } else {\n       \
    \     histogram[string(letter)]++\n        }\n    }\n    return histogram\n}\n",
  "    // Your code here\n    return nil\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    var histogram map[string]int\n    for _, letter := range test\
    \ {\n        if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if _, ok := histogram[string(letter)]; !ok {\n            histogram[string(letter)]\
    \ = 0\n        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if _, ok := histogram[string(letter)];\
    \ !ok {\n            histogram[string(letter)] = 0\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ _, ok := histogram[string(letter)]; !ok {\n            histogram[string(letter)]\
    \ = 0\n        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    // Your code here\n \
    \   return nil\n}\n", "    var histogram map[string]int\n    for _, letter :=\
    \ range test {\n        if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if histogram == nil {\n          \
    \  histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var result map[string]int\n    for _, letter\
    \ := range test {\n        if result == nil {\n            result = make(map[string]int)\n\
    \        }\n        if _, ok := result[string(letter)]; ok {\n            result[string(letter)]++\n\
    \        } else {\n            result[string(letter)] = 1\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n    return nil\n}\n", "    //\
    \ Your code here\n    return nil\n}\n", "    var histogram map[string]int\n  \
    \  for _, letter := range test {\n        if _, ok := histogram[string(letter)];\
    \ !ok {\n            histogram[string(letter)] = 0\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    // Your code here\n    return nil\n}\n", "    var result map[string]int\n \
    \   for _, letter := range test {\n        if _, ok := result[string(letter)];\
    \ !ok {\n            result[string(letter)] = 1\n        } else {\n          \
    \  result[string(letter)]++\n        }\n    }\n    return result\n}\n", "    var\
    \ histogram map[string]int\n    for _, letter := range test {\n        if _, ok\
    \ := histogram[string(letter)]; !ok {\n            histogram[string(letter)] =\
    \ 0\n        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    // Your code here\n \
    \   return nil\n}\n", "    // Your code here\n    return nil\n}\n", "    var result\
    \ map[string]int\n    for _, letter := range test {\n        if _, ok := result[string(letter)];\
    \ !ok {\n            result[string(letter)] = 0\n        }\n        result[string(letter)]++\n\
    \    }\n    return result\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var result map[string]int\n    for _, c := range test {\n        if _, ok :=\
    \ result[string(c)]; !ok {\n            result[string(c)] = 0\n        }\n   \
    \     result[string(c)]++\n    }\n    return result\n}\n", "    var histogram\
    \ map[string]int\n    for _, letter := range test {\n        if _, ok := histogram[string(letter)];\
    \ !ok {\n            histogram[string(letter)] = 0\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ // Your code here\n    return nil\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    var histogram map[string]int\n    for _, letter := range test\
    \ {\n        if _, ok := histogram[string(letter)]; !ok {\n            histogram[string(letter)]\
    \ = 0\n        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if histogram == nil {\n          \
    \  histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var result map[string]int\n    for _,\
    \ letter := range test {\n        if result == nil {\n            result = make(map[string]int)\n\
    \        }\n        if _, ok := result[string(letter)]; ok {\n            result[string(letter)]++\n\
    \        } else {\n            result[string(letter)] = 1\n        }\n    }\n\
    \    return result\n}\n", "    var result map[string]int\n    for _, letter :=\
    \ range test {\n        if result == nil {\n            result = make(map[string]int)\n\
    \        }\n        if _, ok := result[string(letter)]; ok {\n            result[string(letter)]++\n\
    \        } else {\n            result[string(letter)] = 1\n        }\n    }\n\
    \    return result\n}\n", "    var histogram map[string]int\n    for _, letter\
    \ := range test {\n        if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        if _, ok := histogram[string(letter)]; !ok {\n           \
    \ histogram[string(letter)] = 0\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    // Your code here\n    return nil\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    var histogram map[string]int\n    for _, letter := range test\
    \ {\n        if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    // Your code here\n \
    \   return nil\n}\n", "    // Your code here\n    return nil\n}\n", "    var histogram\
    \ map[string]int\n    for _, letter := range test {\n        if histogram == nil\
    \ {\n            histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var result map[string]int\n    for _, letter\
    \ := range test {\n        if _, ok := result[string(letter)]; !ok {\n       \
    \     result[string(letter)] = 0\n        }\n        result[string(letter)]++\n\
    \    }\n    return result\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var result map[string]int\n    for _, c := range test {\n        if result ==\
    \ nil {\n            result = make(map[string]int)\n        }\n        result[string(c)]++\n\
    \    }\n    return result\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        if _, ok := histogram[string(letter)]; !ok {\n            histogram[string(letter)]\
    \ = 0\n        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var result map[string]int\n    for _, c := range test {\n        if\
    \ _, ok := result[string(c)]; ok {\n            result[string(c)]++\n        }\
    \ else {\n            result[string(c)] = 1\n        }\n    }\n    return result\n\
    }\n", "    histogram := make(map[string]int)\n    for _, letter := range test\
    \ {\n        if _, ok := histogram[string(letter)]; ok {\n            histogram[string(letter)]++\n\
    \        } else {\n            histogram[string(letter)] = 1\n        }\n    }\n\
    \    return histogram\n}\n", "    // Your code here\n    return nil\n}\n", " \
    \   var result map[string]int\n    for _, letter := range test {\n        if _,\
    \ ok := result[string(letter)]; !ok {\n            result[string(letter)] = 1\n\
    \        } else {\n            result[string(letter)]++\n        }\n    }\n  \
    \  return result\n}\n", "    // Your code here\n    return nil\n}\n", "    var\
    \ histogram map[string]int\n    for _, letter := range test {\n        if histogram\
    \ == nil {\n            histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var result map[string]int\n    for _, letter := range test {\n        if _,\
    \ ok := result[string(letter)]; !ok {\n            result[string(letter)] = 0\n\
    \        }\n        result[string(letter)]++\n    }\n    return result\n}\n",
  "    // Your code here\n    return nil\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    // Your code here\n    return nil\n}\n", "    // Your code here\n\
    \    return nil\n}\n", "    var histogram map[string]int\n    for _, letter :=\
    \ range test {\n        if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if histogram == nil {\n          \
    \  histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if _, ok := histogram[string(letter)]; !ok {\n\
    \            histogram[string(letter)] = 0\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var result map[string]int\n    for _, c := range test {\n        if _, ok :=\
    \ result[string(c)]; !ok {\n            result[string(c)] = 0\n        }\n   \
    \     result[string(c)]++\n    }\n    return result\n}\n", "    var histogram\
    \ map[string]int\n    for _, letter := range test {\n        if histogram == nil\
    \ {\n            histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var result map[string]int\n    for _, letter := range test {\n        if _,\
    \ ok := result[string(letter)]; !ok {\n            result[string(letter)] = 0\n\
    \        }\n        result[string(letter)]++\n    }\n    return result\n}\n",
  "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if histogram == nil {\n          \
    \  histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    // Your code here\n    return nil\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    var histogram map[string]int\n    for _, letter := range test\
    \ {\n        if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if histogram == nil {\n          \
    \  histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if _, ok := histogram[string(letter)]; !ok\
    \ {\n            histogram[string(letter)] = 1\n        } else {\n           \
    \ histogram[string(letter)]++\n        }\n    }\n    return histogram\n}\n", " \
    \   var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var result map[string]int\n    for _, c := range test {\n        if result ==\
    \ nil {\n            result = make(map[string]int)\n        }\n        if _, ok\
    \ := result[string(c)]; ok {\n            result[string(c)]++\n        } else\
    \ {\n            result[string(c)] = 1\n        }\n    }\n    return result\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if _, ok := histogram[string(letter)]; !ok {\n            histogram[string(letter)]\
    \ = 0\n        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram map[string]int\n    for _, letter := range test {\n \
    \       if histogram == nil {\n            histogram = make(map[string]int)\n\
    \        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    histogram := make(map[string]int)\n    for _, letter := range test\
    \ {\n        if _, ok := histogram[string(letter)]; ok {\n            histogram[string(letter)]\
    \ += 1\n        } else {\n            histogram[string(letter)] = 1\n        }\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        if _, ok := histogram[string(letter)];\
    \ !ok {\n            histogram[string(letter)] = 0\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        if _, ok := histogram[string(letter)];\
    \ !ok {\n            histogram[string(letter)] = 0\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram map[string]int\n    for\
    \ _, letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        if _, ok := histogram[string(letter)];\
    \ !ok {\n            histogram[string(letter)] = 1\n        } else {\n       \
    \     histogram[string(letter)]++\n        }\n    }\n    return histogram\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ _, ok := histogram[string(letter)]; !ok {\n            histogram[string(letter)]\
    \ = 0\n        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if histogram == nil {\n          \
    \  histogram = make(map[string]int)\n        }\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var result map[string]int\n    for _,\
    \ c := range test {\n        if result == nil {\n            result = make(map[string]int)\n\
    \        }\n        if _, ok := result[string(c)]; !ok {\n            result[string(c)]\
    \ = 0\n        }\n        result[string(c)]++\n    }\n    return result\n}\n",
  "    var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        if _, ok := histogram[string(letter)]; !ok {\n            histogram[string(letter)]\
    \ = 0\n        }\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var result map[string]int\n    for _, letter := range test {\n    \
    \    if _, ok := result[string(letter)]; !ok {\n            result[string(letter)]\
    \ = 0\n        }\n        result[string(letter)]++\n    }\n    return result\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    // Your code here\n \
    \   return nil\n}\n", "    var result map[string]int\n    for _, letter := range\
    \ test {\n        if _, ok := result[string(letter)]; !ok {\n            result[string(letter)]\
    \ = 1\n        } else {\n            result[string(letter)]++\n        }\n   \
    \ }\n    return result\n}\n", "    // Your code here\n    return nil\n}\n", " \
    \   var histogram map[string]int\n    for _, letter := range test {\n        if\
    \ histogram == nil {\n            histogram = make(map[string]int)\n        }\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ var result map[string]int\n    for _, c := range test {\n        if _, ok :=\
    \ result[string(c)]; !ok {\n            result[string(c)] = 0\n        }\n   \
    \     result[string(c)]++\n    }\n    return result\n}\n", "    // Your code here\n\
    \    return nil\n}\n", "    var result map[string]int\n    for _, letter := range\
    \ test {\n        if _, ok := result[string(letter)]; ok {\n            result[string(letter)]++\n\
    \        } else {\n            result[string(letter)] = 1\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n    return nil\n}\n", "    //\
    \ Your code here\n    return nil\n}\n", "    var result map[string]int\n    for\
    \ _, letter := range test {\n        if result == nil {\n            result =\
    \ make(map[string]int)\n        }\n        if _, ok := result[string(letter)];\
    \ !ok {\n            result[string(letter)] = 0\n        }\n        result[string(letter)]++\n\
    \    }\n    return result\n}\n", "    var histogram map[string]int\n    for _,\
    \ letter := range test {\n        if histogram == nil {\n            histogram\
    \ = make(map[string]int)\n        }\n        histogram[string(letter)]++\n   \
    \ }\n    return histogram\n}\n", "    // Your code here\n    return nil\n}\n",
  "    // Your code here\n    return nil\n}\n", "    var histogram map[string]int\n\
    \    for _, letter := range test {\n        if _, ok := histogram[string(letter)];\
    \ !ok {\n            histogram[string(letter)] = 1\n        } else {\n       \
    \     histogram[string(letter)]++\n        }\n    }\n    return histogram\n}\n",
  "    // Your code here\n    return nil\n}\n", "    var result map[string]int\n \
    \   for _, letter := range test {\n        if _, ok := result[string(letter)];\
    \ !ok {\n            result[string(letter)] = 1\n        } else {\n          \
    \  result[string(letter)]++\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
