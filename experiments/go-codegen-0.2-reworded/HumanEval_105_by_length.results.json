{
  "name": "HumanEval_105_by_length",
  "language": "go_test.go",
  "prompt": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n",
  "tests": "func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            arr = append(arr[:i], arr[i+1:]...)\n            i--\n        }\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = fmt.Sprintf(\"%d\", arr[i])\n    }\n\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwz3uba__test.go:33:16: cannot use fmt.Sprintf(\"%d\", arr[i]) (type string) as type int in assignment\n/tmp/tmpzwz3uba__test.go:36:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%d\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmp7ux_ibwa_test.go:58: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmp7ux_ibwa_test.go:58: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp7ux_ibwa_test.go:58: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp7ux_ibwa_test.go:58: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 9 || arr[i] < 1 {\n            continue\n        }\n        \n        result = append(result, fmt.Sprintf(\"%s\", arr[i]))\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmppmkrhy0m_test.go:31:33: Sprintf format %s has arg arr[i] of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            arr[i] = 0\n        }\n    }\n\n    arr = arr[:len(arr)]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[:len(arr)-1]\n    arr = arr[\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpordr_cax_test.go:66:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace the digits by their corresponding names\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the array using the bubble sort algorithm.\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplnbwks4g_test.go:26:11: undefined: by_length_sort\n/tmp/tmplnbwks4g_test.go:29:11: undefined: by_length_reverse\n/tmp/tmplnbwks4g_test.go:32:11: undefined: by_length_replace\n/tmp/tmplnbwks4g_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpeelisdri_test.go:53: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpeelisdri_test.go:53: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpeelisdri_test.go:53: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpeelisdri_test.go:53: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpeu33z4vn_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpeu33z4vn_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    sort_arr := arr\n    sort.Ints(sort_arr)\n    \n    // reverse the array\n    rev_arr := make([]int, len(sort_arr))\n    for i, v := range sort_arr {\n        rev_arr[i] = v\n    }\n    \n    // convert the array to string\n    str_arr := make([]string, len(sort_arr))\n    for i, v := range sort_arr {\n        str_arr[i] = fmt.Sprintf(\"%d\", v)\n    }\n    \n    // replace the digits by their corresponding names\n    for i, v := range str_arr {\n        if v == \"1\" {\n            str_arr[i] = \"One\"\n        } else if v == \"2\" {\n            str_arr[i] = \"Two\"\n        } else if v == \"3\" {\n            str_arr[i] = \"Three\"\n        } else if v == \"4\" {\n            str_arr[i] = \"Four\"\n        } else if v == \"5\" {\n            str_arr[i] = \"Five\"\n        } else if v == \"6\" {\n            str_arr[i] = \"Six\"\n        } else if v == \"7\" {\n            str_arr[i] = \"Seven\"\n        } else if v == \"8\" {\n            str_arr[i] = \"Eight\"\n        } else if v == \"9\" {\n            str_arr[i] = \"Nine\"\n        }\n    }\n    \n    return str_arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm5a_cn7p_test.go:27:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, digit_to_name(v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = reverse_string(v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjg0ijq4x_test.go:28:37: undefined: digit_to_name\n/tmp/tmpjg0ijq4x_test.go:33:21: undefined: reverse_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        \n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp848ztbub_test.go:32:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr_len := len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            arr[i] = 0\n        } else {\n            arr[i] = arr[i] - 1\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] == 0 {\n            arr[i] = 9\n        } else {\n            arr[i] = arr[i] + 1\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        arr[i] = arr[i] + 1\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] == 10 {\n            arr[i] = 0\n        } else {\n            arr[i] = arr[i] - 1\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] == 0 {\n            arr[i] = 9\n        } else {\n            arr[i] = arr[i] + 1\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        arr[i] = arr[i] + 1\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] == 10 {\n            arr[i] = 0\n        } else {\n            arr[i] = arr[i] - 1\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgblnmz09_test.go:91:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpj8oma6tx_test.go:30:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = result[i][0:1] + \" \" + result[i][1:]\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp85tlsiis_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfyjm6f_h_test.go:25:11: undefined: by_length_helper\n/tmp/tmpfyjm6f_h_test.go:27:11: undefined: reverse\n/tmp/tmpfyjm6f_h_test.go:29:11: undefined: by_length_helper\n/tmp/tmpfyjm6f_h_test.go:31:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v < 10 && v > 0 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmp9d1yo00h_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmp9d1yo00h_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp9d1yo00h_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp9d1yo00h_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    sort_arr := arr\n    sort.Ints(sort_arr)\n    \n    // reverse the array\n    sort_arr = reverse_arr(sort_arr)\n    \n    // convert the array to string\n    str_arr := make([]string, len(sort_arr))\n    for i, v := range sort_arr {\n        str_arr[i] = fmt.Sprintf(\"%d\", v)\n    }\n    \n    return str_arr\n}\n\n// reverse the array\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsovtvp_x_test.go:27:5: undefined: sort\n/tmp/tmpsovtvp_x_test.go:30:16: undefined: reverse_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace each digit by its corresponding name\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2ugeyy8z_test.go:26:11: undefined: by_length_sort\n/tmp/tmp2ugeyy8z_test.go:29:11: undefined: by_length_reverse\n/tmp/tmp2ugeyy8z_test.go:32:11: undefined: by_length_replace\n/tmp/tmp2ugeyy8z_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpzbdk0mjn_test.go:26:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            arr[i] = 0\n        }\n    }\n\n    arr = arr[:len(arr)]\n    arr = arr[::-1]\n\n    arr = arr[:len(arr)]\n    arr = arr[::-1]\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = fmt.Sprintf(\"%d\", arr[i])\n    }\n\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8l2jy370_test.go:32:15: 2nd index required in 3-index slice\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // Sort the array\n    arr = by_length_sort(arr)\n    \n    // Reverse the array\n    arr = by_length_reverse(arr)\n    \n    // Replace each digit by its corresponding name\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the array\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj7g5wijw_test.go:26:11: undefined: by_length_sort\n/tmp/tmpj7g5wijw_test.go:29:11: undefined: by_length_reverse\n/tmp/tmpj7g5wijw_test.go:32:11: undefined: by_length_replace\n/tmp/tmpj7g5wijw_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // Sort the array\n    arr = by_length_sort(arr)\n    \n    // Reverse the array\n    arr = by_length_reverse(arr)\n    \n    // Replace each digit by its corresponding name\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdwhcjpui_test.go:26:11: undefined: by_length_sort\n/tmp/tmpdwhcjpui_test.go:29:11: undefined: by_length_reverse\n/tmp/tmpdwhcjpui_test.go:32:11: undefined: by_length_replace\n/tmp/tmpdwhcjpui_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr_len := len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            arr[i] = 0\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 0 && arr[i] < 10 {\n            arr[i] = arr[i] - 1\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 0 && arr[i] < 10 {\n            arr[i] = arr[i] + 1\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 0 && arr[i] < 10 {\n            arr[i] = arr[i]\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 0 && arr[i] < 10 {\n            arr[i] = arr[i]\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 0 && arr[i] < 10 {\n            arr[i] = arr[i]\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 0 && arr[i] < 10 {\n            arr[i] = arr[i]\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 0 && arr[i]\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpz1anyqae_test.go:85:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace each digit by its corresponding name\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the array\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4_1rjhj1_test.go:26:11: undefined: by_length_sort\n/tmp/tmp4_1rjhj1_test.go:29:11: undefined: by_length_reverse\n/tmp/tmp4_1rjhj1_test.go:32:11: undefined: by_length_replace\n/tmp/tmp4_1rjhj1_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n\n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpk79jeexk_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpk79jeexk_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpk79jeexk_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpk79jeexk_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace the numbers by their corresponding name\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmllcw422_test.go:26:11: undefined: by_length_sort\n/tmp/tmpmllcw422_test.go:29:11: undefined: by_length_reverse\n/tmp/tmpmllcw422_test.go:32:11: undefined: by_length_replace\n/tmp/tmpmllcw422_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace each digit by its corresponding name\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2ugeyy8z_test.go:26:11: undefined: by_length_sort\n/tmp/tmp2ugeyy8z_test.go:29:11: undefined: by_length_reverse\n/tmp/tmp2ugeyy8z_test.go:32:11: undefined: by_length_replace\n/tmp/tmp2ugeyy8z_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpeu33z4vn_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmppc28l89x_test.go:29:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace each digit by its corresponding name\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the given array.\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq7lkzh2d_test.go:26:11: undefined: by_length_sort\n/tmp/tmpq7lkzh2d_test.go:29:11: undefined: by_length_reverse\n/tmp/tmpq7lkzh2d_test.go:32:11: undefined: by_length_replace\n/tmp/tmpq7lkzh2d_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    arr_len := len(arr)\n    arr_len_range := arr_len - 1\n    arr_len_range_range := arr_len_range - 1\n    arr_len_range_range_range := arr_len_range_range - 1\n    arr_len_range_range_range_range := arr_len_range_range_range - 1\n    arr_len_range_range_range_range_range := arr_len_range_range_range_range - 1\n    arr_len_range_range_range_range_range_range := arr_len_range_range_range_range_range - 1\n    arr_len_range_range_range_range_range_range_range := arr_len_range_range_range_range_range_range - 1\n    arr_len_range_range_range_range_range_range_range_range := arr_len_range_range_range_range_range_range_range - 1\n    arr_len_range_range_range_range_range_range_range_range_range := arr_len_range_range_range_range_range_range_range_range - 1\n    arr_len_range_range_range_range_range_range_range_range_range_range := arr_len_range_range_range_range_range_range_range_range_range - 1\n    arr_len_range_range_range_range_range_range_range_range_range_range_range := arr_len_range_range_range_range_range_range_range_range_range_range - 1\n    arr_len_range_range_range_range_range_range_range_range_range_range_range_range := arr_len_range_range_range_range_range_range_range_range_range_range_range - 1\n    arr_len_range_range_range_range_range_range_range_range_range_range_range_range_range := arr_len_range_range_range_range_range_range_range_range_range_range_range_range - 1\n    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmptu24o7g9_test.go:40:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // Sort the array\n    sort_arr := arr\n    sort.Ints(sort_arr)\n    \n    // Reverse the array\n    sort_arr = reverse_arr(sort_arr)\n    \n    // Create the result array\n    result := make([]string, len(sort_arr))\n    \n    // Iterate over the array\n    for i, v := range sort_arr {\n        if v >= 1 && v <= 9 {\n            result[i] = fmt.Sprintf(\"%s\", v)\n        }\n    }\n    \n    return result\n}\n\n// Reverse the elements of the given array\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2moxtwqc_test.go:27:5: undefined: sort\n/tmp/tmp2moxtwqc_test.go:30:16: undefined: reverse_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    \n    result := []string{}\n    for _, v := range arr {\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp86iwk9er_test.go:25:11: undefined: by_length_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0liqpwca_test.go:90:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 && arr[i] > 0 {\n            arr[i] = \"One\" + string(arr[i])\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 && arr[i] > 0 {\n            arr[i] = \"Two\" + string(arr[i])\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 && arr[i] > 0 {\n            arr[i] = \"Three\" + string(arr[i])\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 && arr[i] > 0 {\n            arr[i] = \"Four\" + string(arr[i])\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 && arr[i] > 0 {\n            arr[i] = \"Five\" + string(arr[i])\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 && arr[i] > 0 {\n            arr[i] = \"Six\" + string(arr[i])\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 && arr[i] > 0 {\n            arr[i] = \"Seven\" + string(arr[i])\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 && arr[i] > 0 {\n            arr[i] = \"Eight\" + string(arr[i])\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 && arr[i] > 0 {\n            arr[i] = \"Nine\" + string\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmrbebst3_test.go:67:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace the digits with their corresponding names\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the array\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetlhc3ml_test.go:26:11: undefined: by_length_sort\n/tmp/tmpetlhc3ml_test.go:29:11: undefined: by_length_reverse\n/tmp/tmpetlhc3ml_test.go:32:11: undefined: by_length_replace\n/tmp/tmpetlhc3ml_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace the digits by their corresponding names\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the array\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbj208nai_test.go:26:11: undefined: by_length_sort\n/tmp/tmpbj208nai_test.go:29:11: undefined: by_length_reverse\n/tmp/tmpbj208nai_test.go:32:11: undefined: by_length_replace\n/tmp/tmpbj208nai_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpr324rwse_test.go:24:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace each digit by its corresponding name\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the array using the bubble sort algorithm.\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsg9omo50_test.go:26:11: undefined: by_length_sort\n/tmp/tmpsg9omo50_test.go:29:11: undefined: by_length_reverse\n/tmp/tmpsg9omo50_test.go:32:11: undefined: by_length_replace\n/tmp/tmpsg9omo50_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        \n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp848ztbub_test.go:32:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", one_nine[v-1]))\n    }\n    for i, v := range result {\n        result[i] = v[0:len(v)-1]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpshsl_uru_test.go:30:51: undefined: one_nine\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    \n    result := []string{}\n    for _, v := range arr {\n        result = append(result, fmt.Sprintf(\"%s\", by_length_digit(v)))\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpic3hux2b_test.go:25:11: undefined: by_length_helper\n/tmp/tmpic3hux2b_test.go:29:51: undefined: by_length_digit\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{\"One\"}\n    }\n    result := make([]string, len(arr))\n    for i, v := range arr {\n        if v < 1 || v > 9 {\n            result[i] = \"One\"\n        } else {\n            result[i] = fmt.Sprintf(\"%s\", v)\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbli82s0f_test.go:32:25: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // Sort the array\n    sort_arr := arr\n    sort.Ints(sort_arr)\n    \n    // Reverse the array\n    rev_arr := make([]int, len(sort_arr))\n    for i, v := range sort_arr {\n        rev_arr[len(sort_arr) - i - 1] = v\n    }\n    \n    // Convert the array to a string\n    str_arr := make([]string, len(rev_arr))\n    for i, v := range rev_arr {\n        if v > 9 || v < 1 {\n            str_arr[i] = \"One\"\n        } else {\n            str_arr[i] = fmt.Sprintf(\"%d\", v)\n        }\n    }\n    \n    return str_arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprg3egoky_test.go:27:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5h0dpa4p_test.go:63:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 || arr[i] > 9 {\n            arr[i] = 0\n        } else {\n            arr[i] = arr[i] - 1\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    for i := 0; i < len(arr\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2gwwav89_test.go:70:28: missing ',' before newline in argument list\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpd0773t3n_test.go:29:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpt59q2wnf_test.go:29:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_sort(arr)\n    \n    arr = by_length_reverse(arr)\n    \n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplxlaay_v_test.go:25:11: undefined: by_length_sort\n/tmp/tmplxlaay_v_test.go:27:11: undefined: by_length_reverse\n/tmp/tmplxlaay_v_test.go:29:11: undefined: by_length_replace\n/tmp/tmplxlaay_v_test.go:31:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpt6371sm__test.go:30:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = by_length_helper(\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374754,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0liqpwca_test.go:90:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp1wcg8fpa_test.go:30:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    \n    return by_length_helper(arr)\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2xydw24e_test.go:25:11: undefined: by_length_helper\n/tmp/tmp2xydw24e_test.go:26:11: undefined: by_length_helper\n/tmp/tmp2xydw24e_test.go:28:12: undefined: by_length_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{\"One\"}\n    }\n    if arr[len(arr) - 1] < 1 || arr[len(arr) - 1] > 9 {\n        return []string{\"Nine\"}\n    }\n    \n    arr_len := len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            arr[i] = 1\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] < 10 {\n            arr[i] = arr[i] + 1\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 9 {\n            arr[i] = arr[i] - 1\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] < 10 {\n            arr[i] = arr[i] + 1\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 9 {\n            arr[i] = arr[i] - 1\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] < 10 {\n            arr[i] = arr[i] + 1\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 9 {\n            arr[i] = arr[i] - 1\n        }\n    }\n    \n    arr_len = len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] < 10 {\n            arr[i] = arr[i] + 1\n        }\n    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpm0uc7s_t_test.go:87:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // Sort the array\n    sort_arr := arr\n    sort.Ints(sort_arr)\n    \n    // Reverse the array\n    rev_arr := make([]int, len(sort_arr))\n    for i := 0; i < len(sort_arr); i++ {\n        rev_arr[i] = sort_arr[len(sort_arr) - i - 1]\n    }\n    \n    // Convert the array to a string\n    str_arr := make([]string, len(rev_arr))\n    for i := 0; i < len(rev_arr); i++ {\n        str_arr[i] = fmt.Sprintf(\"%d\", rev_arr[i])\n    }\n    \n    return str_arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd1jhdi1x_test.go:27:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpj8oma6tx_test.go:30:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // Sort the array\n    arr = by_length_sort(arr)\n    \n    // Reverse the array\n    arr = by_length_reverse(arr)\n    \n    // Replace the digits by their corresponding names\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the array\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6_l6d7cv_test.go:26:11: undefined: by_length_sort\n/tmp/tmp6_l6d7cv_test.go:29:11: undefined: by_length_reverse\n/tmp/tmp6_l6d7cv_test.go:32:11: undefined: by_length_replace\n/tmp/tmp6_l6d7cv_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0tukfbd2_test.go:26:11: undefined: by_length_sort\n/tmp/tmp0tukfbd2_test.go:29:11: undefined: by_length_reverse\n/tmp/tmp0tukfbd2_test.go:32:11: undefined: by_length_replace\n/tmp/tmp0tukfbd2_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5h0dpa4p_test.go:63:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpaiae_brv_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{\"One\"}\n    }\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpv7i82ogf_test.go:72:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        } else {\n            result = append(result, \"\")\n        }\n    }\n\n    for i, v := range result {\n        if len(v) == 1 {\n            result[i] = \"One\"\n        } else if len(v) == 2 {\n            result[i] = \"Two\"\n        } else if len(v) == 3 {\n            result[i] = \"Three\"\n        } else if len(v) == 4 {\n            result[i] = \"Four\"\n        } else if len(v) == 5 {\n            result[i] = \"Five\"\n        } else if len(v) == 6 {\n            result[i] = \"Six\"\n        } else if len(v) == 7 {\n            result[i] = \"Seven\"\n        } else if len(v) == 8 {\n            result[i] = \"Eight\"\n        } else if len(v) == 9 {\n            result[i] = \"Nine\"\n        }\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmprgflrj7k_test.go:76: expected '[Eight Five Four Three Two Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmprgflrj7k_test.go:76: expected '[One]', got '[One  ]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmprgflrj7k_test.go:76: expected '[Three Two One]', got '[One  One One]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprgflrj7k_test.go:76: expected '[Nine Eight Four]', got '[One One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        \n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp848ztbub_test.go:32:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // Sort the array\n    sort_arr := arr\n    sort.Ints(sort_arr)\n    \n    // Reverse the array\n    rev_arr := make([]int, len(sort_arr))\n    for i, v := range sort_arr {\n        rev_arr[i] = v\n    }\n    \n    // Convert the array to string\n    str_arr := make([]string, len(sort_arr))\n    for i, v := range sort_arr {\n        str_arr[i] = fmt.Sprintf(\"%d\", v)\n    }\n    \n    // Replace the digits\n    for i, v := range str_arr {\n        if v == \"One\" {\n            str_arr[i] = \"One\"\n        } else if v == \"Two\" {\n            str_arr[i] = \"Two\"\n        } else if v == \"Three\" {\n            str_arr[i] = \"Three\"\n        } else if v == \"Four\" {\n            str_arr[i] = \"Four\"\n        } else if v == \"Five\" {\n            str_arr[i] = \"Five\"\n        } else if v == \"Six\" {\n            str_arr[i] = \"Six\"\n        } else if v == \"Seven\" {\n            str_arr[i] = \"Seven\"\n        } else if v == \"Eight\" {\n            str_arr[i] = \"Eight\"\n        } else if v == \"Nine\" {\n            str_arr[i] = \"Nine\"\n        }\n    }\n    \n    return str_arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuzozu6mt_test.go:27:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpj8oma6tx_test.go:30:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    return by_length_helper(arr)\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpon66lt7z_test.go:25:11: undefined: by_length_helper\n/tmp/tmpon66lt7z_test.go:27:11: undefined: reverse\n/tmp/tmpon66lt7z_test.go:29:11: undefined: by_length_helper\n/tmp/tmpon66lt7z_test.go:31:12: undefined: by_length_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = append(arr, 9)\n    arr = append(arr, 8)\n    arr = append(arr, 7)\n    arr = append(arr, 6)\n    arr = append(arr, 5)\n    arr = append(arr, 4)\n    arr = append(arr, 3)\n    arr = append(arr, 2)\n    arr = append(arr, 1)\n    \n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] - 1\n    }\n    \n    arr = append(arr, 0)\n    \n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    \n    arr = append(arr, 9)\n    arr = append(arr, 8)\n    arr = append(arr, 7)\n    arr = append(arr, 6)\n    arr = append(arr, 5)\n    arr = append(arr, 4)\n    arr = append(arr, 3)\n    arr = append(arr, 2)\n    arr = append(arr, 1)\n    \n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] - 1\n    }\n    \n    arr = append(arr, 0)\n    \n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] + 1\n    }\n    \n    arr = append(arr, 9)\n    arr = append(arr, 8)\n    arr = append(arr, 7)\n    arr = append(arr, 6)\n    arr = append(arr, 5)\n    arr = append(arr, 4)\n    arr = append(arr, 3)\n    arr = append(arr, 2)\n    arr = append(arr, 1)\n    \n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] - 1\n    }\n    \n    arr = append(arr, 0)\n    \n    for i := 0; i <\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpppho5jep_test.go:82:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v < 10 && v > 0 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmp9d1yo00h_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmp9d1yo00h_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp9d1yo00h_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp9d1yo00h_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            arr = arr[:i]\n            break\n        }\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] - 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] * 10 + 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] - 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] * 10 + 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] - 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] * 10 + 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] - 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] * 10 + 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] - 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] * 10 + 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] - 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] * 10 + 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] - 1\n    }\n\n    for i := 0; i < len(arr); i\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpk_f8o4df_test.go:84:32: expected '{', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    \n    result := []string{}\n    for _, v := range arr {\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp86iwk9er_test.go:25:11: undefined: by_length_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5h0dpa4p_test.go:63:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{\"One\"}\n    }\n    var result []string\n    for _, v := range arr {\n        if v < 10 && v > 0 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if result[i] > result[j] {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpga5aqyaq_test.go:30:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 9 || arr[i] < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", arr[i]))\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpc5hljm7z_test.go:30:33: Sprintf format %s has arg arr[i] of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{\"One\"}\n    }\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr = by_length_helper(arr)\n    arr = reverse(arr)\n    arr\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpv7i82ogf_test.go:72:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    sort_arr := arr\n    sort.Ints(sort_arr)\n    \n    // reverse the array\n    for i, j := 0, len(sort_arr)-1; i < j; i, j = i+1, j-1 {\n        sort_arr[i], sort_arr[j] = sort_arr[j], sort_arr[i]\n    }\n    \n    // convert the array to string\n    result := make([]string, len(sort_arr))\n    for i, v := range sort_arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhx_ahdd_test.go:27:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{\"One\"}\n    }\n    var result []string\n    for _, v := range arr {\n        if v < 10 && v > 0 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpm9monfgj_test.go:30:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 9 || arr[i] < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpjxfze21u_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpjxfze21u_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpjxfze21u_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjxfze21u_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{}\n    }\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpag92er1j_test.go:63:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpd0773t3n_test.go:29:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{\"One\"}\n    }\n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 && arr[i] > 0 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        } else {\n            result = append(result, \"Nine\")\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpmry9ocaf_test.go:58: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpmry9ocaf_test.go:58: expected '[One]', got '[1 Nine Nine]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpmry9ocaf_test.go:58: expected '[Three Two One]', got '[1 Nine 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmry9ocaf_test.go:58: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%d\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpj5xrenu7_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpj5xrenu7_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpj5xrenu7_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpj5xrenu7_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        \n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp848ztbub_test.go:32:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{\"One\"}\n    }\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp81mji4vb_test.go:63:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkoq4g3ao_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace the digits by their corresponding name\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the given array in ascending order.\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2t9vtg2q_test.go:26:11: undefined: by_length_sort\n/tmp/tmp2t9vtg2q_test.go:29:11: undefined: by_length_reverse\n/tmp/tmp2t9vtg2q_test.go:32:11: undefined: by_length_replace\n/tmp/tmp2t9vtg2q_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmplf5e1qtx_test.go:28:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    // sort the array\n    sort_arr := arr\n    sort.Ints(sort_arr)\n\n    // reverse the array\n    rev_arr := make([]int, len(sort_arr))\n    for i, j := 0, len(sort_arr) - 1; i < j; i, j = i + 1, j - 1 {\n        rev_arr[i], rev_arr[j] = sort_arr[j], sort_arr[i]\n    }\n\n    // convert the array to string\n    str_arr := make([]string, len(sort_arr))\n    for i, j := 0, len(sort_arr) - 1; i < j; i, j = i + 1, j - 1 {\n        str_arr[i] = fmt.Sprintf(\"%d\", sort_arr[i])\n        str_arr[j] = fmt.Sprintf(\"%d\", sort_arr[j])\n    }\n\n    return str_arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcohf46_z_test.go:27:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpd0773t3n_test.go:29:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        } else {\n            result = append(result, \"\")\n        }\n    }\n\n    for i, v := range result {\n        if len(v) > 0 {\n            result[i] = string(v[0])\n        }\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpzzwrx4m0_test.go:60: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpzzwrx4m0_test.go:60: expected '[One]', got '[1  ]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpzzwrx4m0_test.go:60: expected '[Three Two One]', got '[1  3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpzzwrx4m0_test.go:60: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpdl4oboaz_test.go:27:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{\"\"}\n    }\n    if arr[len(arr) - 1] < 1 || arr[len(arr) - 1] > 9 {\n        return []string{\"\"}\n    }\n    \n    arr_len := len(arr)\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            arr[i] = 0\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] == 0 {\n            arr[i] = arr_len - i\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 0 && arr[i] < 10 {\n            arr[i] = arr[i] - 1\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] == 0 {\n            arr[i] = arr_len - i\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 0 && arr[i] < 10 {\n            arr[i] = arr[i] - 1\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] == 0 {\n            arr[i] = arr_len - i\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] > 0 && arr[i] < 10 {\n            arr[i] = arr[i] - 1\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr[i] == 0 {\n            arr[i] = arr_len - i\n        }\n    }\n    \n    for i := 0; i < arr_len; i++ {\n        if arr\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmlq0n_u1_test.go:83:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp0w7gyhws_test.go:27:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpj8oma6tx_test.go:30:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v < 10 && v > 0 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpf3k6yi4q_test.go:30:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = result[i][0:1] + \" \" + result[i][1:]\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmp5nfh_ds5_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2  1  1  4  5  8  2  3 ]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmp5nfh_ds5_test.go:56: expected '[One]', got '[1 ]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp5nfh_ds5_test.go:56: expected '[Three Two One]', got '[1  3  2 ]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp5nfh_ds5_test.go:56: expected '[Nine Eight Four]', got '[9  4  8 ]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprc1zx1zh_test.go:53: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace the digits with their names\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpshflnwc8_test.go:26:11: undefined: by_length_sort\n/tmp/tmpshflnwc8_test.go:29:11: undefined: by_length_reverse\n/tmp/tmpshflnwc8_test.go:32:11: undefined: by_length_replace\n/tmp/tmpshflnwc8_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{}\n    }\n    \n    var result []string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 10 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        } else {\n            result = append(result, fmt.Sprintf(\"%s\", arr[i]))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        if result[i] == \"One\" {\n            result[i] = \"One\"\n        } else if result[i] == \"Two\" {\n            result[i] = \"Two\"\n        } else if result[i] == \"Three\" {\n            result[i] = \"Three\"\n        } else if result[i] == \"Four\" {\n            result[i] = \"Four\"\n        } else if result[i] == \"Five\" {\n            result[i] = \"Five\"\n        } else if result[i] == \"Six\" {\n            result[i] = \"Six\"\n        } else if result[i] == \"Seven\" {\n            result[i] = \"Seven\"\n        } else if result[i] == \"Eight\" {\n            result[i] = \"Eight\"\n        } else if result[i] == \"Nine\" {\n            result[i] = \"Nine\"\n        }\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpswe2xk3w_test.go:33:37: Sprintf format %s has arg arr[i] of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp1wcg8fpa_test.go:30:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 9 || arr[i] < 1 {\n            continue\n        }\n        \n        result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmp831t81by_test.go:59: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmp831t81by_test.go:59: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp831t81by_test.go:59: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp831t81by_test.go:59: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpzbdk0mjn_test.go:26:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace each digit by its corresponding name\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the array\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374755,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4_1rjhj1_test.go:26:11: undefined: by_length_sort\n/tmp/tmp4_1rjhj1_test.go:29:11: undefined: by_length_reverse\n/tmp/tmp4_1rjhj1_test.go:32:11: undefined: by_length_replace\n/tmp/tmp4_1rjhj1_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpj8oma6tx_test.go:30:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v < 10 && v > 0 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if result[i] > result[j] {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp6dymuhr6_test.go:30:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // Sort the array\n    sort_arr := arr[:]\n    sort_arr.Sort()\n    \n    // Reverse the array\n    rev_arr := make([]int, len(arr))\n    for i, v := range arr {\n        rev_arr[i] = v\n    }\n    rev_arr.Sort()\n    \n    // Replace each digit by its corresponding name\n    res := make([]string, len(arr))\n    for i, v := range arr {\n        if v >= 1 && v <= 9 {\n            res[i] = fmt.Sprintf(\"%s\", v)\n        }\n    }\n    \n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprrvi5az8_test.go:27:13: sort_arr.Sort undefined (type []int has no field or method Sort)\n/tmp/tmprrvi5az8_test.go:34:12: rev_arr.Sort undefined (type []int has no field or method Sort)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper(arr)\n    arr = by_length_helper\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5h0dpa4p_test.go:63:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v < 10 && v > 0 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpbo1mswpf_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpbo1mswpf_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpbo1mswpf_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpbo1mswpf_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    if arr[0] < 1 || arr[0] > 9 {\n        return []string{\"One\"}\n    }\n    var result []string\n    for _, v := range arr {\n        if v < 10 && v > 0 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpuwqhc4zc_test.go:30:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpi9hul0_f_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 9 || arr[i] < 1 {\n            continue\n        }\n        \n        result = append(result, fmt.Sprintf(\"%s\", arr[i]))\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpt4fysur0_test.go:32:33: Sprintf format %s has arg arr[i] of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n    arr = reverse(arr)\n    \n    arr = by_length_helper(arr)\n    \n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpfyliondh_test.go:104:6: expected '(', found TestBy_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpj8oma6tx_test.go:30:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmprt3uwls5_test.go:53: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmprt3uwls5_test.go:53: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmprt3uwls5_test.go:53: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprt3uwls5_test.go:53: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // sort the array\n    arr = by_length_sort(arr)\n    \n    // reverse the array\n    arr = by_length_reverse(arr)\n    \n    // replace the digits by their corresponding names\n    arr = by_length_replace(arr)\n    \n    return arr\n}\n\n// Sort the array using the bubble sort algorithm.\n// Return the sorted array.\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaq81683n_test.go:26:11: undefined: by_length_sort\n/tmp/tmpaq81683n_test.go:29:11: undefined: by_length_reverse\n/tmp/tmpaq81683n_test.go:32:11: undefined: by_length_replace\n/tmp/tmpaq81683n_test.go:34:5: cannot use arr (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpj8oma6tx_test.go:30:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpnw4_bc05_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%s\", v))\n        }\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpdl4oboaz_test.go:27:37: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkspg0kln_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    \n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        result[i] = fmt.Sprintf(\"%s\", result[i])\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxarrhp78_test.go:57: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    \n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    \n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvgykh09m_test.go:56: expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n    for _, v := range arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    for i, v := range result {\n        result[i] = fmt.Sprintf(\"%s\", v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpt59q2wnf_test.go:29:33: Sprintf format %s has arg v of wrong type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}