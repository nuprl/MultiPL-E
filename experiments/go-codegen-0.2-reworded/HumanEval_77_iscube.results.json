{
  "name": "HumanEval_77_iscube",
  "language": "go_test.go",
  "prompt": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n",
  "tests": "func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    for i := 1; i <= a; i++ {\n        if a % i != 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmplpmqtbtl_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmplpmqtbtl_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmplpmqtbtl_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmplpmqtbtl_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return iscube(a / 3) || iscube(a / 2)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    for i := 1; i <= a; i++ {\n        if a % i != 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmplpmqtbtl_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmplpmqtbtl_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmplpmqtbtl_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmplpmqtbtl_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == (a * a * a)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpqn02wxyd_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpqn02wxyd_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpa6dgc2zy_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpa6dgc2zy_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpa6dgc2zy_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpa6dgc2zy_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpa6dgc2zy_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    return iscube(a / 3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp9lqxkvnq_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp9lqxkvnq_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp9lqxkvnq_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp9lqxkvnq_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp9lqxkvnq_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return iscube(a / 3) || iscube(a / 3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpvt4cur93_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpvt4cur93_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpvt4cur93_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpvt4cur93_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpxzllmm71_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpxzllmm71_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpxzllmm71_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpxzllmm71_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpv1z6l_pr_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpv1z6l_pr_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpv1z6l_pr_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpv1z6l_pr_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp9lqxkvnq_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp9lqxkvnq_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp9lqxkvnq_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp9lqxkvnq_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp9lqxkvnq_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return iscube(a / 3) || iscube(a / 2)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpnls1to40_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpnls1to40_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpnls1to40_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpnls1to40_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return iscube(a / 3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return iscube(a / 3) || iscube(a / 2)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return iscube(a / 3) || iscube(a / 2)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpr7rhx84e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return iscube(a / 3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    return iscube(a / 3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp6ln9y1qd_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp6ln9y1qd_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp6ln9y1qd_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp6ln9y1qd_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == (a * a * a)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpqn02wxyd_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpqn02wxyd_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpa6dgc2zy_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpa6dgc2zy_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpa6dgc2zy_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpa6dgc2zy_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpa6dgc2zy_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpu1uxxtja_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpu1uxxtja_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpu1uxxtja_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpu1uxxtja_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpu1uxxtja_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpihh46r6c_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpbulrlfx0_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return iscube(a / 3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp6ln9y1qd_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp6ln9y1qd_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp6ln9y1qd_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp6ln9y1qd_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpu1uxxtja_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpu1uxxtja_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpu1uxxtja_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpu1uxxtja_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpu1uxxtja_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 != 0 {\n        return false\n    }\n    return iscube(a/3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpr98pnfpw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpr98pnfpw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpr98pnfpw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpr98pnfpw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    if a % 6 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpb79dn40t_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpb79dn40t_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpb79dn40t_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpb79dn40t_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpb79dn40t_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    return iscube(a/3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpiicqc9he_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpiicqc9he_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpiicqc9he_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpiicqc9he_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a%3 != 0 {\n        return false\n    }\n    for b := 1; b < a; b++ {\n        if a%b != 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmp5jun6m_y_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp5jun6m_y_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5jun6m_y_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5jun6m_y_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == 0 || (a % 3 == 0 && iscube(a / 3))\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpv9lb1095_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpv9lb1095_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpv9lb1095_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpv9lb1095_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == 0 || (a % 3 == 0 && iscube(a / 3))\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpv9lb1095_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpv9lb1095_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpv9lb1095_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpv9lb1095_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    if a % 6 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 != 0 {\n        return false\n    }\n    return iscube(a/3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpr98pnfpw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpr98pnfpw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpr98pnfpw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpr98pnfpw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == (a * a * a)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpqn02wxyd_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpqn02wxyd_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    return iscube(a/3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp1c6gmnsu_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp1c6gmnsu_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp1c6gmnsu_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp1c6gmnsu_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppgz8rztf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmprf3r2gtu_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    return iscube(a/3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpiicqc9he_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpiicqc9he_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpiicqc9he_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpiicqc9he_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a%3 == 0\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpdqpmu2bl_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpdqpmu2bl_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpdqpmu2bl_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpdqpmu2bl_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpdqpmu2bl_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    if a % 6 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a%3 == 0 {\n        return false\n    }\n    return iscube(a/3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpcdjz066r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpcdjz066r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpcdjz066r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpcdjz066r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return iscube(a / 3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpx05y4pmj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a/3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp0rzt3clm_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpe2v145dh_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 != 0 {\n        return false\n    }\n    for i := 1; i < a; i++ {\n        if a%i != 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpz3gjpj6c_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpz3gjpj6c_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpz3gjpj6c_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpz3gjpj6c_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpbi1d5voc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    return iscube(a / 3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppbtaoklo_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a % 3 == 0\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpr12r7chz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpr12r7chz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpr12r7chz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpr12r7chz_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpr12r7chz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    if a % 6 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpfm52v49y_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    return iscube(a/3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp1c6gmnsu_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp1c6gmnsu_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp1c6gmnsu_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp1c6gmnsu_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpmaamx1vi_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpkrdc523e_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return iscube(a / 3)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpx8_wfq22_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpx8_wfq22_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpx8_wfq22_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpx8_wfq22_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return iscube(a / 3)\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpjz3_ijc__test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == (a * a * a)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpqn02wxyd_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpqn02wxyd_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        return false\n    }\n    if a%3 != 0 {\n        return false\n    }\n    for i := 1; i < a; i++ {\n        if a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n        tmp71mfx7ch_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp71mfx7ch_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp71mfx7ch_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp71mfx7ch_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp5w61ffn5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return true\n    }\n    if a == 0 {\n        return true\n    }\n    if a % 3 == 0 {\n        return false\n    }\n    if a % 4 == 0 {\n        return false\n    }\n    if a % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmpwfbf2861_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}