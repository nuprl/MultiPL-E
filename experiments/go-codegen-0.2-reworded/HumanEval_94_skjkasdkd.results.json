{
  "name": "HumanEval_94_skjkasdkd",
  "language": "go_test.go",
  "prompt": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n",
  "tests": "func TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 2; i < sum; i++ {\n        if sum%i == 0 {\n            fmt.Println(i)\n            return i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "3\n2\n2\n3\n2\n--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=13)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=19)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=10)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var digits int\n    for i := 0; i < len(lst); i++ {\n        digits += lst[i]\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            digits -= lst[i]\n            break\n        }\n    }\n    return digits\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpasesxrf5_test.go:68: expected '%!s(int=10)', got '%!s(int=335)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpasesxrf5_test.go:68: expected '%!s(int=25)', got '%!s(int=76)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpasesxrf5_test.go:68: expected '%!s(int=13)', got '%!s(int=7871)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpasesxrf5_test.go:68: expected '%!s(int=11)', got '%!s(int=430)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpasesxrf5_test.go:68: expected '%!s(int=3)', got '%!s(int=37)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpasesxrf5_test.go:68: expected '%!s(int=7)', got '%!s(int=11)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpasesxrf5_test.go:68: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpasesxrf5_test.go:68: expected '%!s(int=19)', got '%!s(int=8325)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpasesxrf5_test.go:68: expected '%!s(int=10)', got '%!s(int=224)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 1; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmps6w7jfii_test.go:73: expected '%!s(int=10)', got '%!s(int=660)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmps6w7jfii_test.go:73: expected '%!s(int=25)', got '%!s(int=4674)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmps6w7jfii_test.go:73: expected '%!s(int=13)', got '%!s(int=91150)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmps6w7jfii_test.go:73: expected '%!s(int=11)', got '%!s(int=2265)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmps6w7jfii_test.go:73: expected '%!s(int=3)', got '%!s(int=119)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmps6w7jfii_test.go:73: expected '%!s(int=7)', got '%!s(int=20)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmps6w7jfii_test.go:73: expected '%!s(int=19)', got '%!s(int=16382)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmps6w7jfii_test.go:73: expected '%!s(int=19)', got '%!s(int=263562)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmps6w7jfii_test.go:73: expected '%!s(int=10)', got '%!s(int=16832)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 2; i < sum; i++ {\n        if sum % i == 0 {\n            sum /= i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=13)', got '%!s(int=1321)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=11)', got '%!s(int=577)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=3)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=19)', got '%!s(int=109)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=10)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph0xu9nk_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var digit int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            digit = i\n            break\n        }\n    }\n    return sum - digit\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpderimlz0_test.go:65: expected '%!s(int=10)', got '%!s(int=640)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpderimlz0_test.go:65: expected '%!s(int=25)', got '%!s(int=4668)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpderimlz0_test.go:65: expected '%!s(int=13)', got '%!s(int=91143)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpderimlz0_test.go:65: expected '%!s(int=11)', got '%!s(int=1153)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpderimlz0_test.go:65: expected '%!s(int=3)', got '%!s(int=117)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpderimlz0_test.go:65: expected '%!s(int=7)', got '%!s(int=18)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpderimlz0_test.go:65: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpderimlz0_test.go:65: expected '%!s(int=19)', got '%!s(int=131780)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpderimlz0_test.go:65: expected '%!s(int=10)', got '%!s(int=8414)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i]%lst[j] == 0 {\n                        lst[i] = 0\n                        break\n                    }\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp95_mo9e__test.go:69: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp95_mo9e__test.go:69: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp95_mo9e__test.go:69: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp95_mo9e__test.go:69: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp95_mo9e__test.go:69: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp95_mo9e__test.go:69: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp95_mo9e__test.go:69: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp95_mo9e__test.go:69: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp95_mo9e__test.go:69: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, i := range lst {\n        sum += i\n    }\n    for i := 2; i < sum; i++ {\n        if sum%i == 0 {\n            sum /= i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp0_r6_n1__test.go:57: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp0_r6_n1__test.go:57: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp0_r6_n1__test.go:57: expected '%!s(int=13)', got '%!s(int=1321)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp0_r6_n1__test.go:57: expected '%!s(int=11)', got '%!s(int=577)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp0_r6_n1__test.go:57: expected '%!s(int=3)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp0_r6_n1__test.go:57: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp0_r6_n1__test.go:57: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp0_r6_n1__test.go:57: expected '%!s(int=19)', got '%!s(int=109)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp0_r6_n1__test.go:57: expected '%!s(int=10)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, i := range lst {\n        sum += i\n    }\n    var max int\n    for i := 1; i < sum; i++ {\n        if isPrime(i) {\n            max = i\n            break\n        }\n    }\n    var digits int\n    for i := 0; i < len(fmt.Sprintf(\"%d\", max)); i++ {\n        digits += int(fmt.Sprintf(\"%d\", max)[i])\n    }\n    return digits\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0xum6rv5_test.go:30:12: undefined: isPrime\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var digits []int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            digits = append(digits, i)\n        }\n    }\n    var res int\n    for _, v := range digits {\n        res += v\n    }\n    return res\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpyvptnlh0_test.go:68: expected '%!s(int=10)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpyvptnlh0_test.go:68: expected '%!s(int=25)', got '%!s(int=5)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpyvptnlh0_test.go:68: expected '%!s(int=13)', got '%!s(int=6)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpyvptnlh0_test.go:68: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpyvptnlh0_test.go:68: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpyvptnlh0_test.go:68: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpyvptnlh0_test.go:68: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpyvptnlh0_test.go:68: expected '%!s(int=19)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpyvptnlh0_test.go:68: expected '%!s(int=10)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph0xu9nk_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        sum += lst[i]\n        if sum > max {\n            sum = 0\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=25)', got '%!s(int=64)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=13)', got '%!s(int=2693)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=11)', got '%!s(int=398)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=19)', got '%!s(int=134)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v % 10)\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=10)', got '%!s(int=69)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=25)', got '%!s(int=43)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=13)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=19)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=19)', got '%!s(int=21)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=10)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            sum += lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i] % lst[j] == 0 {\n                        lst[i] = 0\n                        break\n                    }\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i] % lst[j] == 0 {\n                        lst[j] = 0\n                        break\n                    }\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i] % lst[j] == 0 {\n                        lst[j] = 0\n                        break\n                    }\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i] % lst[j] == 0 {\n                        lst[j] = 0\n                        break\n                    }\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i] %\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374866,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpux0828_6_test.go:83:6: expected '(', found TestSkjkasdkd\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    \n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    var digits []int\n    for i := 0; i < len(lst); i++ {\n        digits = append(digits, lst[i]%10)\n    }\n    \n    for i := 0; i < len(digits); i++ {\n        if digits[i] == 0 {\n            continue\n        }\n        \n        for j := i + 1; j < len(digits); j++ {\n            if digits[i] == digits[j] {\n                digits[j] = 0\n            }\n        }\n    }\n    \n    for i := 0; i < len(digits); i++ {\n        if digits[i] != 0 {\n            sum += digits[i]\n        }\n    }\n    \n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpsrtbf0mg_test.go:83: expected '%!s(int=10)', got '%!s(int=681)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpsrtbf0mg_test.go:83: expected '%!s(int=25)', got '%!s(int=4703)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpsrtbf0mg_test.go:83: expected '%!s(int=13)', got '%!s(int=91183)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpsrtbf0mg_test.go:83: expected '%!s(int=11)', got '%!s(int=1184)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpsrtbf0mg_test.go:83: expected '%!s(int=3)', got '%!s(int=124)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpsrtbf0mg_test.go:83: expected '%!s(int=7)', got '%!s(int=37)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpsrtbf0mg_test.go:83: expected '%!s(int=19)', got '%!s(int=8192)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpsrtbf0mg_test.go:83: expected '%!s(int=19)', got '%!s(int=131795)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpsrtbf0mg_test.go:83: expected '%!s(int=10)', got '%!s(int=8425)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, i := range lst {\n        sum += i\n    }\n    for i := 2; i < sum; i++ {\n        if sum%i == 0 {\n            sum = sum/i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpqkceb511_test.go:57: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpqkceb511_test.go:57: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpqkceb511_test.go:57: expected '%!s(int=13)', got '%!s(int=1321)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpqkceb511_test.go:57: expected '%!s(int=11)', got '%!s(int=577)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpqkceb511_test.go:57: expected '%!s(int=3)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpqkceb511_test.go:57: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpqkceb511_test.go:57: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpqkceb511_test.go:57: expected '%!s(int=19)', got '%!s(int=109)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpqkceb511_test.go:57: expected '%!s(int=10)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < lst[i]; j++ {\n                sum += lst[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=10)', got '%!s(int=141714)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=25)', got '%!s(int=21138822)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=13)', got '%!s(int=6966837396)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=11)', got '%!s(int=557512)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=3)', got '%!s(int=7274)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=7)', got '%!s(int=138)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=19)', got '%!s(int=67100672)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=19)', got '%!s(int=15308624376)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=10)', got '%!s(int=67142818)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v - 1) / max\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=25)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph0xu9nk_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    \n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    var digits []int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            digits = append(digits, i)\n        }\n    }\n    \n    var result int\n    for _, v := range digits {\n        result += v\n    }\n    \n    return result\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp47le_8e9_test.go:72: expected '%!s(int=10)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp47le_8e9_test.go:72: expected '%!s(int=25)', got '%!s(int=5)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp47le_8e9_test.go:72: expected '%!s(int=13)', got '%!s(int=6)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp47le_8e9_test.go:72: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp47le_8e9_test.go:72: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp47le_8e9_test.go:72: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp47le_8e9_test.go:72: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp47le_8e9_test.go:72: expected '%!s(int=19)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp47le_8e9_test.go:72: expected '%!s(int=10)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i]%lst[j] == 0 {\n                        lst[i] = 0\n                        break\n                    }\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i]%lst[j] == 0 {\n                        lst[i] = 0\n                        break\n                    }\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i]%lst[j] == 0 {\n                        lst[i] = 0\n                        break\n                    }\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i]%lst[j] == 0 {\n                        lst[i] = 0\n                        break\n                    }\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i]%lst[j] == 0 {\n                        lst[i] = 0\n                        break\n                    }\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd77cy133_test.go:85:6: expected '(', found TestSkjkasdkd\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9clftqyb_test.go:77:6: expected '(', found TestSkjkasdkd\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpmpee1fxy_test.go:66: expected '%!s(int=10)', got '%!s(int=665)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpmpee1fxy_test.go:66: expected '%!s(int=25)', got '%!s(int=4674)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpmpee1fxy_test.go:66: expected '%!s(int=13)', got '%!s(int=91150)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpmpee1fxy_test.go:66: expected '%!s(int=11)', got '%!s(int=2265)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpmpee1fxy_test.go:66: expected '%!s(int=3)', got '%!s(int=215)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpmpee1fxy_test.go:66: expected '%!s(int=7)', got '%!s(int=28)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpmpee1fxy_test.go:66: expected '%!s(int=19)', got '%!s(int=16382)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpmpee1fxy_test.go:66: expected '%!s(int=19)', got '%!s(int=263562)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpmpee1fxy_test.go:66: expected '%!s(int=10)', got '%!s(int=16832)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var result int\n    for _, v := range lst {\n        if v > 0 {\n            result += v % 10\n        }\n    }\n    for _, v := range lst {\n        if v > 0 {\n            result += v / 10\n        }\n    }\n    return result\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpp8le83vn_test.go:59: expected '%!s(int=10)', got '%!s(int=128)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpp8le83vn_test.go:59: expected '%!s(int=25)', got '%!s(int=506)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpp8le83vn_test.go:59: expected '%!s(int=13)', got '%!s(int=9168)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpp8le83vn_test.go:59: expected '%!s(int=11)', got '%!s(int=155)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpp8le83vn_test.go:59: expected '%!s(int=3)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpp8le83vn_test.go:59: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpp8le83vn_test.go:59: expected '%!s(int=19)', got '%!s(int=820)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpp8le83vn_test.go:59: expected '%!s(int=19)', got '%!s(int=13197)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpp8le83vn_test.go:59: expected '%!s(int=10)', got '%!s(int=856)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        sum += lst[i]\n        if lst[i] == max {\n            fmt.Println(sum)\n            return sum\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "652\n4609\n88456\n724\n81\n8\n8191\n131647\n8416\n--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=10)', got '%!s(int=652)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=25)', got '%!s(int=4609)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=13)', got '%!s(int=88456)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=19)', got '%!s(int=131647)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) / 10)\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj5n39ao4_test.go:32:41: cannot use 10 (type untyped int) as type string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var result int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            result += lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            result += lst[i] / 10\n            result += lst[i] % 10\n        }\n    }\n    return result\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpr4880qa5_test.go:60: expected '%!s(int=10)', got '%!s(int=787)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpr4880qa5_test.go:60: expected '%!s(int=25)', got '%!s(int=5179)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpr4880qa5_test.go:60: expected '%!s(int=13)', got '%!s(int=100317)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpr4880qa5_test.go:60: expected '%!s(int=11)', got '%!s(int=1309)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpr4880qa5_test.go:60: expected '%!s(int=3)', got '%!s(int=137)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpr4880qa5_test.go:60: expected '%!s(int=7)', got '%!s(int=38)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpr4880qa5_test.go:60: expected '%!s(int=19)', got '%!s(int=9011)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpr4880qa5_test.go:60: expected '%!s(int=19)', got '%!s(int=144978)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpr4880qa5_test.go:60: expected '%!s(int=10)', got '%!s(int=9272)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph0xu9nk_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, i := range lst {\n        if i > max {\n            max = i\n        }\n    }\n    for _, i := range lst {\n        sum += i\n        if i > max {\n            max = i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpeg2phpd6_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpeg2phpd6_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpeg2phpd6_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpeg2phpd6_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpeg2phpd6_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpeg2phpd6_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpeg2phpd6_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpeg2phpd6_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpeg2phpd6_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < lst[i]; j++ {\n                sum += lst[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=10)', got '%!s(int=141714)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=25)', got '%!s(int=21138822)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=13)', got '%!s(int=6966837396)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=11)', got '%!s(int=557512)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=3)', got '%!s(int=7274)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=7)', got '%!s(int=138)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=19)', got '%!s(int=67100672)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=19)', got '%!s(int=15308624376)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=10)', got '%!s(int=67142818)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var digits []int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            digits = append(digits, i)\n        }\n    }\n    var result int\n    for _, v := range digits {\n        result += v\n    }\n    return result\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=10)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=25)', got '%!s(int=5)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=13)', got '%!s(int=6)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=19)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=10)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph0xu9nk_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v - 1) / max\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=25)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxf25tw0l_test.go:83:6: expected '(', found TestSkjkasdkd\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v / max) * (v % max)\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpjs8_1kxn_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpjs8_1kxn_test.go:58: expected '%!s(int=25)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpjs8_1kxn_test.go:58: expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpjs8_1kxn_test.go:58: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpjs8_1kxn_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpjs8_1kxn_test.go:58: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpjs8_1kxn_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpjs8_1kxn_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpjs8_1kxn_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v - 1) / max\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=25)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 2; i < sum; i++ {\n        if sum % i == 0 {\n            fmt.Println(i)\n            return i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "3\n2\n2\n3\n2\n--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=13)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=19)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=10)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v - 1) / max\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=25)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        sum += lst[i]\n        if lst[i] == max {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] > max {\n                    max = lst[j]\n                }\n            }\n            break\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpe81m0ir0_test.go:66: expected '%!s(int=10)', got '%!s(int=652)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpe81m0ir0_test.go:66: expected '%!s(int=25)', got '%!s(int=4609)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpe81m0ir0_test.go:66: expected '%!s(int=13)', got '%!s(int=88456)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpe81m0ir0_test.go:66: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpe81m0ir0_test.go:66: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpe81m0ir0_test.go:66: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpe81m0ir0_test.go:66: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpe81m0ir0_test.go:66: expected '%!s(int=19)', got '%!s(int=131647)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpe81m0ir0_test.go:66: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdenouvci_test.go:77:6: expected '(', found TestSkjkasdkd\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        sum += lst[i]\n        if lst[i] == max {\n            fmt.Println(sum)\n            return sum\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "652\n4609\n88456\n724\n81\n8\n8191\n131647\n8416\n--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp06mvtkti_test.go:62: expected '%!s(int=10)', got '%!s(int=652)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp06mvtkti_test.go:62: expected '%!s(int=25)', got '%!s(int=4609)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp06mvtkti_test.go:62: expected '%!s(int=13)', got '%!s(int=88456)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp06mvtkti_test.go:62: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp06mvtkti_test.go:62: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp06mvtkti_test.go:62: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp06mvtkti_test.go:62: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp06mvtkti_test.go:62: expected '%!s(int=19)', got '%!s(int=131647)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp06mvtkti_test.go:62: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var digits []int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            digits = append(digits, i)\n        }\n    }\n    var result int\n    for _, v := range digits {\n        result += v\n    }\n    return result\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=10)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=25)', got '%!s(int=5)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=13)', got '%!s(int=6)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=19)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmplswh4ig4_test.go:68: expected '%!s(int=10)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += int(fmt.Sprintf(\"%d\", lst[i]))\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3bsvgts7_test.go:33:23: cannot convert fmt.Sprintf(\"%d\", lst[i]) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var result int\n    for _, v := range lst {\n        result += v\n    }\n    for i := 2; i < result; i++ {\n        if result % i == 0 {\n            result = result / i\n        }\n    }\n    return result\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmppj0xbduc_test.go:57: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmppj0xbduc_test.go:57: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmppj0xbduc_test.go:57: expected '%!s(int=13)', got '%!s(int=1321)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmppj0xbduc_test.go:57: expected '%!s(int=11)', got '%!s(int=577)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmppj0xbduc_test.go:57: expected '%!s(int=3)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmppj0xbduc_test.go:57: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmppj0xbduc_test.go:57: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmppj0xbduc_test.go:57: expected '%!s(int=19)', got '%!s(int=109)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmppj0xbduc_test.go:57: expected '%!s(int=10)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var digits []int\n    for i := 0; i < len(lst); i++ {\n        digits = append(digits, lst[i]%10)\n    }\n    for i := 0; i < len(digits); i++ {\n        if digits[i] == 0 {\n            continue\n        }\n        for j := i + 1; j < len(digits); j++ {\n            if digits[i] == digits[j] {\n                digits = append(digits[:j], digits[j+1:]...)\n                i--\n                break\n            }\n        }\n    }\n    for i := 0; i < len(digits); i++ {\n        if digits[i] == 0 {\n            continue\n        }\n        for j := i + 1; j < len(digits); j++ {\n            if digits[i] == digits[j] {\n                digits = append(digits[:j], digits[j+1:]...)\n                i--\n                break\n            }\n        }\n    }\n    for i := 0; i < len(digits); i++ {\n        if digits[i] == 0 {\n            continue\n        }\n        for j := i + 1; j < len(digits); j++ {\n            if digits[i] == digits[j] {\n                digits = append(digits[:j], digits[j+1:]...)\n                i--\n                break\n            }\n        }\n    }\n    for i := 0; i < len(digits); i++ {\n        if digits[i] == 0 {\n            continue\n        }\n        for j := i + 1; j < len(digits); j++ {\n            if digits[i] == digits[j] {\n                digits = append(digits[:j], digits[j+1:]...)\n                i--\n                break\n            \nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpihwc1459_test.go:84:6: expected '(', found TestSkjkasdkd\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v - 1) / max\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=25)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v - 1) / max\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=25)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) / 10)\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphkivwa8p_test.go:32:41: cannot use 10 (type untyped int) as type string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < lst[i]; j++ {\n                sum += lst[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=10)', got '%!s(int=141714)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=25)', got '%!s(int=21138822)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=13)', got '%!s(int=6966837396)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=11)', got '%!s(int=557512)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=3)', got '%!s(int=7274)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=7)', got '%!s(int=138)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=19)', got '%!s(int=67100672)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=19)', got '%!s(int=15308624376)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=10)', got '%!s(int=67142818)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 2; i < sum; i++ {\n        if sum % i == 0 {\n            fmt.Println(i)\n            return i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "3\n2\n2\n3\n2\n--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=13)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=19)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=10)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph0xu9nk_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp_jcywm1c_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdenouvci_test.go:77:6: expected '(', found TestSkjkasdkd\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v % 10)\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=10)', got '%!s(int=69)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=25)', got '%!s(int=43)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=13)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=19)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=19)', got '%!s(int=21)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=10)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for i := max; i > 0; i-- {\n        sum += i\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpw5aelah3_test.go:58: expected '%!s(int=10)', got '%!s(int=52650)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpw5aelah3_test.go:58: expected '%!s(int=25)', got '%!s(int=10568503)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpw5aelah3_test.go:58: expected '%!s(int=13)', got '%!s(int=3467654281)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpw5aelah3_test.go:58: expected '%!s(int=11)', got '%!s(int=262450)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpw5aelah3_test.go:58: expected '%!s(int=3)', got '%!s(int=3321)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpw5aelah3_test.go:58: expected '%!s(int=7)', got '%!s(int=36)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpw5aelah3_test.go:58: expected '%!s(int=19)', got '%!s(int=33550336)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpw5aelah3_test.go:58: expected '%!s(int=19)', got '%!s(int=7620753696)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpw5aelah3_test.go:58: expected '%!s(int=10)', got '%!s(int=33558528)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 2; i < sum; i++ {\n        if sum % i == 0 {\n            fmt.Println(i)\n            return i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "3\n2\n2\n3\n2\n--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=13)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=19)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=10)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := i + 1; j < len(lst); j++ {\n                if lst[j] % lst[i] == 0 {\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9clftqyb_test.go:77:6: expected '(', found TestSkjkasdkd\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 2; i < sum; i++ {\n        if sum % i == 0 {\n            fmt.Println(i)\n            return i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "3\n2\n2\n3\n2\n--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=13)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=19)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpa9dggegb_test.go:58: expected '%!s(int=10)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var result int\n    for _, v := range lst {\n        if v > 0 {\n            result = result + v % 10\n        }\n    }\n    return result\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpdzlt8ie1_test.go:54: expected '%!s(int=10)', got '%!s(int=69)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpdzlt8ie1_test.go:54: expected '%!s(int=25)', got '%!s(int=43)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpdzlt8ie1_test.go:54: expected '%!s(int=13)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpdzlt8ie1_test.go:54: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpdzlt8ie1_test.go:54: expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpdzlt8ie1_test.go:54: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpdzlt8ie1_test.go:54: expected '%!s(int=19)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpdzlt8ie1_test.go:54: expected '%!s(int=19)', got '%!s(int=21)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpdzlt8ie1_test.go:54: expected '%!s(int=10)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var result int\n    for _, v := range lst {\n        if v > 0 {\n            result += v % 10\n        }\n    }\n    return result\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpwg4vrodr_test.go:54: expected '%!s(int=10)', got '%!s(int=69)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpwg4vrodr_test.go:54: expected '%!s(int=25)', got '%!s(int=43)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpwg4vrodr_test.go:54: expected '%!s(int=13)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpwg4vrodr_test.go:54: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpwg4vrodr_test.go:54: expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpwg4vrodr_test.go:54: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpwg4vrodr_test.go:54: expected '%!s(int=19)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpwg4vrodr_test.go:54: expected '%!s(int=19)', got '%!s(int=21)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpwg4vrodr_test.go:54: expected '%!s(int=10)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var digits int\n    for i := 0; i < len(lst); i++ {\n        digits += lst[i]\n        if digits > max {\n            digits = 0\n        }\n    }\n    return digits + max\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp2mnlmsr1_test.go:65: expected '%!s(int=10)', got '%!s(int=327)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp2mnlmsr1_test.go:65: expected '%!s(int=25)', got '%!s(int=4661)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp2mnlmsr1_test.go:65: expected '%!s(int=13)', got '%!s(int=85971)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp2mnlmsr1_test.go:65: expected '%!s(int=11)', got '%!s(int=1122)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp2mnlmsr1_test.go:65: expected '%!s(int=3)', got '%!s(int=106)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp2mnlmsr1_test.go:65: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp2mnlmsr1_test.go:65: expected '%!s(int=19)', got '%!s(int=16382)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp2mnlmsr1_test.go:65: expected '%!s(int=19)', got '%!s(int=123590)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp2mnlmsr1_test.go:65: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        sum += lst[i]\n        if lst[i] == max {\n            fmt.Println(sum)\n            return sum\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "652\n4609\n88456\n724\n81\n8\n8191\n131647\n8416\n--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=10)', got '%!s(int=652)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=25)', got '%!s(int=4609)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=13)', got '%!s(int=88456)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=19)', got '%!s(int=131647)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpgxeujvdq_test.go:62: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var result int\n    for _, v := range lst {\n        result += v\n    }\n    for i := 2; i < result; i++ {\n        if result % i == 0 {\n            result /= i\n        }\n    }\n    return result\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp9wqcqf2m_test.go:57: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp9wqcqf2m_test.go:57: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp9wqcqf2m_test.go:57: expected '%!s(int=13)', got '%!s(int=1321)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp9wqcqf2m_test.go:57: expected '%!s(int=11)', got '%!s(int=577)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp9wqcqf2m_test.go:57: expected '%!s(int=3)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp9wqcqf2m_test.go:57: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp9wqcqf2m_test.go:57: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp9wqcqf2m_test.go:57: expected '%!s(int=19)', got '%!s(int=109)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp9wqcqf2m_test.go:57: expected '%!s(int=10)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            sum += lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < lst[i]; j++ {\n                if lst[i] % 2 == 0 {\n                    lst[i] /= 2\n                } else {\n                    lst[i] = lst[i] * 3 + 1\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < lst[i]; j++ {\n                if lst[i] % 2 == 0 {\n                    lst[i] /= 2\n                } else {\n                    lst[i] = lst[i] * 3 + 1\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < lst[i]; j++ {\n                if lst[i] % 2 == 0 {\n                    lst[i] /= 2\n                } else {\n                    lst[i] = lst[i] * 3 + 1\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < lst[i]; j++ {\n                if lst[i] % 2 == 0 {\n                    lst[i] /= 2\n                } else {\n                    lst[i] = lst[i] * 3 + 1\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < lst[i]; j++ {\n                if lst[i] % 2 == 0\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpud5r58nd_test.go:78:6: expected '(', found TestSkjkasdkd\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpw5q0y_ox_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpnz2do8iv_test.go:58: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 2; i < sum; i++ {\n        if sum%i == 0 {\n            fmt.Println(i)\n            return i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "3\n2\n2\n3\n2\n--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=13)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=19)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpg3kx92l8_test.go:58: expected '%!s(int=10)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        sum += lst[i]\n        if sum > max {\n            sum = 0\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=10)', got '%!s(int=3)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=25)', got '%!s(int=64)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=13)', got '%!s(int=2693)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=11)', got '%!s(int=398)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=19)', got '%!s(int=134)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpv_dq4k73_test.go:61: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph0xu9nk_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < len(lst); j++ {\n                if lst[j] > 0 {\n                    if lst[i] % lst[j] == 0 {\n                        lst[i] = 0\n                        break\n                    }\n                }\n            }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp6m_y1bn6_test.go:69: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp6m_y1bn6_test.go:69: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp6m_y1bn6_test.go:69: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp6m_y1bn6_test.go:69: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp6m_y1bn6_test.go:69: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp6m_y1bn6_test.go:69: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp6m_y1bn6_test.go:69: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp6m_y1bn6_test.go:69: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp6m_y1bn6_test.go:69: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    \n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    var digits []int\n    for i := 0; i < len(lst); i++ {\n        digits = append(digits, lst[i] % 10)\n    }\n    \n    for i := 0; i < len(digits); i++ {\n        if digits[i] == max {\n            return sum\n        }\n        \n        if digits[i] == 0 {\n            continue\n        }\n        \n        for j := 0; j < len(digits); j++ {\n            if digits[j] == 0 {\n                continue\n            }\n            \n            if digits[i] == digits[j] {\n                digits[i] = 0\n                break\n            }\n        }\n    }\n    \n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpyzke6ukf_test.go:86: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpyzke6ukf_test.go:86: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpyzke6ukf_test.go:86: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpyzke6ukf_test.go:86: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpyzke6ukf_test.go:86: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpyzke6ukf_test.go:86: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpyzke6ukf_test.go:86: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpyzke6ukf_test.go:86: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpyzke6ukf_test.go:86: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v % 10)\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=10)', got '%!s(int=69)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=25)', got '%!s(int=43)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=13)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=19)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=19)', got '%!s(int=21)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=10)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 2; i < sum; i++ {\n        if sum % i == 0 {\n            sum /= i\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=13)', got '%!s(int=1321)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=11)', got '%!s(int=577)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=3)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=19)', got '%!s(int=109)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp8l6dt2oy_test.go:57: expected '%!s(int=10)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph0xu9nk_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v) [0])\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=1127)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=25)', got '%!s(int=908)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=13)', got '%!s(int=817)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=11)', got '%!s(int=740)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=3)', got '%!s(int=303)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=7)', got '%!s(int=307)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=56)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=19)', got '%!s(int=209)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp9eujqhzh_test.go:58: expected '%!s(int=10)', got '%!s(int=162)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    var sum int\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph0xu9nk_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpapwpvr06_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var digits []int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            digits = append(digits, i)\n        }\n    }\n    for _, v := range digits {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpbade8fv9_test.go:67: expected '%!s(int=10)', got '%!s(int=678)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpbade8fv9_test.go:67: expected '%!s(int=25)', got '%!s(int=4678)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpbade8fv9_test.go:67: expected '%!s(int=13)', got '%!s(int=91155)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpbade8fv9_test.go:67: expected '%!s(int=11)', got '%!s(int=1155)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpbade8fv9_test.go:67: expected '%!s(int=3)', got '%!s(int=119)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpbade8fv9_test.go:67: expected '%!s(int=7)', got '%!s(int=20)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpbade8fv9_test.go:67: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpbade8fv9_test.go:67: expected '%!s(int=19)', got '%!s(int=131782)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpbade8fv9_test.go:67: expected '%!s(int=10)', got '%!s(int=8418)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v % 10)\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=10)', got '%!s(int=69)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=25)', got '%!s(int=43)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=13)', got '%!s(int=59)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=19)', got '%!s(int=1)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=19)', got '%!s(int=21)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp14gv9om3_test.go:58: expected '%!s(int=10)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += (v - 1) / max\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=25)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpz3ppuhjf_test.go:58: expected '%!s(int=10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=659)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=25)', got '%!s(int=4673)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=13)', got '%!s(int=91149)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=11)', got '%!s(int=1154)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=3)', got '%!s(int=118)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=7)', got '%!s(int=19)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=19)', got '%!s(int=131781)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmp4s3xlfxr_test.go:61: expected '%!s(int=10)', got '%!s(int=8416)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    var sum int\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n        sum += int(fmt.Sprintf(\"%d\", v))\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9j9zv5fn_test.go:32:19: cannot convert fmt.Sprintf(\"%d\", v) (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var digits int\n    for i := 0; i < len(lst); i++ {\n        digits += lst[i]\n        if digits > max {\n            digits = max\n        }\n    }\n    return digits\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmps4lr2zny_test.go:65: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmps4lr2zny_test.go:65: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmps4lr2zny_test.go:65: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmps4lr2zny_test.go:65: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmps4lr2zny_test.go:65: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmps4lr2zny_test.go:65: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmps4lr2zny_test.go:65: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmps4lr2zny_test.go:65: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmps4lr2zny_test.go:65: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > 0 {\n            for j := 0; j < lst[i]; j++ {\n                sum += lst[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=10)', got '%!s(int=141714)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=25)', got '%!s(int=21138822)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=13)', got '%!s(int=6966837396)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=11)', got '%!s(int=557512)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=3)', got '%!s(int=7274)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=7)', got '%!s(int=138)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=19)', got '%!s(int=67100672)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=19)', got '%!s(int=15308624376)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpav6deam3_test.go:59: expected '%!s(int=10)', got '%!s(int=67142818)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n     { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0, 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2, 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     { actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestSkjkasdkd (0.00s)\n    --- FAIL: TestSkjkasdkd/test_num__0 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=10)', got '%!s(int=324)'\n    --- FAIL: TestSkjkasdkd/test_num__1 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=25)', got '%!s(int=4597)'\n    --- FAIL: TestSkjkasdkd/test_num__2 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=13)', got '%!s(int=83278)'\n    --- FAIL: TestSkjkasdkd/test_num__3 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=11)', got '%!s(int=724)'\n    --- FAIL: TestSkjkasdkd/test_num__4 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=3)', got '%!s(int=81)'\n    --- FAIL: TestSkjkasdkd/test_num__5 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestSkjkasdkd/test_num__6 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=19)', got '%!s(int=8191)'\n    --- FAIL: TestSkjkasdkd/test_num__7 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=19)', got '%!s(int=123456)'\n    --- FAIL: TestSkjkasdkd/test_num__8 (0.00s)\n        tmpia4rfcsp_test.go:60: expected '%!s(int=10)', got '%!s(int=8192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}