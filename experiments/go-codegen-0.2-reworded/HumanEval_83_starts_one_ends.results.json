{
  "name": "HumanEval_83_starts_one_ends",
  "language": "go_test.go",
  "prompt": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n",
  "tests": "func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j <= 9; j++ {\n            if i == j || i == j + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpfk8b2lia_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpfk8b2lia_test.go:42: expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpfk8b2lia_test.go:42: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpfk8b2lia_test.go:42: expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpfk8b2lia_test.go:42: expected '%!s(int=18000)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            continue\n        }\n        for j := 1; j <= i; j++ {\n            if j%2 == 1 {\n                count++\n                break\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpm0t18c6k_test.go:44: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpm0t18c6k_test.go:44: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpm0t18c6k_test.go:44: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpm0t18c6k_test.go:44: expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            \n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpt44c0v6g_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpt44c0v6g_test.go:49: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpt44c0v6g_test.go:49: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpt44c0v6g_test.go:49: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpt44c0v6g_test.go:49: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            \n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp0q6gfb9z_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0q6gfb9z_test.go:48: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0q6gfb9z_test.go:48: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0q6gfb9z_test.go:48: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0q6gfb9z_test.go:48: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var result int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp9uszq76r_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp9uszq76r_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp9uszq76r_test.go:40: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp9uszq76r_test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp9uszq76r_test.go:40: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i + 1)\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp0hkdnjd5_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0hkdnjd5_test.go:43: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0hkdnjd5_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0hkdnjd5_test.go:43: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0hkdnjd5_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54723e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:10 +0xb4 fp=0xc0201603a0 sp=0xc020160398 pc=0x50a6b4\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc0201603d0 sp=0xc0201603a0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160400 sp=0xc0201603d0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160430 sp=0xc020160400 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160460 sp=0xc020160430 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160490 sp=0xc020160460 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc0201604c0 sp=0xc020160490 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc0201604f0 sp=0xc0201604c0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160520 sp=0xc0201604f0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160550 sp=0xc020160520 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160580 sp=0xc020160550 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc0201605b0 sp=0xc020160580",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n            if i == j {\n                continue\n            }\n            \n            if i % j == 0 {\n                break\n            }\n            \n            if j == 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp94apy16a_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp94apy16a_test.go:53: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp94apy16a_test.go:53: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp94apy16a_test.go:53: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp94apy16a_test.go:53: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        \n        count += starts_one_ends_helper(i)\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp1bako51_test.go:21:18: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends_test(i)\n        } else {\n            count += starts_one_ends_test(i) + starts_one_ends_test(n - i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3hx2ylem_test.go:18:22: undefined: starts_one_ends_test\n/tmp/tmp3hx2ylem_test.go:20:22: undefined: starts_one_ends_test\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n            if i - j == 1 || j - 1 == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp9v8tzjn3_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp9v8tzjn3_test.go:44: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp9v8tzjn3_test.go:44: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp9v8tzjn3_test.go:44: expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp9v8tzjn3_test.go:44: expected '%!s(int=18000)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            count += starts_one_ends(n - i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpu14n98wv_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpu14n98wv_test.go:42: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpu14n98wv_test.go:42: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpu14n98wv_test.go:42: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpu14n98wv_test.go:42: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < n; i++ {\n        count += starts_one_ends_helper(n, i)\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsf1lf80m_test.go:17:18: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54723e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:10 +0xb4 fp=0xc0201603a0 sp=0xc020160398 pc=0x50a6b4\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc0201603d0 sp=0xc0201603a0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160400 sp=0xc0201603d0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160430 sp=0xc020160400 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160460 sp=0xc020160430 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160490 sp=0xc020160460 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc0201604c0 sp=0xc020160490 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc0201604f0 sp=0xc0201604c0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160520 sp=0xc0201604f0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160550 sp=0xc020160520 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc020160580 sp=0xc020160550 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpb_km425l_test.go:21 +0x7e fp=0xc0201605b0 sp=0xc020160580",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        \n        count += starts_one_ends_helper(i)\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp1bako51_test.go:21:18: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += 1\n        }\n        for j := 1; j <= n; j++ {\n            if i == j {\n                count += 1\n            }\n            if i == 1 || j == 1 {\n                continue\n            }\n            if i < j {\n                count += starts_one_ends(i - 1)\n            }\n            if i > j {\n                count += starts_one_ends(j - 1)\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmplnd17dwr_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmplnd17dwr_test.go:55: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmplnd17dwr_test.go:55: expected '%!s(int=180)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmplnd17dwr_test.go:55: expected '%!s(int=1800)', got '%!s(int=19)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmplnd17dwr_test.go:55: expected '%!s(int=18000)', got '%!s(int=46)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        \n        count += starts_one_ends(n - i)\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp0vlzct32_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0vlzct32_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0vlzct32_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0vlzct32_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0vlzct32_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            count += starts_one_ends(n - i)\n        }\n        \n        if i % 2 == 1 {\n            count += starts_one_ends(i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54723e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:10 +0xe6 fp=0xc0201603a0 sp=0xc020160398 pc=0x50a6e6\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc0201603d8 sp=0xc0201603a0 pc=0x50a67a\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc020160410 sp=0xc0201603d8 pc=0x50a67a\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc020160448 sp=0xc020160410 pc=0x50a67a\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc020160480 sp=0xc020160448 pc=0x50a67a\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc0201604b8 sp=0xc020160480 pc=0x50a67a\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc0201604f0 sp=0xc0201604b8 pc=0x50a67a\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc020160528 sp=0xc0201604f0 pc=0x50a67a\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc020160560 sp=0xc020160528 pc=0x50a67a\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc020160598 sp=0xc020160560 pc=0x50a67a\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc0201605d0 sp=0xc020160598 pc=0x50a67a\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxw6krzpf_test.go:22 +0x7a fp=0xc020160608 sp=0xc0201605d0 ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        \n        count += starts_one_ends(n - i)\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp0vlzct32_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0vlzct32_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0vlzct32_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0vlzct32_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0vlzct32_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j <= 9; j++ {\n            if i == j || i == 10 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=18000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n            if i < j {\n                break\n            }\n            if i > j {\n                continue\n            }\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpusdvyemp_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpusdvyemp_test.go:50: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpusdvyemp_test.go:50: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpusdvyemp_test.go:50: expected '%!s(int=1800)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpusdvyemp_test.go:50: expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpdw1v5030_test.go:45: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpdw1v5030_test.go:45: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpdw1v5030_test.go:45: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpdw1v5030_test.go:45: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        \n        for j := 1; j <= i; j++ {\n            if j % 2 == 1 {\n                continue\n            }\n            \n            if i - j >= n {\n                break\n            }\n            \n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpdz2ee5li_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpdz2ee5li_test.go:54: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpdz2ee5li_test.go:54: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpdz2ee5li_test.go:54: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpdz2ee5li_test.go:54: expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += 1\n        }\n        \n        for j := 1; j <= n; j++ {\n            if j == 1 {\n                count += 1\n            }\n            \n            if i == j {\n                count += 1\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmptecp22kf_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmptecp22kf_test.go:52: expected '%!s(int=18)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmptecp22kf_test.go:52: expected '%!s(int=180)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmptecp22kf_test.go:52: expected '%!s(int=1800)', got '%!s(int=9)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmptecp22kf_test.go:52: expected '%!s(int=18000)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n            if i > 1 && j > 1 {\n                if i == j + 1 {\n                    count++\n                }\n                if i == j - 1 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpw03bqnew_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpw03bqnew_test.go:51: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpw03bqnew_test.go:51: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpw03bqnew_test.go:51: expected '%!s(int=1800)', got '%!s(int=10)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpw03bqnew_test.go:51: expected '%!s(int=18000)', got '%!s(int=14)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += 1\n        }\n        \n        for j := 1; j <= i; j++ {\n            if j == 1 {\n                count += 1\n            }\n            \n            if i - j == 1 || j - i == 1 {\n                count += 1\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpscrif67i_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpscrif67i_test.go:52: expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpscrif67i_test.go:52: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpscrif67i_test.go:52: expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpscrif67i_test.go:52: expected '%!s(int=18000)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpvjocdicg_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpvjocdicg_test.go:44: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpvjocdicg_test.go:44: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpvjocdicg_test.go:44: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpvjocdicg_test.go:44: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        for j := 1; j <= n; j++ {\n            if j % 2 == 0 {\n                continue\n            }\n            if i == j {\n                continue\n            }\n            if i == j + 1 {\n                count++\n                break\n            }\n            if i + j == n {\n                count++\n                break\n            }\n            if i + j == n - 1 {\n                count++\n                break\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp5deelqfb_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5deelqfb_test.go:58: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5deelqfb_test.go:58: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5deelqfb_test.go:58: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5deelqfb_test.go:58: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp4f1hnp5t_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp4f1hnp5t_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp4f1hnp5t_test.go:40: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp4f1hnp5t_test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp4f1hnp5t_test.go:40: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        \n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            \n            if j == 1 || j == 10 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpgdw2lg_2_test.go:52: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpgdw2lg_2_test.go:52: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpgdw2lg_2_test.go:52: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpgdw2lg_2_test.go:52: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j <= 9; j++ {\n            if i == j || i == 10 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmppu_w8_7y_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmppu_w8_7y_test.go:43: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmppu_w8_7y_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmppu_w8_7y_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmppu_w8_7y_test.go:43: expected '%!s(int=18000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        }\n        \n        if i < 10 {\n            count += starts_one_ends(n - i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa9uwirgu_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa9uwirgu_test.go:46: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa9uwirgu_test.go:46: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa9uwirgu_test.go:46: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa9uwirgu_test.go:46: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpmjb9c2l5_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpmjb9c2l5_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpmjb9c2l5_test.go:40: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpmjb9c2l5_test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpmjb9c2l5_test.go:40: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        \n        for j := 1; j <= 9; j++ {\n            if i == j || i == j + 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpeugdbgy7_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpeugdbgy7_test.go:48: expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpeugdbgy7_test.go:48: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpeugdbgy7_test.go:48: expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpeugdbgy7_test.go:48: expected '%!s(int=18000)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += 1\n        }\n        \n        for j := 1; j <= n; j++ {\n            if j == 1 {\n                count += 1\n            }\n            \n            if i == j {\n                count += 1\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpl2ukf_lt_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpl2ukf_lt_test.go:52: expected '%!s(int=18)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpl2ukf_lt_test.go:52: expected '%!s(int=180)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpl2ukf_lt_test.go:52: expected '%!s(int=1800)', got '%!s(int=9)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpl2ukf_lt_test.go:52: expected '%!s(int=18000)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += 1\n        }\n        \n        for j := 1; j <= n; j++ {\n            if i == j {\n                count += 1\n            }\n            \n            if i == j + 1 {\n                count += 1\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp81qkix5x_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp81qkix5x_test.go:52: expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp81qkix5x_test.go:52: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp81qkix5x_test.go:52: expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp81qkix5x_test.go:52: expected '%!s(int=18000)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 1 {\n        return 1\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i + 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpklk5bsc2_test.go:44: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpklk5bsc2_test.go:44: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpklk5bsc2_test.go:44: expected '%!s(int=1800)', got '%!s(int=13)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpklk5bsc2_test.go:44: expected '%!s(int=18000)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp4f1hnp5t_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp4f1hnp5t_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp4f1hnp5t_test.go:40: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp4f1hnp5t_test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp4f1hnp5t_test.go:40: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j <= 9; j++ {\n            if i == j || i == j + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7hcjxt4p_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7hcjxt4p_test.go:43: expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7hcjxt4p_test.go:43: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7hcjxt4p_test.go:43: expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7hcjxt4p_test.go:43: expected '%!s(int=18000)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i) + starts_one_ends(i - 1)\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpxg9ygiqt_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpxg9ygiqt_test.go:42: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpxg9ygiqt_test.go:42: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpxg9ygiqt_test.go:42: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpxg9ygiqt_test.go:42: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else if i == n {\n            count += starts_one_ends(i - 1)\n        } else {\n            count += starts_one_ends(n - i) + starts_one_ends(i - 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp2zq7ypmi_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp2zq7ypmi_test.go:46: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp2zq7ypmi_test.go:46: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp2zq7ypmi_test.go:46: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp2zq7ypmi_test.go:46: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        \n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            \n            if j == 1 || j == 10 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpgdw2lg_2_test.go:52: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpgdw2lg_2_test.go:52: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpgdw2lg_2_test.go:52: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpgdw2lg_2_test.go:52: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i + 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            \n            if i == 1 && j == 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpplyvpn63_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpplyvpn63_test.go:48: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpplyvpn63_test.go:48: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpplyvpn63_test.go:48: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpplyvpn63_test.go:48: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends_test(n - i)\n        } else {\n            count += starts_one_ends_test(n - i + 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7qfdwizy_test.go:18:22: undefined: starts_one_ends_test\n/tmp/tmp7qfdwizy_test.go:20:22: undefined: starts_one_ends_test\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i + 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmporcg0c4c_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmporcg0c4c_test.go:45: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmporcg0c4c_test.go:45: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmporcg0c4c_test.go:45: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmporcg0c4c_test.go:45: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            count += starts_one_ends(n-i)\n        } else {\n            count += ends_one_starts(n-i)\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsh_niqu3_test.go:16:22: undefined: ends_one_starts\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends_helper(i, n)\n        } else {\n            count += starts_one_ends_helper(i, n - 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv0t7op4p_test.go:18:22: undefined: starts_one_ends_helper\n/tmp/tmpv0t7op4p_test.go:20:22: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        count += starts_one_ends_helper(i)\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8d64uznp_test.go:17:18: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n    }\n\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpwd_fy6o4_test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwd_fy6o4_test.go:42: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpwd_fy6o4_test.go:42: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwd_fy6o4_test.go:42: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            if i % j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp79k6s3_j_test.go:45: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp79k6s3_j_test.go:45: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp79k6s3_j_test.go:45: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp79k6s3_j_test.go:45: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count++\n        }\n        \n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp9_ssvrlq_test.go:48: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp9_ssvrlq_test.go:48: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp9_ssvrlq_test.go:48: expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp9_ssvrlq_test.go:48: expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7b4faa1__test.go:42: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends_helper(i, i)\n        } else {\n            count += starts_one_ends_helper(i, i - 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps1q8m8l1_test.go:18:22: undefined: starts_one_ends_helper\n/tmp/tmps1q8m8l1_test.go:20:22: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j <= 9; j++ {\n            if i == j || i == 10 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=18000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            \n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpq94yb6de_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpq94yb6de_test.go:48: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpq94yb6de_test.go:48: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpq94yb6de_test.go:48: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpq94yb6de_test.go:48: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i) + starts_one_ends(i - 1)\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpl8qh3p5c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpl8qh3p5c_test.go:43: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpl8qh3p5c_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpl8qh3p5c_test.go:43: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpl8qh3p5c_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            count += starts_one_ends(n - i)\n        }\n        \n        if i % 2 == 1 {\n            count += starts_one_ends(n - i) + starts_one_ends(i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54723e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.starts_one_ends(0x0, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:10 +0x114 fp=0xc020160380 sp=0xc020160378 pc=0x50a714\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x85 fp=0xc0201603c0 sp=0xc020160380 pc=0x50a685\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x9d fp=0xc020160400 sp=0xc0201603c0 pc=0x50a69d\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x9d fp=0xc020160440 sp=0xc020160400 pc=0x50a69d\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x9d fp=0xc020160480 sp=0xc020160440 pc=0x50a69d\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x9d fp=0xc0201604c0 sp=0xc020160480 pc=0x50a69d\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x9d fp=0xc020160500 sp=0xc0201604c0 pc=0x50a69d\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x9d fp=0xc020160540 sp=0xc020160500 pc=0x50a69d\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x9d fp=0xc020160580 sp=0xc020160540 pc=0x50a69d\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x9d fp=0xc0201605c0 sp=0xc020160580 pc=0x50a69d\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x9d fp=0xc020160600 sp=0xc0201605c0 pc=0x50a69d\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp2gzd6spk_test.go:22 +0x9d fp=0xc020160640 sp=0xc02016060",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count++\n        }\n        \n        for j := 1; j <= n; j++ {\n            if j == 1 {\n                count++\n            }\n            \n            if i == j {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp6hzewc7h_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp6hzewc7h_test.go:52: expected '%!s(int=18)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp6hzewc7h_test.go:52: expected '%!s(int=180)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp6hzewc7h_test.go:52: expected '%!s(int=1800)', got '%!s(int=9)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp6hzewc7h_test.go:52: expected '%!s(int=18000)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i) + starts_one_ends(i - 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpyhrv63nq_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpyhrv63nq_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpyhrv63nq_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpyhrv63nq_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpyhrv63nq_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa6ynewyi_test.go:32: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n    }\n\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpwd_fy6o4_test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwd_fy6o4_test.go:42: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpwd_fy6o4_test.go:42: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwd_fy6o4_test.go:42: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i + 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        for j := 1; j <= n; j++ {\n            if j % 2 == 1 {\n                continue\n            }\n            if i == j {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp6u977u4y_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp6u977u4y_test.go:45: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp6u977u4y_test.go:45: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp6u977u4y_test.go:45: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp6u977u4y_test.go:45: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmprcqbms5b_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmprcqbms5b_test.go:48: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmprcqbms5b_test.go:48: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmprcqbms5b_test.go:48: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmprcqbms5b_test.go:48: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j <= 9; j++ {\n            if i == j || i == 10 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=18000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        \n        if i == 1 {\n            count++\n        }\n        \n        for j := 1; j <= i; j++ {\n            if j % 2 == 0 {\n                continue\n            }\n            \n            if j == 1 {\n                count++\n            }\n            \n            if i - j >= 1 {\n                count += starts_one_ends(i - j)\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpn8bxvff1_test.go:60: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpn8bxvff1_test.go:60: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpn8bxvff1_test.go:60: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpn8bxvff1_test.go:60: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpn8bxvff1_test.go:60: expected '%!s(int=18000)', got '%!s(int=13)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += 1\n        }\n        \n        for j := 1; j <= n; j++ {\n            if i == j {\n                count += 1\n            }\n            \n            if i == 1 || j == 1 {\n                continue\n            }\n            \n            if i == j - 1 || j == i - 1 {\n                count += 1\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp6rphiyj1_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp6rphiyj1_test.go:56: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp6rphiyj1_test.go:56: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp6rphiyj1_test.go:56: expected '%!s(int=1800)', got '%!s(int=9)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp6rphiyj1_test.go:56: expected '%!s(int=18000)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        for j := 1; j <= n; j++ {\n            if j % 2 == 1 {\n                continue\n            }\n            if i == j {\n                continue\n            }\n            if i == j + 1 {\n                count++\n                break\n            }\n            if i + j == n {\n                count++\n                break\n            }\n            if i + j + 1 == n {\n                count++\n                break\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpeckw645c_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpeckw645c_test.go:57: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpeckw645c_test.go:57: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpeckw645c_test.go:57: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpeckw645c_test.go:57: expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n            if i == j {\n                continue\n            }\n            \n            if i % j == 0 {\n                break\n            }\n            \n            if j == 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpflpbmob4_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpflpbmob4_test.go:52: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpflpbmob4_test.go:52: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpflpbmob4_test.go:52: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpflpbmob4_test.go:52: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i + 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpva1tpccx_test.go:40: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count++\n        }\n        \n        for j := 1; j <= n; j++ {\n            if i == j {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpl4buv33u_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpl4buv33u_test.go:48: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpl4buv33u_test.go:48: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpl4buv33u_test.go:48: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpl4buv33u_test.go:48: expected '%!s(int=18000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count++\n        }\n        for j := 1; j <= n; j++ {\n            if i == j {\n                count++\n            }\n            if i == 1 || j == 1 {\n                continue\n            }\n            if i > j {\n                continue\n            }\n            if i == j - 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpaacozfhj_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpaacozfhj_test.go:51: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpaacozfhj_test.go:51: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpaacozfhj_test.go:51: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpaacozfhj_test.go:51: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpjuv9910q_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpjuv9910q_test.go:45: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjuv9910q_test.go:45: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpjuv9910q_test.go:45: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjuv9910q_test.go:45: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            if j == 1 || j == 10 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7_239hs0_test.go:46: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7_239hs0_test.go:46: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7_239hs0_test.go:46: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7_239hs0_test.go:46: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        \n        for j := 1; j <= n; j++ {\n            if j % 2 == 0 {\n                continue\n            }\n            \n            if i == j {\n                count += 1\n                continue\n            }\n            \n            if i == j + 1 {\n                count += 1\n                continue\n            }\n            \n            if i == j - 1 {\n                count += 1\n                continue\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpbdsfj2gg_test.go:64: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpbdsfj2gg_test.go:64: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpbdsfj2gg_test.go:64: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpbdsfj2gg_test.go:64: expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count++\n        }\n        for j := 1; j <= n; j++ {\n            if i == j {\n                count++\n            }\n            if i == 1 || j == 1 {\n                continue\n            }\n            if i % j == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp638m415c_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp638m415c_test.go:48: expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp638m415c_test.go:48: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp638m415c_test.go:48: expected '%!s(int=1800)', got '%!s(int=9)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp638m415c_test.go:48: expected '%!s(int=18000)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n            if i - j == 1 || j - 1 == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp9v8tzjn3_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp9v8tzjn3_test.go:44: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp9v8tzjn3_test.go:44: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp9v8tzjn3_test.go:44: expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp9v8tzjn3_test.go:44: expected '%!s(int=18000)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            if j == 1 || j == 10 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count++\n        }\n        for j := 1; j <= n; j++ {\n            if i == j {\n                count++\n            }\n            if i == 1 || j == 1 {\n                continue\n            }\n            if i > j {\n                break\n            }\n            if i == j-1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpa54pucb8_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa54pucb8_test.go:51: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa54pucb8_test.go:51: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa54pucb8_test.go:51: expected '%!s(int=1800)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa54pucb8_test.go:51: expected '%!s(int=18000)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            if j == 1 || j == 10 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count++\n        }\n        \n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5qo0p1j9_test.go:49: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5qo0p1j9_test.go:49: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5qo0p1j9_test.go:49: expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5qo0p1j9_test.go:49: expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0u9wwn6b_test.go:42: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 1 {\n        return 1\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        \n        count += starts_one_ends(n - i)\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp8m0u9h1y_test.go:44: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp8m0u9h1y_test.go:44: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp8m0u9h1y_test.go:44: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp8m0u9h1y_test.go:44: expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - 1)\n        } else {\n            count += starts_one_ends(n - i)\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp0k_nfx8x_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0k_nfx8x_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0k_nfx8x_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0k_nfx8x_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0k_nfx8x_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5duhprpw_test.go:43: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 1 {\n        return 1\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i) + starts_one_ends(i - 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpi5z97z_3_test.go:44: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpi5z97z_3_test.go:44: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpi5z97z_3_test.go:44: expected '%!s(int=1800)', got '%!s(int=18)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpi5z97z_3_test.go:44: expected '%!s(int=18000)', got '%!s(int=54)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        \n        for j := 1; j <= 9; j++ {\n            if i == j || i == j + 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpeugdbgy7_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpeugdbgy7_test.go:48: expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpeugdbgy7_test.go:48: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpeugdbgy7_test.go:48: expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpeugdbgy7_test.go:48: expected '%!s(int=18000)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp1waltt42_test.go:42: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    \n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n            if i == j {\n                count++\n            }\n            \n            if i == j + 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpfaw5q884_test.go:49: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpfaw5q884_test.go:49: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpfaw5q884_test.go:49: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpfaw5q884_test.go:49: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    \n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count++\n        }\n        \n        for j := 1; j <= n-i; j++ {\n            if j == 1 {\n                count++\n            }\n            \n            if i == j {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa7gv0zb3_test.go:54: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa7gv0zb3_test.go:54: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa7gv0zb3_test.go:54: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa7gv0zb3_test.go:54: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j <= 9; j++ {\n            if i == j || i == j+1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpq5_012lv_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpq5_012lv_test.go:42: expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpq5_012lv_test.go:42: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpq5_012lv_test.go:42: expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpq5_012lv_test.go:42: expected '%!s(int=18000)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j <= 9; j++ {\n            if i == j || i == j + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpfk8b2lia_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpfk8b2lia_test.go:42: expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpfk8b2lia_test.go:42: expected '%!s(int=180)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpfk8b2lia_test.go:42: expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpfk8b2lia_test.go:42: expected '%!s(int=18000)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(i)\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54723e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 5 [running]:\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:10 +0xb4 fp=0xc0201e03a0 sp=0xc0201e0398 pc=0x50a6b4\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e03d0 sp=0xc0201e03a0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e0400 sp=0xc0201e03d0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e0430 sp=0xc0201e0400 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e0460 sp=0xc0201e0430 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e0490 sp=0xc0201e0460 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e04c0 sp=0xc0201e0490 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e04f0 sp=0xc0201e04c0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e0520 sp=0xc0201e04f0 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e0550 sp=0xc0201e0520 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e0580 sp=0xc0201e0550 pc=0x50a67e\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmpxuz7r_5k_test.go:21 +0x7e fp=0xc0201e05b0 sp=0xc0201e0580 ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += 1\n        } else {\n            count += starts_one_ends(n - i)\n        }\n    }\n\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpu3czz22a_test.go:44: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpu3czz22a_test.go:44: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpu3czz22a_test.go:44: expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpu3czz22a_test.go:44: expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        for j := 1; j <= n; j++ {\n            if j % 2 == 0 {\n                continue\n            }\n            if i == j {\n                continue\n            }\n            if i == j + 1 {\n                count++\n                break\n            }\n            if i + j == n {\n                count++\n                break\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp2y_0wrcx_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp2y_0wrcx_test.go:53: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp2y_0wrcx_test.go:53: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp2y_0wrcx_test.go:53: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp2y_0wrcx_test.go:53: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n                continue\n            }\n            if i > j {\n                continue\n            }\n            if i == j + 1 {\n                count++\n                continue\n            }\n            if i == j - 1 {\n                count++\n                continue\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpzm83ncne_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpzm83ncne_test.go:55: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzm83ncne_test.go:55: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpzm83ncne_test.go:55: expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzm83ncne_test.go:55: expected '%!s(int=18000)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += 1\n        }\n        \n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count += 1\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpxxd_fl12_test.go:48: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpxxd_fl12_test.go:48: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpxxd_fl12_test.go:48: expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpxxd_fl12_test.go:48: expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends_helper(i, n)\n        } else {\n            count += starts_one_ends_helper(i, n - 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv0t7op4p_test.go:18:22: undefined: starts_one_ends_helper\n/tmp/tmpv0t7op4p_test.go:20:22: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    var count int\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpwlonci_c_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpwlonci_c_test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwlonci_c_test.go:42: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpwlonci_c_test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwlonci_c_test.go:42: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j <= 9; j++ {\n            if i == j || i == 10 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpqd9nlb6l_test.go:42: expected '%!s(int=18000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                count += 1\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpxw0afjrv_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpxw0afjrv_test.go:45: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpxw0afjrv_test.go:45: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpxw0afjrv_test.go:45: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpxw0afjrv_test.go:45: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 1 {\n        return 1\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            count += starts_one_ends(n - i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpj4511wem_test.go:42: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpj4511wem_test.go:42: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpj4511wem_test.go:42: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpj4511wem_test.go:42: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        for j := 1; j <= i; j++ {\n            if j % 2 == 1 {\n                count++\n                break\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpvywvaqt8_test.go:44: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpvywvaqt8_test.go:44: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpvywvaqt8_test.go:44: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpvywvaqt8_test.go:44: expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - 1)\n        } else {\n            count += starts_one_ends(n - i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpw80ypa2z_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpw80ypa2z_test.go:45: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpw80ypa2z_test.go:45: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpw80ypa2z_test.go:45: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpw80ypa2z_test.go:45: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        \n        for j := 1; j <= 9; j++ {\n            if i == j || i == 10 - j {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpsw6l7r_8_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpsw6l7r_8_test.go:48: expected '%!s(int=18)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpsw6l7r_8_test.go:48: expected '%!s(int=180)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpsw6l7r_8_test.go:48: expected '%!s(int=1800)', got '%!s(int=9)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpsw6l7r_8_test.go:48: expected '%!s(int=18000)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        \n        count += starts_one_ends_helper(i)\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp1bako51_test.go:21:18: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 1 {\n        return 1\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == n {\n            count++\n        }\n        \n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            \n            if i - j == 1 || i - j == n {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpal6z1ph7_test.go:52: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpal6z1ph7_test.go:52: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpal6z1ph7_test.go:52: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpal6z1ph7_test.go:52: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            continue\n        }\n        if i == 1 {\n            count++\n        }\n        for j := 1; j <= n-i; j++ {\n            if i == j {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpbuyowqgj_test.go:45: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpbuyowqgj_test.go:45: expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpbuyowqgj_test.go:45: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpbuyowqgj_test.go:45: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var result int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n - i; j++ {\n            if i == j {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp9uszq76r_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp9uszq76r_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp9uszq76r_test.go:40: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp9uszq76r_test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp9uszq76r_test.go:40: expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j <= 9; j++ {\n            if i == j || i == j + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpfr3gcuy__test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpfr3gcuy__test.go:45: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpfr3gcuy__test.go:45: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpfr3gcuy__test.go:45: expected '%!s(int=1800)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpfr3gcuy__test.go:45: expected '%!s(int=18000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        }\n        \n        if i > 1 && i < 10 {\n            count += starts_one_ends(n - i)\n        }\n        \n        if i > 9 && i < 100 {\n            count += starts_one_ends(n - i)\n        }\n        \n        if i > 99 && i < 1000 {\n            count += starts_one_ends(n - i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpg366g8lb_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpg366g8lb_test.go:55: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpg366g8lb_test.go:55: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpg366g8lb_test.go:55: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpg366g8lb_test.go:55: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - 1)\n        }\n        \n        if i % 2 == 0 {\n            count += starts_one_ends(n - i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpo1z8n7pu_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpo1z8n7pu_test.go:47: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpo1z8n7pu_test.go:47: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpo1z8n7pu_test.go:47: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpo1z8n7pu_test.go:47: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i + 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends_helper(i, n)\n        } else {\n            count += starts_one_ends_helper(i, n) + starts_one_ends_helper(i-1, n)\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjhyn5tvm_test.go:19:22: undefined: starts_one_ends_helper\n/tmp/tmpjhyn5tvm_test.go:21:22: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i + 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpkl9obtr2_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            \n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp0q6gfb9z_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0q6gfb9z_test.go:48: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0q6gfb9z_test.go:48: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0q6gfb9z_test.go:48: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0q6gfb9z_test.go:48: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            \n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmptztjxpb0_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmptztjxpb0_test.go:48: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmptztjxpb0_test.go:48: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmptztjxpb0_test.go:48: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmptztjxpb0_test.go:48: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            if j == 1 || j == 10 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < n; i++ {\n        count += starts_one_ends_helper(n, i)\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpew23vpb4_test.go:18:18: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += 1\n        }\n        \n        for j := 1; j <= n; j++ {\n            if j == 1 {\n                count += 1\n            }\n            \n            if i == j {\n                count += 1\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpl2ukf_lt_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpl2ukf_lt_test.go:52: expected '%!s(int=18)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpl2ukf_lt_test.go:52: expected '%!s(int=180)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpl2ukf_lt_test.go:52: expected '%!s(int=1800)', got '%!s(int=9)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpl2ukf_lt_test.go:52: expected '%!s(int=18000)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmplqga6xqx_test.go:43: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i < j && i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp8ryf3gl1_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp8ryf3gl1_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp8ryf3gl1_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp8ryf3gl1_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp8ryf3gl1_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            for j := 1; j < i; j++ {\n                if j%2 == 0 {\n                    count++\n                }\n            }\n        } else {\n            for j := 1; j < i; j++ {\n                if j%2 == 1 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpc1llbcm5_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpc1llbcm5_test.go:48: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpc1llbcm5_test.go:48: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpc1llbcm5_test.go:48: expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpc1llbcm5_test.go:48: expected '%!s(int=18000)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends_helper(i, n)\n        } else {\n            count += starts_one_ends_helper(i, n - 1)\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp32ycrou0_test.go:19:22: undefined: starts_one_ends_helper\n/tmp/tmp32ycrou0_test.go:21:22: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i + 1)\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp0hkdnjd5_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0hkdnjd5_test.go:43: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0hkdnjd5_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0hkdnjd5_test.go:43: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0hkdnjd5_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7n0big6c_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    var count int\n    for i := 0; i < n; i++ {\n        if i == 0 || i == n - 1 {\n            count++\n        }\n        for j := 1; j < n - i; j++ {\n            if i + j == n - 1 || i + j == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5bwnfkns_test.go:42: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5bwnfkns_test.go:42: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5bwnfkns_test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5bwnfkns_test.go:42: expected '%!s(int=18000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpy272luxh_test.go:43: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(i)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54723e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:10 +0xb5 fp=0xc0201603a0 sp=0xc020160398 pc=0x50a6b5\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc0201603d0 sp=0xc0201603a0 pc=0x50a67f\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc020160400 sp=0xc0201603d0 pc=0x50a67f\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc020160430 sp=0xc020160400 pc=0x50a67f\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc020160460 sp=0xc020160430 pc=0x50a67f\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc020160490 sp=0xc020160460 pc=0x50a67f\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc0201604c0 sp=0xc020160490 pc=0x50a67f\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc0201604f0 sp=0xc0201604c0 pc=0x50a67f\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc020160520 sp=0xc0201604f0 pc=0x50a67f\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc020160550 sp=0xc020160520 pc=0x50a67f\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc020160580 sp=0xc020160550 pc=0x50a67f\ncommand-line-arguments_test.starts_one_ends(0x1, 0x0)\n\t/tmp/tmp_8arin67_test.go:21 +0x7f fp=0xc0201605b0 sp=0xc020160580 ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else if i == n {\n            count += starts_one_ends(i - 1)\n        } else {\n            count += starts_one_ends(n - i) + starts_one_ends(i - 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp6k11nnl3_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp6k11nnl3_test.go:46: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp6k11nnl3_test.go:46: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp6k11nnl3_test.go:46: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp6k11nnl3_test.go:46: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n == 0 {\n        return 0\n    }\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count++\n        }\n        for j := 1; j <= n; j++ {\n            if j == 1 {\n                count++\n            }\n            if i == j {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp73s0y6wn_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp73s0y6wn_test.go:48: expected '%!s(int=18)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp73s0y6wn_test.go:48: expected '%!s(int=180)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp73s0y6wn_test.go:48: expected '%!s(int=1800)', got '%!s(int=9)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp73s0y6wn_test.go:48: expected '%!s(int=18000)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == j {\n                continue\n            }\n            \n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmptztjxpb0_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmptztjxpb0_test.go:48: expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmptztjxpb0_test.go:48: expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmptztjxpb0_test.go:48: expected '%!s(int=1800)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmptztjxpb0_test.go:48: expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            count += starts_one_ends(n - i)\n        } else {\n            count += starts_one_ends(n - i + 1)\n        }\n    }\n    \n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpyr1zghvk_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpyr1zghvk_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpyr1zghvk_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpyr1zghvk_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpyr1zghvk_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=180)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=1800)', got '%!s(int=7)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpma8279cl_test.go:40: expected '%!s(int=18000)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    // Write your code here\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        for j := 1; j <= n; j++ {\n            if j % 2 == 0 {\n                continue\n            }\n            if i == j {\n                continue\n            }\n            if i == j + 1 {\n                count++\n                break\n            }\n            if i == j - 1 {\n                count++\n                break\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmp1wrwu5im_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp1wrwu5im_test.go:54: expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp1wrwu5im_test.go:54: expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp1wrwu5im_test.go:54: expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp1wrwu5im_test.go:54: expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    var count int\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i == 0 || j == 0 {\n                continue\n            }\n            if i == 1 || j == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0 (0.00s)\n        tmpwlonci_c_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpwlonci_c_test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwlonci_c_test.go:42: expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpwlonci_c_test.go:42: expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwlonci_c_test.go:42: expected '%!s(int=18000)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 || i == 10 {\n            count++\n        }\n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            if j == 1 || j == 10 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpahv7ssf0_test.go:45: expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        count += starts_one_ends_helper(i)\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp11h417oh_test.go:19:18: undefined: starts_one_ends_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}