{
  "name": "HumanEval_91_is_bored",
  "language": "go_test.go",
  "prompt": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n",
  "tests": "func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i--\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = 0\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpo_53eww7_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpo_53eww7_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpo_53eww7_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpo_53eww7_test.go:45: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpo_53eww7_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpvptc3770_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpvptc3770_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpvptc3770_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpvptc3770_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpvptc3770_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpqx8tv1f6_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpqx8tv1f6_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpqx8tv1f6_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpqx8tv1f6_test.go:45: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpqx8tv1f6_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpo_53eww7_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpo_53eww7_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpo_53eww7_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpo_53eww7_test.go:45: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpo_53eww7_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i--\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n    words := strings.Split(S, \" \")\n    count := 0\n    for _, word := range words {\n        if word == \"I\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdzqdmdhy_test.go:18:14: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i--\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpl0um8yl8_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n    words := strings.Split(S, \" \")\n    count := 0\n    for _, word := range words {\n        if strings.HasPrefix(word, \"I\") {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy6c7kf8o_test.go:18:14: undefined: strings\n/tmp/tmpy6c7kf8o_test.go:21:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpekb5vo1a_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpekb5vo1a_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpekb5vo1a_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpekb5vo1a_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpekb5vo1a_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpwhgmpyqh_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpwhgmpyqh_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpwhgmpyqh_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpwhgmpyqh_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpwhgmpyqh_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n    count := 0\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n    count := 0\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n    count := 0\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpvc3puais_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4hhyuej__test.go:120:1: expected 'IDENT', found 'func'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            for ; i < len(S); i++ {\n                if S[i] == 'I' {\n                    count++\n                }\n                if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n                    i++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp93hez5cu_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp93hez5cu_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp93hez5cu_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp93hez5cu_test.go:56: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp93hez5cu_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i = -1\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp95oi24au_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpa1_zm42j_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpui_l1t72_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    for i := 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmpkrbe4_15_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i++\n            break\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5 (0.00s)\n        tmp584lwcnw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}