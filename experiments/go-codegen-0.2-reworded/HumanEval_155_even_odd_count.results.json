{
  "name": "HumanEval_155_even_odd_count",
  "language": "go_test.go",
  "prompt": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n",
  "tests": "func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num = num / 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpui7fnvix_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpui7fnvix_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpui7fnvix_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpui7fnvix_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpui7fnvix_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num = num / 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for i := 0; i < len(fmt.Sprintf(\"%d\", num)); i++ {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpo9nbsgz9_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpo9nbsgz9_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpo9nbsgz9_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpo9nbsgz9_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count_even, count_odd := 0, 0\n    for num > 0 {\n        count_even += num%2 == 0\n        count_odd += num%2 != 0\n        num /= 10\n    }\n    return []interface{}{count_even, count_odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcplpuuyi_test.go:17:20: cannot use num % 2 == 0 (type untyped bool) as type int\n/tmp/tmpcplpuuyi_test.go:18:19: cannot use num % 2 != 0 (type untyped bool) as type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpjpds3kxv_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpjpds3kxv_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpjpds3kxv_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpjpds3kxv_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpjpds3kxv_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpjpds3kxv_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpjpds3kxv_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpjpds3kxv_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num = num / 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for i := 0; i < len(fmt.Sprintf(\"%d\", num)); i++ {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpo9nbsgz9_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpo9nbsgz9_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpo9nbsgz9_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpo9nbsgz9_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := make([]interface{}, 2)\n    for num > 0 {\n        count[0] = num % 2\n        num /= 2\n        count[1] = num % 2\n        num /= 2\n    }\n    return count\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpul6_ty30_test.go:45: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpul6_ty30_test.go:45: expected '[%!s(int=1) %!s(int=1)]', got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpul6_ty30_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpul6_ty30_test.go:45: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpul6_ty30_test.go:45: expected '[%!s(int=3) %!s(int=3)]', got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpul6_ty30_test.go:45: expected '[%!s(int=1) %!s(int=0)]', got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpul6_ty30_test.go:45: expected '[%!s(int=2) %!s(int=3)]', got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpul6_ty30_test.go:45: expected '[%!s(int=1) %!s(int=0)]', got '[<nil> <nil>]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    if num < 0 {\n        return []interface{}{0, 0}\n    }\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    counts := make([]interface{}, 2)\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            counts[0] = counts[0].(int) + 1\n        } else {\n            counts[1] = counts[1].(int) + 1\n        }\n    }\n    return counts\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp__06rjw6_test.go:16:24: invalid argument num (type int) for len\n/tmp/tmp__06rjw6_test.go:17:15: invalid operation: num[i] (type int does not support indexing)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        num, even, odd = num%2, even+1, odd+1\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374831,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num = num / 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count++\n        num /= 10\n    }\n    return []interface{}{count%2, count/2}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := make([]interface{}, 2)\n    count[0] = 0\n    count[1] = 0\n    for num > 0 {\n        if num%2 == 0 {\n            count[0] = count[0] + 1\n        } else {\n            count[1] = count[1] + 1\n        }\n        num = num / 2\n    }\n    return count\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr7gay1_x_test.go:20:33: invalid operation: count[0] + 1 (mismatched types interface {} and int)\n/tmp/tmpr7gay1_x_test.go:22:33: invalid operation: count[1] + 1 (mismatched types interface {} and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7fqr45xk_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7fqr45xk_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7fqr45xk_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7fqr45xk_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7fqr45xk_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=-78)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=-345821)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=-2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=-45347)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count_even, count_odd := 0, 0\n    for num > 0 {\n        count_even += num%2 == 0\n        count_odd += num%2 == 1\n        num /= 10\n    }\n    return []interface{}{count_even, count_odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnk41oowi_test.go:17:20: cannot use num % 2 == 0 (type untyped bool) as type int\n/tmp/tmpnk41oowi_test.go:18:19: cannot use num % 2 == 1 (type untyped bool) as type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpailqtomv_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpailqtomv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpailqtomv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpailqtomv_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpailqtomv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count++\n        num /= 10\n    }\n    return []interface{}{count%2, count/2}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num = num / 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpmqb8hiwl_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpmqb8hiwl_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpmqb8hiwl_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpmqb8hiwl_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpmqb8hiwl_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpmqb8hiwl_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpmqb8hiwl_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpmqb8hiwl_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count++\n        num /= 10\n    }\n    return []interface{}{count%2, count/2}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    if num < 0 {\n        return []interface{}{0, 0}\n    }\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        num, even, odd = num/2, even + 1, odd + 1\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpy7gi4qkd_test.go:42: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpy7gi4qkd_test.go:42: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpy7gi4qkd_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=12) %!s(int=12)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpy7gi4qkd_test.go:42: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=19) %!s(int=19)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpy7gi4qkd_test.go:42: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpy7gi4qkd_test.go:42: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpy7gi4qkd_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpy7gi4qkd_test.go:42: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmphkaquxu7_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmphkaquxu7_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmphkaquxu7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmphkaquxu7_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmphkaquxu7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    counts := make([]interface{}, 2)\n    counts[0] = 0\n    counts[1] = 0\n    for num > 0 {\n        counts[0] += num % 2\n        num /= 2\n    }\n    for num > 0 {\n        counts[1] += num % 2\n        num /= 2\n    }\n    return counts\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpou0d9mkb_test.go:19:19: invalid operation: counts[0] += num % 2 (mismatched types interface {} and int)\n/tmp/tmpou0d9mkb_test.go:23:19: invalid operation: counts[1] += num % 2 (mismatched types interface {} and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=-78)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=-345821)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=-2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=-45347)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    if num < 0 {\n        return []interface{}{0, 0}\n    }\n    if num == 0 {\n        return []interface{}{0, 0}\n    }\n    if num == 1 {\n        return []interface{}{0, 1}\n    }\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxj8_2u8q_test.go:52: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxj8_2u8q_test.go:52: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxj8_2u8q_test.go:52: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxj8_2u8q_test.go:52: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxj8_2u8q_test.go:52: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxj8_2u8q_test.go:52: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxj8_2u8q_test.go:52: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxj8_2u8q_test.go:52: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := make([]interface{}, 2)\n    count[0] = 0\n    count[1] = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            count[0]++\n        } else {\n            count[1]++\n        }\n    }\n    return count\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvuiupwia_test.go:18:24: invalid argument num (type int) for len\n/tmp/tmpvuiupwia_test.go:19:15: invalid operation: num[i] (type int does not support indexing)\n/tmp/tmpvuiupwia_test.go:20:21: invalid operation: count[0]++ (non-numeric type interface {})\n/tmp/tmpvuiupwia_test.go:22:21: invalid operation: count[1]++ (non-numeric type interface {})\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num = num/2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpvsai5k2__test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpvsai5k2__test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpvsai5k2__test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpvsai5k2__test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpvsai5k2__test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpvsai5k2__test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpvsai5k2__test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpvsai5k2__test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := make([]interface{}, 2)\n    count[0] = 0\n    count[1] = 0\n    for num > 0 {\n        count[0] += num % 2\n        count[1] += num % 2\n        num /= 2\n    }\n    return count\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjcmorp5h_test.go:19:18: invalid operation: count[0] += num % 2 (mismatched types interface {} and int)\n/tmp/tmpjcmorp5h_test.go:20:18: invalid operation: count[1] += num % 2 (mismatched types interface {} and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxrdlxfkz_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxrdlxfkz_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxrdlxfkz_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxrdlxfkz_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxrdlxfkz_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count++\n        num /= 10\n    }\n    return []interface{}{count%2, count/2}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := make([]interface{}, 2)\n    count[0] = 0\n    count[1] = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            count[0] += 1\n        } else {\n            count[1] += 1\n        }\n    }\n    return count\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpejrdia8a_test.go:18:24: invalid argument num (type int) for len\n/tmp/tmpejrdia8a_test.go:19:15: invalid operation: num[i] (type int does not support indexing)\n/tmp/tmpejrdia8a_test.go:20:22: invalid operation: count[0] += 1 (mismatched types interface {} and int)\n/tmp/tmpejrdia8a_test.go:22:22: invalid operation: count[1] += 1 (mismatched types interface {} and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        num, even, odd = num%2, even+1, odd+1\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374831,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count++\n        num /= 10\n    }\n    return []interface{}{count%2, count/2}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpuz0ge4ef_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    counts := make([]interface{}, 2)\n    counts[0] = 0\n    counts[1] = 0\n    for num > 0 {\n        counts[0] += num % 2\n        num /= 2\n    }\n    for num > 0 {\n        counts[1] += num % 2\n        num /= 2\n    }\n    return counts\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpou0d9mkb_test.go:19:19: invalid operation: counts[0] += num % 2 (mismatched types interface {} and int)\n/tmp/tmpou0d9mkb_test.go:23:19: invalid operation: counts[1] += num % 2 (mismatched types interface {} and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp4on2zl28_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpynfurs6b_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpynfurs6b_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpynfurs6b_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpynfurs6b_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpynfurs6b_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num = num / 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count_even, count_odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            count_even += 1\n        } else {\n            count_odd += 1\n        }\n        num /= 2\n    }\n    return []interface{}{count_even, count_odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpcr2mikwq_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpcr2mikwq_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpcr2mikwq_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpcr2mikwq_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpcr2mikwq_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpcr2mikwq_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpcr2mikwq_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpcr2mikwq_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        num, even, odd = num, even, odd\n        num = num / 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxfr19_c8_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxfr19_c8_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxfr19_c8_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxfr19_c8_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxfr19_c8_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxfr19_c8_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxfr19_c8_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxfr19_c8_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    counts := make([]interface{}, 2)\n    counts[0] = 0\n    counts[1] = 0\n    for num > 0 {\n        counts[num%2]++\n        num /= 2\n    }\n    return counts\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0ikazcha_test.go:19:22: invalid operation: counts[num % 2]++ (non-numeric type interface {})\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    counts := make([]interface{}, 2)\n    for num > 0 {\n        counts[0] = num % 2\n        num /= 2\n        counts[1] = num % 2\n        num /= 2\n    }\n    return counts\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpeeoaonks_test.go:45: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpeeoaonks_test.go:45: expected '[%!s(int=1) %!s(int=1)]', got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpeeoaonks_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpeeoaonks_test.go:45: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpeeoaonks_test.go:45: expected '[%!s(int=3) %!s(int=3)]', got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpeeoaonks_test.go:45: expected '[%!s(int=1) %!s(int=0)]', got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpeeoaonks_test.go:45: expected '[%!s(int=2) %!s(int=3)]', got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpeeoaonks_test.go:45: expected '[%!s(int=1) %!s(int=0)]', got '[<nil> <nil>]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpoh0_a4n7_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    if num < 0 {\n        return []interface{}{0, 0}\n    }\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpqhzju8b1_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even_count, odd_count int\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpgl3zajt7_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num = num / 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp8kotrxiv_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := make([]interface{}, 2)\n    count[0] = 0\n    count[1] = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            count[0] += 1\n        } else {\n            count[1] += 1\n        }\n        num /= 2\n    }\n    return count\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0c_v8az0_test.go:20:22: invalid operation: count[0] += 1 (mismatched types interface {} and int)\n/tmp/tmp0c_v8az0_test.go:22:22: invalid operation: count[1] += 1 (mismatched types interface {} and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpui7fnvix_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpui7fnvix_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpui7fnvix_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpui7fnvix_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpui7fnvix_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=-78)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=-345821)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=-2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=-45347)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpkv8becgn_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    if num < 0 {\n        return []interface{}{0, 0}\n    }\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpb40lvmor_test.go:46: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    if num < 0 {\n        return []interface{}{0, 0}\n    }\n    if num == 0 {\n        return []interface{}{0, 0}\n    }\n    if num == 1 {\n        return []interface{}{1, 0}\n    }\n    count_even := 0\n    count_odd := 0\n    for i := 0; i < len(fmt.Sprintf(\"%d\", num)); i++ {\n        if i % 2 == 0 {\n            count_even += 1\n        } else {\n            count_odd += 1\n        }\n    }\n    return []interface{}{count_even, count_odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpl2hit7go_test.go:56: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpl2hit7go_test.go:56: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpl2hit7go_test.go:56: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpl2hit7go_test.go:56: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpl2hit7go_test.go:56: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpl2hit7go_test.go:56: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=-78)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=-345821)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=-2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=-45347)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpq3h176l6_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxg7xd936_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxrdlxfkz_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxrdlxfkz_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxrdlxfkz_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxrdlxfkz_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxrdlxfkz_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count++\n        num /= 10\n    }\n    return []interface{}{count, count - count % 2}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5_5eegyj_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5_5eegyj_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5_5eegyj_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5_5eegyj_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=6) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5_5eegyj_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5_5eegyj_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5_5eegyj_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5_5eegyj_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374814,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7e14pmti_test.go:48: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even, odd int\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpruel2d_c_test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    if num < 0 {\n        return []interface{}{0, 0}\n    }\n    if num == 0 {\n        return []interface{}{0, 0}\n    }\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374818,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpqr4xm__9_test.go:49: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpqr4xm__9_test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpqr4xm__9_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpqr4xm__9_test.go:49: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpqr4xm__9_test.go:49: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpqr4xm__9_test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpqr4xm__9_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpqr4xm__9_test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    count := 0\n    for num > 0 {\n        count += num % 2\n        num /= 2\n    }\n    return []interface{}{count, num}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=-78)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=-345821)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=-2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=-45347)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpi2_aayb4_test.go:43: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 2\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp5t3nhw5__test.go:47: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpyxa8kbu__test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}